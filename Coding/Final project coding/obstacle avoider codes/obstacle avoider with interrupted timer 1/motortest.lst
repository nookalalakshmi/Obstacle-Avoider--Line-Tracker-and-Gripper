   1               		.file	"motortest.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  73               	.global	speed
  75               	speed:
   1:motortest.c   **** //			Two Motors and a Proximity IR sensor
   2:motortest.c   **** 
   3:motortest.c   **** /*-------------------------------------------------------------------          
   4:motortest.c   ****  Operation-
   5:motortest.c   ****  This example shows how to drive two mtors and control the direction
   6:motortest.c   ****  based on Proximity Sensor output.
   7:motortest.c   ****  At powerup robot moves forward by moving motor M1 Anti-Clockwise and 
   8:motortest.c   ****  motor M2 Clockwise. 
   9:motortest.c   ****  If IR Proxmity sensor detects obstrical then robot
  10:motortest.c   ****  moves backward for 2 second (motor M1 Clockwise and motor M2 
  11:motortest.c   ****  Anti-Clockwise) then turns clockwise (motor M1 Clockwise and motor 
  12:motortest.c   ****  M2 Clockwise) till no obstriction in IR Sensor and then moves forward 
  13:motortest.c   ****  again.
  14:motortest.c   **** 
  15:motortest.c   ****  1. Robot move forward => motor M1 Anti-Clockwise and motor M2 Clockwise
  16:motortest.c   ****  2. Robot move backward => motor M2 Anti-Clockwise and motor M1 Clockwise
  17:motortest.c   ****  3. Robot turn right => motor M1 Anti-Clockwise and motor M2 Anti-Clockwise
  18:motortest.c   ****  4. Robot turn left => motor M1 Clockwise and motor M2 Clockwise
  19:motortest.c   **** 	
  20:motortest.c   **** 
  21:motortest.c   ****  Description:
  22:motortest.c   ****  CPU => ATMEGA8-L @8MHz Internal
  23:motortest.c   **** 
  24:motortest.c   ****  Motors- 
  25:motortest.c   **** 
  26:motortest.c   ****   M1 Connected to PB6 and PB7 such that-
  27:motortest.c   ****   PB6	PB7		M1
  28:motortest.c   ****   0		0		Stop
  29:motortest.c   ****   1		0		Move Clockwsi
  30:motortest.c   ****   0		1		Move Anti-Clockwsi
  31:motortest.c   ****   1		1		Stop
  32:motortest.c   **** 
  33:motortest.c   ****   M2 Connected to PB6 and PB7 such that-
  34:motortest.c   ****   PB0	PB1		M2
  35:motortest.c   ****   0		0		Stop
  36:motortest.c   ****   1		0		Move Clockwsi
  37:motortest.c   ****   0		1		Move Anti-Clockwsi
  38:motortest.c   ****   1		1		Stop
  39:motortest.c   **** 
  40:motortest.c   ****   LED indicator-
  41:motortest.c   ****   PB2	State
  42:motortest.c   ****   0		Off
  43:motortest.c   ****   1		On
  44:motortest.c   **** 
  45:motortest.c   ****   Proximity IR Sensor Input
  46:motortest.c   ****   PD2(INT0)	State
  47:motortest.c   ****   0			Obstruction
  48:motortest.c   ****   1			Clear Path
  49:motortest.c   **** ---------------------------------------------------------------------*/
  50:motortest.c   **** 
  51:motortest.c   **** //************** HEADER FILES ********************
  52:motortest.c   **** #include<avr/io.h>					//HEADER FILE FOR AVR INPUT OUTPUT
  53:motortest.c   **** #include<compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  54:motortest.c   **** #include<util/delay.h>				//HEADER FILE FOR DELAY
  55:motortest.c   **** #include <avr/interrupt.h>
  56:motortest.c   **** 
  57:motortest.c   **** //************** GLOBAL VARIABLES ********************
  58:motortest.c   **** char navflag;
  59:motortest.c   **** int count = 0;
  60:motortest.c   **** int fwdrestrict=0;
  61:motortest.c   **** char pathfound=0;
  62:motortest.c   **** int flag=0;
  63:motortest.c   **** char sendsig=0;
  64:motortest.c   **** 
  65:motortest.c   **** //**************Timer CONSTANTS ********************
  66:motortest.c   **** #define TIMER_0_CNT     0xC0  // 500 micro sec, Timer set at 500 microsec.
  67:motortest.c   ****                                 // ((TCNT0=0xC0))
  68:motortest.c   **** 								// DECIMAL VALUE = 192
  69:motortest.c   **** 								// MAX VALUE = 255
  70:motortest.c   **** 								// TIMER OVERFLOW ON 255-192 = 63 COUNTS
  71:motortest.c   **** #define TMC8_CK64	(_BV(CS01)+_BV(CS00))	// 8 BIT TIMER0 AT 64 PRESCALAR
  72:motortest.c   **** 											// GIVES 64*63 =  4000 CYCLES	
  73:motortest.c   **** 											// AT 8MHZ FREQUENCY 1 cycle is of 0.125 micro sec.
  74:motortest.c   **** //************** FUNCTIONS ********************
  75:motortest.c   **** //***************************************
  76:motortest.c   **** void speed(char direction,int value)
  77:motortest.c   **** {
  76               	 size = 0 */
  77               		mov r20,r24
  79               	.LM1:
  80               		ldi r18,lo8(255)
  81 0000 482F      		ldi r19,hi8(255)
  78:motortest.c   **** 	//This function will take value as speed and direction and will implement accordingly
  79:motortest.c   **** 	int i=0;
  80:motortest.c   **** 	while(TCNT0< 254)
  81:motortest.c   **** 	{
  82:motortest.c   **** 		for(i=0;i<255-value;i++)
  82               	18,r22
  83               		sbc r19,r23
  84 0002 2FEF      		rjmp .L2
  85 0004 30E0      	.L3:
  87 0008 370B      	.LM2:
  88 000a 00C0      		out 56-32,__zero_reg__
  83:motortest.c   **** 		{
  84:motortest.c   **** 			PORTB=0x00;
  90               	diw r24,1
  91               	.L7:
  92 000c 18BA      		cp r24,r18
  93               		cpc r25,r19
  94               		brlt .L3
  95 000e 0196      		ldi r24,lo8(0)
  96               		ldi r25,hi8(0)
  97 0010 8217      		rjmp .L4
  98 0012 9307      	.L5:
 100 0016 80E0      	.LM4:
 101 0018 90E0      		out 56-32,r20
 103               	.LM5:
  85:motortest.c   **** 		}
  86:motortest.c   **** 		for(i=0;i<value;i++)
  87:motortest.c   **** 		{
  88:motortest.c   **** 			PORTB=direction;
 104               	4:
 105               		cp r24,r22
 106 001c 48BB      		cpc r25,r23
 107               		brlt .L5
 108               	.L2:
 110               	.LM6:
 111 0020 8617      		in r24,82-32
 112 0022 9707      		cpi r24,lo8(-2)
 113 0024 04F0      		brsh .L8
 114               		ldi r24,lo8(0)
 115               		ldi r25,hi8(0)
 116               		rjmp .L7
 117 0026 82B7      	.L8:
 118 0028 8E3F      		ret
 123               	.Lscope1:
 126               	.global	direction_motor
 128               	direction_motor:
 130               	.LM7:
 131               	.LFBB2:
 132               	/* prologue: function */
 133               	/* frame size = 0 */
  89:motortest.c   **** 		}
  90:motortest.c   **** 	}
  91:motortest.c   **** 	
  92:motortest.c   **** 	return;
  93:motortest.c   **** }
  94:motortest.c   **** 
  95:motortest.c   **** 
  96:motortest.c   **** 
  97:motortest.c   **** void direction_motor(int detectline)
  98:motortest.c   **** {
 135               	o_reg__
 136               		brne .+2
 137               		rjmp .L14
 138               		cpi r24,5
 139               		cpc r25,__zero_reg__
  99:motortest.c   **** 	//Set the direction and speed according to the line detected
 100:motortest.c   **** 	char direction;
 101:motortest.c   **** 	switch(detectline)
 140               	 .L18
 141               		cpi r24,2
 142 0034 8430      		cpc r25,__zero_reg__
 143 0036 9105      		breq .L12
 144 0038 01F4      		cpi r24,3
 145 003a 00C0      		cpc r25,__zero_reg__
 146 003c 8530      		brlt .+2
 147 003e 9105      		rjmp .L13
 148 0040 04F4      		sbiw r24,1
 149 0042 8230      		breq .+2
 150 0044 9105      		rjmp .L43
 151 0046 01F0      		rjmp .L60
 152 0048 8330      	.L18:
 153 004a 9105      		cpi r24,6
 154 004c 04F0      		cpc r25,__zero_reg__
 155 004e 00C0      		brne .+2
 156 0050 0197      		rjmp .L16
 157 0052 01F0      		cpi r24,6
 158 0054 00C0      		cpc r25,__zero_reg__
 159 0056 00C0      		brge .+2
 160               		rjmp .L15
 161 0058 8630      		sbiw r24,7
 162 005a 9105      		breq .+2
 163 005c 01F4      		rjmp .L43
 164 005e 00C0      		rjmp .L61
 165 0060 8630      	.L60:
 167 0064 04F4      	.LM9:
 168 0066 00C0      		ldi r24,lo8(1)
 169 0068 0797      		sts pathfound,r24
 170 006a 01F0      	.LBB86:
 171 006c 00C0      	.LBB87:
 173               	.LM10:
 102:motortest.c   **** 	{
 103:motortest.c   **** 		case 1:	//forward
 104:motortest.c   **** 				direction=0x81;
 105:motortest.c   **** 				pathfound=1;
 174               	:
 175               	.LBE87:
 176 0070 81E0      	.LBE86:
 178               	.LM11:
 179               		ldi r24,lo8(0)
 180               		ldi r25,hi8(0)
 181               	.L20:
 182 0076 21E8      	.LBB89:
 183 0078 00C0      	.LBB88:
 185               	.LM12:
 186               		out 56-32,__zero_reg__
 188               	.LM13:
 189 007a 80E0      		adiw r24,1
 190 007c 90E0      		cpi r24,55
 191               		cpc r25,__zero_reg__
 192               		brne .L20
 193               		ldi r24,lo8(0)
 194               		ldi r25,hi8(0)
 195               	.L21:
 197               	.LM14:
 198               		out 56-32,r18
 200 0082 8733      	.LM15:
 201 0084 9105      		adiw r24,1
 202 0086 01F4      		cpi r24,200
 203 0088 80E0      		cpc r25,__zero_reg__
 204 008a 90E0      		brne .L21
 205               	.L19:
 207               	.LM16:
 208 008c 28BB      		in r24,82-32
 209               		cpi r24,lo8(-2)
 210               		brlo .L22
 211 008e 0196      		ret
 212 0090 883C      	.L12:
 213 0092 9105      	.LBE88:
 214 0094 01F4      	.LBE89:
 216               	.LM17:
 217               		ldi r24,lo8(1)
 218 0096 82B7      		sts pathfound,r24
 219 0098 8E3F      	.LBB90:
 220 009a 00F0      	.LBB91:
 222               	.LM18:
 223               		ldi r18,lo8(65)
 224               		rjmp .L23
 106:motortest.c   **** 				speed(direction,200);
 107:motortest.c   **** 				return;
 108:motortest.c   **** 		case 2:	//right
 109:motortest.c   **** 				direction=0x41;
 110:motortest.c   **** 				pathfound=1;
 225               	
 226               	.LM19:
 227 009e 81E0      		ldi r24,lo8(0)
 228 00a0 8093 0000 		ldi r25,hi8(0)
 229               	.L24:
 230               	.LBB93:
 231               	.LBB92:
 233 00a4 21E4      	.LM20:
 234 00a6 00C0      		out 56-32,__zero_reg__
 236               	.LM21:
 237               		adiw r24,1
 238               		cpi r24,35
 239               		cpc r25,__zero_reg__
 240 00a8 80E0      		brne .L24
 241 00aa 90E0      		ldi r24,lo8(0)
 242               		ldi r25,hi8(0)
 243               	.L25:
 245               	.LM22:
 246               		out 56-32,r18
 248               	.LM23:
 249               		adiw r24,1
 250 00ae 0196      		cpi r24,220
 251 00b0 8332      		cpc r25,__zero_reg__
 252 00b2 9105      		brne .L25
 253 00b4 01F4      	.L23:
 255 00b8 90E0      	.LM24:
 256               		in r24,82-32
 257               		cpi r24,lo8(-2)
 258               		brlo .L26
 259 00ba 28BB      		ret
 260               	.L13:
 261               	.LBE92:
 262 00bc 0196      	.LBE93:
 264 00c0 9105      	.LM25:
 265 00c2 01F4      		ldi r24,lo8(1)
 266               		sts pathfound,r24
 267               	.LBB94:
 268               	.LBB95:
 270 00c6 8E3F      	.LM26:
 271 00c8 00F0      		ldi r18,lo8(-126)
 272 00ca 0895      		rjmp .L27
 273               	.L30:
 274               	.LBE95:
 275               	.LBE94:
 111:motortest.c   **** 				speed(direction,220);
 112:motortest.c   **** 				return;
 113:motortest.c   **** 		case 3:	//left
 114:motortest.c   **** 				direction=0x82;
 115:motortest.c   **** 				pathfound=1;
 276               	0)
 277               		ldi r25,hi8(0)
 278 00cc 81E0      	.L28:
 279 00ce 8093 0000 	.LBB97:
 280               	.LBB96:
 282               	.LM28:
 283               		out 56-32,__zero_reg__
 285 00d4 00C0      	.LM29:
 286               		adiw r24,1
 287               		cpi r24,35
 288               		cpc r25,__zero_reg__
 289               		brne .L28
 290               		ldi r24,lo8(0)
 291 00d6 80E0      		ldi r25,hi8(0)
 292 00d8 90E0      	.L29:
 294               	.LM30:
 295               		out 56-32,r18
 297               	.LM31:
 298 00da 18BA      		adiw r24,1
 299               		cpi r24,220
 300               		cpc r25,__zero_reg__
 301 00dc 0196      		brne .L29
 302 00de 8332      	.L27:
 304 00e2 01F4      	.LM32:
 305 00e4 80E0      		in r24,82-32
 306 00e6 90E0      		cpi r24,lo8(-2)
 307               		brlo .L30
 308               		ret
 309               	.L14:
 310 00e8 28BB      	.LBE96:
 311               	.LBE97:
 313 00ea 0196      	.LM33:
 314 00ec 8C3D      		ldi r24,lo8(1)
 315 00ee 9105      		ldi r25,hi8(1)
 316 00f0 01F4      		sts (flag)+1,r25
 317               		sts flag,r24
 318               		rjmp .L31
 319               	.L33:
 320 00f2 82B7      		ldi r24,lo8(0)
 321 00f4 8E3F      		ldi r25,hi8(0)
 322 00f6 00F0      	.L32:
 323 00f8 0895      	.LBB98:
 324               	.LBB99:
 326               	.LM34:
 116:motortest.c   **** 				speed(direction,220);
 117:motortest.c   **** 				return;
 118:motortest.c   **** 		case 4:	//stop
 119:motortest.c   **** 				direction=0x00;
 120:motortest.c   **** 				flag=1;
 327               	2
 328               	.LM35:
 329 00fa 81E0      		adiw r24,1
 330 00fc 90E0      		cpi r24,255
 331 00fe 9093 0000 		cpc r25,__zero_reg__
 332 0102 8093 0000 		brne .L32
 333 0106 00C0      	.L31:
 335 0108 80E0      	.LM36:
 336 010a 90E0      		in r24,82-32
 337               		cpi r24,lo8(-2)
 338               		brlo .L33
 339               		ret
 340               	.L36:
 341               		ldi r24,lo8(0)
 342 010c 18BA      		ldi r25,hi8(0)
 343               	.L34:
 344               	.LBE99:
 345 010e 0196      	.LBE98:
 346 0110 8F3F      	.LBB100:
 347 0112 9105      	.LBB101:
 349               	.LM37:
 350               		out 56-32,__zero_reg__
 352 0116 82B7      	.LM38:
 353 0118 8E3F      		adiw r24,1
 354 011a 00F0      		cpi r24,35
 355 011c 0895      		cpc r25,__zero_reg__
 356               		brne .L34
 357 011e 80E0      		ldi r24,lo8(0)
 358 0120 90E0      		ldi r25,hi8(0)
 359               	.L35:
 361               	.LM39:
 362               		out 56-32,r18
 364               	.LM40:
 365               		adiw r24,1
 366 0122 18BA      		cpi r24,220
 367               		cpc r25,__zero_reg__
 368               		brne .L35
 369 0124 0196      		rjmp .L57
 370 0126 8332      	.L15:
 372 012a 01F4      	.LM41:
 373 012c 80E0      		ldi r18,lo8(2)
 374 012e 90E0      	.L57:
 376               	.LM42:
 377               		in r24,82-32
 378 0130 28BB      		cpi r24,lo8(-2)
 379               		brlo .L36
 380               		ret
 381 0132 0196      	.L39:
 382 0134 8C3D      		ldi r24,lo8(0)
 383 0136 9105      		ldi r25,hi8(0)
 384 0138 01F4      	.L37:
 385 013a 00C0      	.LBE101:
 386               	.LBE100:
 387               	.LBB102:
 388               	.LBB103:
 390               	.LM43:
 391               		out 56-32,__zero_reg__
 393 013e 82B7      	.LM44:
 394 0140 8E3F      		adiw r24,1
 395 0142 00F0      		cpi r24,35
 396 0144 0895      		cpc r25,__zero_reg__
 397               		brne .L37
 398 0146 80E0      		ldi r24,lo8(0)
 399 0148 90E0      		ldi r25,hi8(0)
 400               	.L38:
 402               	.LM45:
 403               		out 56-32,r18
 405               	.LM46:
 406               		adiw r24,1
 407 014a 18BA      		cpi r24,220
 408               		cpc r25,__zero_reg__
 409               		brne .L38
 410 014c 0196      		rjmp .L58
 411 014e 8332      	.L16:
 413 0152 01F4      	.LM47:
 414 0154 80E0      		ldi r18,lo8(64)
 415 0156 90E0      	.L58:
 417               	.LM48:
 418               		in r24,82-32
 419 0158 28BB      		cpi r24,lo8(-2)
 420               		brlo .L39
 421               		ret
 422 015a 0196      	.L42:
 423 015c 8C3D      		ldi r24,lo8(0)
 424 015e 9105      		ldi r25,hi8(0)
 425 0160 01F4      	.L40:
 426 0162 00C0      	.LBE103:
 427               	.LBE102:
 428               	.LBB104:
 429               	.LBB105:
 431               	.LM49:
 432               		out 56-32,__zero_reg__
 434 0166 82B7      	.LM50:
 435 0168 8E3F      		adiw r24,1
 436 016a 00F0      		cpi r24,35
 437 016c 0895      		cpc r25,__zero_reg__
 438               		brne .L40
 439 016e 80E0      		ldi r24,lo8(0)
 440 0170 90E0      		ldi r25,hi8(0)
 441               	.L41:
 443               	.LM51:
 444               		out 56-32,r18
 446               	.LM52:
 447               		adiw r24,1
 448 0172 18BA      		cpi r24,220
 449               		cpc r25,__zero_reg__
 450               		brne .L41
 451 0174 0196      		rjmp .L59
 452 0176 8332      	.L61:
 454 017a 01F4      	.LM53:
 455 017c 80E0      		ldi r18,lo8(66)
 456 017e 90E0      	.L59:
 458               	.LM54:
 459               		in r24,82-32
 460 0180 28BB      		cpi r24,lo8(-2)
 461               		brlo .L42
 462               	.L43:
 463 0182 0196      		ret
 464 0184 8C3D      	.LBE105:
 465 0186 9105      	.LBE104:
 497               	.Lscope2:
 499               	.global	main
 501               	main:
 503               	.LM55:
 504               	.LFBB3:
 505               		push r12
 506               		push r13
 507               		push r14
 508               		push r15
 509               		push r16
 510               		push r17
 511               		push r28
 512               		push r29
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 516               	.LM56:
 517               		ldi r24,lo8(-57)
 121:motortest.c   **** 				speed(direction,255);
 122:motortest.c   **** 				return;
 123:motortest.c   **** 		case 5: //left from center
 124:motortest.c   **** 				direction=0x02;
 125:motortest.c   **** 				speed(direction,220);
 126:motortest.c   **** 				return;
 127:motortest.c   **** 		
 128:motortest.c   **** 		case 6:	//right from center
 129:motortest.c   **** 				direction=0x40;
 130:motortest.c   **** 				speed(direction,220);
 131:motortest.c   **** 				return;
 132:motortest.c   **** 		
 133:motortest.c   **** 		case 7:	//reverse
 134:motortest.c   **** 				direction=0x42;
 135:motortest.c   **** 				speed(direction,220);
 136:motortest.c   **** 				return;
 137:motortest.c   **** 	}
 138:motortest.c   **** }
 139:motortest.c   **** 
 140:motortest.c   **** 
 141:motortest.c   **** 
 142:motortest.c   **** 
 143:motortest.c   **** 
 144:motortest.c   **** //************** MAIN PROGRAM ********************
 145:motortest.c   **** int main(void)
 146:motortest.c   **** {
 518               		ldi r24,lo8(3)
 519               		out 83-32,r24
 521 0196 CF92      	.LM60:
 522 0198 DF92      		ldi r24,lo8(83)
 523 019a EF92      		sts navflag,r24
 525 019e 0F93      	.LM61:
 526 01a0 1F93      		cbi 53-32,5
 528 01a4 DF93      	.LM62:
 529               		ldi r24,lo8(-64)
 530               		out 82-32,r24
 147:motortest.c   **** 	
 148:motortest.c   **** 	DDRB=0xC7;						//SET DATA DIRECTION REGISTER
 531               	estrict
 532               		lds r19,(fwdrestrict)+1
 534 01a8 87BB      	.LM63:
 149:motortest.c   **** 	DDRD=0xF1;						//SET DATA DIRECTION REGISTER
 535               	 r21,lo8(-127)
 536               	.LBB106:
 537 01aa 81EF      	.LBB107:
 538 01ac 81BB      	.LBB108:
 150:motortest.c   **** 	
 151:motortest.c   **** 	DDRC=0x20;
 539               	109:
 541 01ae 80E2      	.Ltext1:
 152:motortest.c   **** 	
 153:motortest.c   **** 	
 154:motortest.c   ****     char i=0;
 155:motortest.c   ****      
 156:motortest.c   **** 	TCCR0 = TMC8_CK64;       		// use CLK/1024 prescale value
 543               	4:
 544               		ldi r26,lo8(500)
 545 01b2 83E0      		ldi r27,hi8(500)
 546 01b4 83BF      	.LBE109:
 157:motortest.c   ****     //TIMSK  = _BV(TOIE0);        	// enable TCNT0 overflow 
 158:motortest.c   **** 	//sei();                       	// enable interrupts
 159:motortest.c   **** 	navflag = 'S';
 547               	108:
 548               	.LBE107:
 549 01b6 83E5      	.LBE106:
 160:motortest.c   **** 	cbi(PORTC,5);
 551               	xt2:
 553 01bc AD98      	.LM65:
 161:motortest.c   **** 	TCNT0=TIMER_0_CNT;
 554               	i r22,lo8(-126)
 555               		mov r14,r22
 556 01be 80EC      	.LBB113:
 557 01c0 82BF      	.LBB114:
 558 01c2 2091 0000 	.LBB115:
 559 01c6 3091 0000 	.LBB116:
 162:motortest.c   **** 	while(1)						//INFINITE LOOP
 163:motortest.c   **** 	{
 164:motortest.c   **** 		fwdrestrict++;
 165:motortest.c   **** 		PORTB=0x81;	//Forward
 560               	s	"c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 561               	.Ltext3:
 563               	.LM66:
 564               		ldi r22,lo8(2500)
 565               		ldi r23,hi8(2500)
 566               	.LBE116:
 567               	.LBE115:
 568               	.LBE114:
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 570               	.Ltext4:
 572 01ce B1E0      	.LM67:
 573               		ldi r20,lo8(65)
 574               		mov r15,r20
 575               	.LBB120:
 576               	.LBB121:
 577               	.LBB122:
 578               	.LBB123:
 166:motortest.c   **** 		for(i=0;i<5;i++)
 167:motortest.c   **** 		{
 168:motortest.c   **** 				
 169:motortest.c   **** 				_delay_ms(2);
 170:motortest.c   **** 				sbi(PORTC,5);
 171:motortest.c   **** 				_delay_ms(2);
 172:motortest.c   **** 				
 173:motortest.c   **** 				if(bit_is_clear(PIND,2))
 174:motortest.c   **** 				{
 175:motortest.c   **** 					sbi(PORTB,2);
 176:motortest.c   **** 					fwdrestrict=0;
 177:motortest.c   **** 				
 178:motortest.c   **** 					while(bit_is_clear(PIND,2))
 179:motortest.c   **** 					{
 180:motortest.c   **** 						PORTB=0x82;		//Left
 579               	:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext5
 580               	.Ltext5:
 582 01d2 E62E      	.LM68:
 583               		ldi r16,lo8(25000)
 584               		ldi r17,hi8(25000)
 585               	.LBE123:
 586               	.LBE122:
 587               	.LBE121:
 588               	.LBE120:
 590               	.Ltext6:
 592 01d6 79E0      	.LM69:
 593               		ldi r25,lo8(66)
 594               		mov r12,r25
 595               	.LBB127:
 596               	.LBB128:
 597               	.LBB129:
 598               	.LBB130:
 181:motortest.c   **** 					}
 182:motortest.c   **** 					
 183:motortest.c   **** 					PORTB=0x81;		//Forward
 184:motortest.c   **** 					_delay_ms(10);
 185:motortest.c   **** 					
 186:motortest.c   **** 				}
 187:motortest.c   **** 				else
 188:motortest.c   **** 				{
 189:motortest.c   **** 					cbi(PORTB,2);
 190:motortest.c   **** 				}
 191:motortest.c   **** 				
 192:motortest.c   **** 				if(bit_is_clear(PINC,0))
 193:motortest.c   **** 				{
 194:motortest.c   **** 					fwdrestrict=0;
 195:motortest.c   **** 					sbi(PORTB,2);
 196:motortest.c   **** 					
 197:motortest.c   **** 					while(bit_is_clear(PINC,0))
 198:motortest.c   **** 					{
 199:motortest.c   **** 						PORTB=0x41;		//right
 599               	0080610/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext7
 600               	.Ltext7:
 602 01da F42E      	.LM70:
 603               		ldi r28,lo8(25)
 604               		ldi r29,hi8(25)
 605               	.LBE130:
 606               	.LBE129:
 607               	.LBE128:
 608               	.LBE127:
 610               	.Ltext8:
 612 01de 11E6      	.LM71:
 613               		ldi r24,lo8(2)
 614               		mov r13,r24
 615               	.L89:
 617               	.LM72:
 618               		subi r18,lo8(-(1))
 200:motortest.c   **** 					}
 201:motortest.c   **** 					
 202:motortest.c   **** 					PORTB=0x81;		//forward
 203:motortest.c   **** 					_delay_ms(10);
 204:motortest.c   **** 					
 205:motortest.c   **** 				}
 206:motortest.c   **** 				else
 207:motortest.c   **** 				{
 208:motortest.c   **** 					cbi(PORTB,2);
 209:motortest.c   **** 				}
 210:motortest.c   **** 				_delay_ms(2);
 211:motortest.c   **** 				cbi(PORTC,5);
 212:motortest.c   **** 				_delay_ms(2);
 213:motortest.c   **** 				
 214:motortest.c   **** 				if(bit_is_clear(PIND,2))
 215:motortest.c   **** 				{
 216:motortest.c   **** 					sbi(PORTB,2);
 217:motortest.c   **** 					fwdrestrict=0;
 218:motortest.c   **** 					while(bit_is_clear(PIND,2))
 219:motortest.c   **** 					{
 220:motortest.c   **** 						PORTB=0x82;		//Left
 221:motortest.c   **** 					}
 222:motortest.c   **** 					
 223:motortest.c   **** 					PORTB=0x81;		//Forward
 224:motortest.c   **** 					_delay_ms(10);
 225:motortest.c   **** 					
 226:motortest.c   **** 				}
 227:motortest.c   **** 				else
 228:motortest.c   **** 				{
 229:motortest.c   **** 					cbi(PORTB,2);
 230:motortest.c   **** 				}
 231:motortest.c   **** 				if(bit_is_clear(PINC,0))
 232:motortest.c   **** 				{
 233:motortest.c   **** 					sbi(PORTB,2);
 234:motortest.c   **** 					fwdrestrict=0;
 235:motortest.c   **** 					while(bit_is_clear(PINC,0))
 236:motortest.c   **** 					{
 237:motortest.c   **** 						PORTB=0x41;		//right
 238:motortest.c   **** 					}
 239:motortest.c   **** 					PORTB=0x81;		//forward
 240:motortest.c   **** 					_delay_ms(10);
 241:motortest.c   **** 					
 242:motortest.c   **** 				}
 243:motortest.c   **** 				else
 244:motortest.c   **** 				{
 245:motortest.c   **** 					cbi(PORTB,2);
 246:motortest.c   **** 				}
 247:motortest.c   **** 				
 248:motortest.c   **** 		}
 249:motortest.c   **** 		_delay_ms(100);
 250:motortest.c   **** 		if(fwdrestrict==1000)
 251:motortest.c   **** 		{
 252:motortest.c   **** 			PORTB=0x42;
 620               	.LM73:
 621 01e0 92E4      		out 56-32,r21
 622 01e2 C92E      		ldi r20,lo8(0)
 623               	.L79:
 624               	.LBB134:
 625               	.LBB112:
 626               	.LBB111:
 627               	.LBB110:
 629               	.Ltext9:
 631 01e4 C9E1      	.LM74:
 632 01e6 D0E0      		movw r24,r26
 633               	/* #APP */
 634               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 635               		1: sbiw r24,1
 636               		brne 1b
 637               	 ;  0 "" 2
 638               	/* #NOAPP */
 253:motortest.c   **** 			_delay_ms(2000);
 254:motortest.c   **** 			PORTB=0x02;
 639               	BE112:
 640               	.LBE134:
 642 01ea D82E      	.Ltext10:
 644               	.LM75:
 645               		sbi 53-32,5
 646 01ec 2F5F      	.LBB135:
 647 01ee 3F4F      	.LBB136:
 648               	.LBB137:
 649               	.LBB138:
 651 01f2 40E0      	.Ltext11:
 653               	.LM76:
 654               		movw r24,r26
 655               	/* #APP */
 656               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 657               		1: sbiw r24,1
 658               		brne 1b
 659               	 ;  0 "" 2
 660               	/* #NOAPP */
 661 01f4 CD01      	.LBE138:
 662               	.LBE137:
 663               	.LBE136:
 664 01f6 0197      	.LBE135:
 666               	.Ltext12:
 668               	.LM77:
 669               		sbic 48-32,2
 670               		rjmp .L63
 672               	.LM78:
 673               		sbi 56-32,2
 674               		rjmp .L64
 675               	.L65:
 677               	.LM79:
 678               		out 56-32,r14
 679               	.L64:
 681               	.LM80:
 682               		sbis 48-32,2
 683               		rjmp .L65
 685 01fc CD01      	.LM81:
 686               		out 56-32,r21
 687               	.LBB139:
 688 01fe 0197      	.LBB119:
 689 0200 01F4      	.LBB118:
 690               	.LBB117:
 692               	.Ltext13:
 694               	.LM82:
 695               		movw r24,r22
 696               	/* #APP */
 697               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 698               		1: sbiw r24,1
 699               		brne 1b
 700 0202 8299      	 ;  0 "" 2
 701 0204 00C0      	/* #NOAPP */
 702               		ldi r18,lo8(0)
 703               		ldi r19,hi8(0)
 704 0206 C29A      		rjmp .L66
 705 0208 00C0      	.L63:
 706               	.LBE117:
 707               	.LBE118:
 708               	.LBE119:
 709 020a E8BA      	.LBE139:
 711               	.Ltext14:
 713 020c 829B      	.LM83:
 714 020e 00C0      		cbi 56-32,2
 715               	.L66:
 717 0210 58BB      	.LM84:
 718               		sbic 51-32,0
 719               		rjmp .L67
 721               	.LM85:
 722               		sbi 56-32,2
 723               		rjmp .L68
 724               	.L69:
 726 0212 CB01      	.LM86:
 727               		out 56-32,r15
 728               	.L68:
 730 0216 01F4      	.LM87:
 731               		sbis 51-32,0
 732               		rjmp .L69
 734 021a 30E0      	.LM88:
 735 021c 00C0      		out 56-32,r21
 736               	.LBB140:
 737               	.LBB141:
 738               	.LBB142:
 739               	.LBB143:
 741               	.Ltext15:
 743               	.LM89:
 744               		movw r24,r22
 745 021e C298      	/* #APP */
 746               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 747               		1: sbiw r24,1
 748               		brne 1b
 749 0220 9899      	 ;  0 "" 2
 750 0222 00C0      	/* #NOAPP */
 751               		ldi r18,lo8(0)
 752               		ldi r19,hi8(0)
 753 0224 C29A      		rjmp .L70
 754 0226 00C0      	.L67:
 755               	.LBE143:
 756               	.LBE142:
 757               	.LBE141:
 758 0228 F8BA      	.LBE140:
 760               	.Ltext16:
 762 022a 989B      	.LM90:
 763 022c 00C0      		cbi 56-32,2
 764               	.L70:
 765               	.LBB144:
 766 022e 58BB      	.LBB145:
 767               	.LBB146:
 768               	.LBB147:
 770               	.Ltext17:
 772               	.LM91:
 773               		movw r24,r26
 774               	/* #APP */
 775 0230 CB01      	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 776               		1: sbiw r24,1
 777               		brne 1b
 778 0232 0197      	 ;  0 "" 2
 779 0234 01F4      	/* #NOAPP */
 780               	.LBE147:
 781               	.LBE146:
 782 0236 20E0      	.LBE145:
 783 0238 30E0      	.LBE144:
 785               	.Ltext18:
 787               	.LM92:
 788               		cbi 53-32,5
 789               	.LBB148:
 790               	.LBB149:
 791               	.LBB150:
 792               	.LBB151:
 794 023c C298      	.Ltext19:
 796               	.LM93:
 797               		movw r24,r26
 798               	/* #APP */
 799               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 800               		1: sbiw r24,1
 801               		brne 1b
 802               	 ;  0 "" 2
 803               	/* #NOAPP */
 804 023e CD01      	.LBE151:
 805               	.LBE150:
 806               	.LBE149:
 807 0240 0197      	.LBE148:
 809               	.Ltext20:
 811               	.LM94:
 812               		sbic 48-32,2
 813               		rjmp .L71
 815               	.LM95:
 816               		sbi 56-32,2
 817               		rjmp .L72
 818               	.L73:
 820               	.LM96:
 821               		out 56-32,r14
 822               	.L72:
 824               	.LM97:
 825               		sbis 48-32,2
 826               		rjmp .L73
 828 0246 CD01      	.LM98:
 829               		out 56-32,r21
 830               	.LBB152:
 831 0248 0197      	.LBB153:
 832 024a 01F4      	.LBB154:
 833               	.LBB155:
 835               	.Ltext21:
 837               	.LM99:
 838               		movw r24,r22
 839               	/* #APP */
 840               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 841               		1: sbiw r24,1
 842               		brne 1b
 843 024c 8299      	 ;  0 "" 2
 844 024e 00C0      	/* #NOAPP */
 845               		ldi r18,lo8(0)
 846               		ldi r19,hi8(0)
 847 0250 C29A      		rjmp .L74
 848 0252 00C0      	.L71:
 849               	.LBE155:
 850               	.LBE154:
 851               	.LBE153:
 852 0254 E8BA      	.LBE152:
 854               	.Ltext22:
 856 0256 829B      	.LM100:
 857 0258 00C0      		cbi 56-32,2
 858               	.L74:
 860 025a 58BB      	.LM101:
 861               		sbic 51-32,0
 862               		rjmp .L75
 864               	.LM102:
 865               		sbi 56-32,2
 866               		rjmp .L76
 867               	.L77:
 869 025c CB01      	.LM103:
 870               		out 56-32,r15
 871               	.L76:
 873 0260 01F4      	.LM104:
 874               		sbis 51-32,0
 875               		rjmp .L77
 877 0264 30E0      	.LM105:
 878 0266 00C0      		out 56-32,r21
 879               	.LBB156:
 880               	.LBB157:
 881               	.LBB158:
 882               	.LBB159:
 884               	.Ltext23:
 886               	.LM106:
 887               		movw r24,r22
 888 0268 C298      	/* #APP */
 889               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 890               		1: sbiw r24,1
 891               		brne 1b
 892 026a 9899      	 ;  0 "" 2
 893 026c 00C0      	/* #NOAPP */
 894               		ldi r18,lo8(0)
 895               		ldi r19,hi8(0)
 896 026e C29A      		rjmp .L78
 897 0270 00C0      	.L75:
 898               	.LBE159:
 899               	.LBE158:
 900               	.LBE157:
 901 0272 F8BA      	.LBE156:
 903               	.Ltext24:
 905 0274 989B      	.LM107:
 906 0276 00C0      		cbi 56-32,2
 907               	.L78:
 909 0278 58BB      	.LM108:
 910               		subi r20,lo8(-(1))
 911               		cpi r20,lo8(5)
 912               		breq .+2
 913               		rjmp .L79
 914               	.LBB160:
 915               	.LBB126:
 916               	.LBB125:
 917               	.LBB124:
 919               	.Ltext25:
 921 027c 0197      	.LM109:
 922 027e 01F4      		movw r24,r16
 923               	/* #APP */
 924               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 925 0280 20E0      		1: sbiw r24,1
 926 0282 30E0      		brne 1b
 927 0284 00C0      	 ;  0 "" 2
 928               	/* #NOAPP */
 929               	.LBE124:
 930               	.LBE125:
 931               	.LBE126:
 932               	.LBE160:
 934               	.Ltext26:
 936               	.LM110:
 937 0286 C298      		ldi r24,hi8(1000)
 938               		cpi r18,lo8(1000)
 939               		cpc r19,r24
 940               		breq .+2
 941 0288 4F5F      		rjmp .L89
 943 028c 01F0      	.LM111:
 944 028e 00C0      		out 56-32,r12
 945               		ldi r24,lo8(20000)
 946               		ldi r25,hi8(20000)
 947               	.L81:
 948               	.LBB161:
 949               	.LBB133:
 950               	.LBB132:
 951               	.LBB131:
 953 0290 C801      	.Ltext27:
 955               	.LM112:
 956 0292 0197      		movw r30,r28
 957 0294 01F4      	/* #APP */
 958               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 959               		1: sbiw r30,1
 960               		brne 1b
 961               	 ;  0 "" 2
 962               	/* #NOAPP */
 963               	.LBE131:
 964               	.LBE132:
 966               	.Ltext28:
 968 0296 83E0      	.LM113:
 969 0298 283E      		sbiw r24,1
 971 029c 01F0      	.LM114:
 972 029e 00C0      		brne .L81
 973               	.LBE133:
 974               	.LBE161:
 976 02a2 80E2      	.Ltext29:
 978               	.LM115:
 979               		out 56-32,r13
 980               		ldi r24,lo8(20000)
 981               		ldi r25,hi8(20000)
 982               	.L82:
 983               	.LBB162:
 984               	.LBB163:
 985               	.LBB164:
 986               	.LBB165:
 988               	.Ltext30:
 990 02a8 3197      	.LM116:
 991 02aa 01F4      		movw r30,r28
 992               	/* #APP */
 993               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 994               		1: sbiw r30,1
 995               		brne 1b
 996               	 ;  0 "" 2
 997               	/* #NOAPP */
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5 2007/10/28 23:25:56 joerg_wunsch Exp $ */
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** */
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /**
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    will not be informed about this case.
 106:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****  */
 107:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** void
 108:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** _delay_us(double __us)
 109:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** {
 110:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	uint8_t __ticks;
 111:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 112:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 113:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 114:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 255)
 115:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	{
 116:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 117:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		return;
 118:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	}
 119:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else
 120:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 121:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 122:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** }
 123:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 124:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 125:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /**
 126:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
 127:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 128:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 129:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 130:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 131:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 132:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 133:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 134:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 135:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 136:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 137:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 138:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 139:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 140:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****  */
 141:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** void
 142:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** {
 144:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 146:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 147:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 148:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 149:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	{
 150:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 151:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 152:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 153:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		{
 154:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 155:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 156:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 998               	8,0,156,.LM117-.LFBB3
 999               	.LM117:
 1000 02ac 0197      		sbiw r24,1
 1002               	.LM118:
 1003 02ae 01F4      		brne .L82
 1004               	.LBE163:
 1005               	.LBE162:
 1007               	.Ltext32:
 1009               	.LM119:
 1010 02b0 D8BA      		out 56-32,r21
 1011 02b2 80E2      		ldi r18,lo8(0)
 1012 02b4 9EE4      		ldi r19,hi8(0)
 1013               		rjmp .L89
 1036               	.Lscope3:
 1037               	.global	count
 1038 02be 01F4      	.global	count
 1039               		.section .bss
 1042               	count:
 255:motortest.c   **** 			_delay_ms(2000);
 256:motortest.c   **** 			PORTB=0x81;
 1043               	nt, @object
 1045 02c0 58BB      	count:
 1046 02c2 20E0      		.skip 2,0
 1047 02c4 30E0      	.global	fwdrestrict
 1048 02c6 00C0      	.global	fwdrestrict
 1051               	fwdrestrict:
 1052               		.skip 2,0
 1053               	.global	pathfound
 1054               	.global	pathfound
 1057               	pathfound:
 1058               		.skip 1,0
 1059               	.global	flag
 1060               	.global	flag
 1063               	flag:
 1064               		.skip 2,0
 1065               	.global	sendsig
 1066               	.global	sendsig
 1069               	sendsig:
 1070               		.skip 1,0
 1071               		.comm navflag,1,1
 1078 0000 0000      		.text
 1080               	.Letext0:
 1081               	...
DEFINED SYMBOLS
                            *ABS*:00000000 motortest.c
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:2      *ABS*:0000003f __SREG__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:3      *ABS*:0000003e __SP_H__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:4      *ABS*:0000003d __SP_L__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:5      *ABS*:00000034 __CCP__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:7      *ABS*:00000001 __zero_reg__
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:75     .text:00000000 speed
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:134    .text:00000034 direction_motor
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:1089   .bss:00000004 pathfound
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:1095   .bss:00000005 flag
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:517    .text:00000196 main
                            *COM*:00000001 navflag
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:1083   .bss:00000002 fwdrestrict
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:1077   .bss:00000000 count
C:\Users\user\AppData\Local\Temp/ccwg73RV.s:1101   .bss:00000007 sendsig

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
