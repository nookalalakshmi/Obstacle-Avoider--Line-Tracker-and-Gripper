
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003de  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800062  000003e0  00000454  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007f  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000212  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ac  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  000007b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00000c93  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  8a:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <remote_decoder>:
	
}


void remote_decoder(void)
{
  92:	89 b3       	in	r24, 0x19	; 25
  94:	80 95       	com	r24
  96:	81 70       	andi	r24, 0x01	; 1
  98:	80 93 6e 00 	sts	0x006E, r24
	d=bit_is_clear(PINA,0);
	if(irMode==0)
  9c:	80 91 6f 00 	lds	r24, 0x006F
  a0:	88 23       	and	r24, r24
  a2:	a1 f4       	brne	.+40     	; 0xcc <remote_decoder+0x3a>
	{
		if(d==1)
  a4:	80 91 6e 00 	lds	r24, 0x006E
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	11 f4       	brne	.+4      	; 0xb0 <remote_decoder+0x1e>
		{
			irMode=1;
  ac:	80 93 6f 00 	sts	0x006F, r24
		}
		if(c131>8)
  b0:	80 91 70 00 	lds	r24, 0x0070
  b4:	90 91 71 00 	lds	r25, 0x0071
  b8:	09 97       	sbiw	r24, 0x09	; 9
  ba:	0c f4       	brge	.+2      	; 0xbe <remote_decoder+0x2c>
  bc:	78 c0       	rjmp	.+240    	; 0x1ae <remote_decoder+0x11c>
		{
			cmd=64;
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 6b 00 	sts	0x006B, r25
  c6:	80 93 6a 00 	sts	0x006A, r24
  ca:	08 95       	ret
		}
		return;
	}
	if(irMode==1)
  cc:	80 91 6f 00 	lds	r24, 0x006F
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	39 f4       	brne	.+14     	; 0xe2 <remote_decoder+0x50>
	{
		if(d==0)
  d4:	80 91 6e 00 	lds	r24, 0x006E
  d8:	88 23       	and	r24, r24
  da:	09 f0       	breq	.+2      	; 0xde <remote_decoder+0x4c>
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <remote_decoder+0x11c>
		{
			irMode=2;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	2f c0       	rjmp	.+94     	; 0x140 <remote_decoder+0xae>
		}
		return;
	}
	if(irMode==2)
  e2:	80 91 6f 00 	lds	r24, 0x006F
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	79 f4       	brne	.+30     	; 0x108 <remote_decoder+0x76>
	{
		if(d==1)
  ea:	80 91 6e 00 	lds	r24, 0x006E
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	09 f0       	breq	.+2      	; 0xf4 <remote_decoder+0x62>
  f2:	5d c0       	rjmp	.+186    	; 0x1ae <remote_decoder+0x11c>
		{
			irMode=3;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 6f 00 	sts	0x006F, r24
			c3p5=0;
  fa:	10 92 73 00 	sts	0x0073, r1
  fe:	10 92 72 00 	sts	0x0072, r1
			irDt=0;
 102:	10 92 74 00 	sts	0x0074, r1
 106:	08 95       	ret
		}
		return;
		
	}
	if(irMode==3)
 108:	80 91 6f 00 	lds	r24, 0x006F
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	d9 f4       	brne	.+54     	; 0x146 <remote_decoder+0xb4>
	{
		if(c3p5>16)
 110:	80 91 72 00 	lds	r24, 0x0072
 114:	90 91 73 00 	lds	r25, 0x0073
 118:	41 97       	sbiw	r24, 0x11	; 17
 11a:	0c f4       	brge	.+2      	; 0x11e <remote_decoder+0x8c>
 11c:	48 c0       	rjmp	.+144    	; 0x1ae <remote_decoder+0x11c>
		{
			d_old=d;
 11e:	80 91 6e 00 	lds	r24, 0x006E
 122:	80 93 75 00 	sts	0x0075, r24
			irDt=irDt<<1;
 126:	80 91 74 00 	lds	r24, 0x0074
 12a:	88 0f       	add	r24, r24
 12c:	80 93 74 00 	sts	0x0074, r24
			irDt=irDt+d;
 130:	90 91 74 00 	lds	r25, 0x0074
 134:	80 91 6e 00 	lds	r24, 0x006E
 138:	89 0f       	add	r24, r25
 13a:	80 93 74 00 	sts	0x0074, r24
			irMode=4;
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 6f 00 	sts	0x006F, r24
 144:	08 95       	ret
		}
		return;
	}
	if(irMode==4)
 146:	80 91 6f 00 	lds	r24, 0x006F
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	81 f5       	brne	.+96     	; 0x1ae <remote_decoder+0x11c>
	{
		if(d_old!=d)
 14e:	90 91 75 00 	lds	r25, 0x0075
 152:	80 91 6e 00 	lds	r24, 0x006E
 156:	98 17       	cp	r25, r24
 158:	59 f0       	breq	.+22     	; 0x170 <remote_decoder+0xde>
		{
			d_old=d;
 15a:	80 91 6e 00 	lds	r24, 0x006E
 15e:	80 93 75 00 	sts	0x0075, r24
			irMode=3;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	80 93 6f 00 	sts	0x006F, r24
			c3p5=0;
 168:	10 92 73 00 	sts	0x0073, r1
 16c:	10 92 72 00 	sts	0x0072, r1
		}
		if(c3p5>49)
 170:	80 91 72 00 	lds	r24, 0x0072
 174:	90 91 73 00 	lds	r25, 0x0073
 178:	c2 97       	sbiw	r24, 0x32	; 50
 17a:	cc f0       	brlt	.+50     	; 0x1ae <remote_decoder+0x11c>
		{
			irMode=0;
 17c:	10 92 6f 00 	sts	0x006F, r1
			irDt=irDt>>1;
 180:	80 91 74 00 	lds	r24, 0x0074
 184:	86 95       	lsr	r24
 186:	80 93 74 00 	sts	0x0074, r24
			irDt=255-irDt;
 18a:	80 91 74 00 	lds	r24, 0x0074
 18e:	80 95       	com	r24
 190:	80 93 74 00 	sts	0x0074, r24
			cmd=irDt & 0x3f;
 194:	80 91 74 00 	lds	r24, 0x0074
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	8f 73       	andi	r24, 0x3F	; 63
 19c:	90 70       	andi	r25, 0x00	; 0
 19e:	90 93 6b 00 	sts	0x006B, r25
 1a2:	80 93 6a 00 	sts	0x006A, r24
			c131=0;
 1a6:	10 92 71 00 	sts	0x0071, r1
 1aa:	10 92 70 00 	sts	0x0070, r1
 1ae:	08 95       	ret

000001b0 <__vector_5>:
void path_detector(void);
void path_follower_motor(int detectline);


SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 72.463usec here
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	c3p5++;
 1d2:	80 91 72 00 	lds	r24, 0x0072
 1d6:	90 91 73 00 	lds	r25, 0x0073
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 73 00 	sts	0x0073, r25
 1e0:	80 93 72 00 	sts	0x0072, r24
	c131++;
 1e4:	80 91 70 00 	lds	r24, 0x0070
 1e8:	90 91 71 00 	lds	r25, 0x0071
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 71 00 	sts	0x0071, r25
 1f2:	80 93 70 00 	sts	0x0070, r24
	remote_decoder();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <remote_decoder>
	
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
 1fa:	8f eb       	ldi	r24, 0xBF	; 191
 1fc:	84 bd       	out	0x24, r24	; 36
	
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <command>:
		return;
	}
}

void command(void)
{
 220:	80 91 6a 00 	lds	r24, 0x006A
 224:	90 91 6b 00 	lds	r25, 0x006B
 228:	86 30       	cpi	r24, 0x06	; 6
 22a:	91 05       	cpc	r25, r1
 22c:	09 f4       	brne	.+2      	; 0x230 <command+0x10>
 22e:	5b c0       	rjmp	.+182    	; 0x2e6 <command+0xc6>
 230:	87 30       	cpi	r24, 0x07	; 7
 232:	91 05       	cpc	r25, r1
 234:	9c f4       	brge	.+38     	; 0x25c <command+0x3c>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 05       	cpc	r25, r1
 23a:	c1 f1       	breq	.+112    	; 0x2ac <command+0x8c>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	91 05       	cpc	r25, r1
 240:	34 f4       	brge	.+12     	; 0x24e <command+0x2e>
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	31 f1       	breq	.+76     	; 0x292 <command+0x72>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	09 f0       	breq	.+2      	; 0x24c <command+0x2c>
 24a:	8d c0       	rjmp	.+282    	; 0x366 <command+0x146>
 24c:	29 c0       	rjmp	.+82     	; 0x2a0 <command+0x80>
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	91 05       	cpc	r25, r1
 252:	c1 f1       	breq	.+112    	; 0x2c4 <command+0xa4>
 254:	05 97       	sbiw	r24, 0x05	; 5
 256:	0c f0       	brlt	.+2      	; 0x25a <command+0x3a>
 258:	3d c0       	rjmp	.+122    	; 0x2d4 <command+0xb4>
 25a:	2e c0       	rjmp	.+92     	; 0x2b8 <command+0x98>
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	91 05       	cpc	r25, r1
 260:	09 f4       	brne	.+2      	; 0x264 <command+0x44>
 262:	76 c0       	rjmp	.+236    	; 0x350 <command+0x130>
 264:	81 31       	cpi	r24, 0x11	; 17
 266:	91 05       	cpc	r25, r1
 268:	44 f4       	brge	.+16     	; 0x27a <command+0x5a>
 26a:	87 30       	cpi	r24, 0x07	; 7
 26c:	91 05       	cpc	r25, r1
 26e:	09 f4       	brne	.+2      	; 0x272 <command+0x52>
 270:	45 c0       	rjmp	.+138    	; 0x2fc <command+0xdc>
 272:	08 97       	sbiw	r24, 0x08	; 8
 274:	09 f0       	breq	.+2      	; 0x278 <command+0x58>
 276:	77 c0       	rjmp	.+238    	; 0x366 <command+0x146>
 278:	4f c0       	rjmp	.+158    	; 0x318 <command+0xf8>
 27a:	80 32       	cpi	r24, 0x20	; 32
 27c:	91 05       	cpc	r25, r1
 27e:	09 f4       	brne	.+2      	; 0x282 <command+0x62>
 280:	4f c0       	rjmp	.+158    	; 0x320 <command+0x100>
 282:	81 32       	cpi	r24, 0x21	; 33
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <command+0x6a>
 288:	57 c0       	rjmp	.+174    	; 0x338 <command+0x118>
 28a:	41 97       	sbiw	r24, 0x11	; 17
 28c:	09 f0       	breq	.+2      	; 0x290 <command+0x70>
 28e:	6b c0       	rjmp	.+214    	; 0x366 <command+0x146>
 290:	65 c0       	rjmp	.+202    	; 0x35c <command+0x13c>
switch (cmd)
		{
			case 0:
				direction=0x00;
 292:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 296:	10 92 6c 00 	sts	0x006C, r1
				speed=0;
 29a:	10 92 60 00 	sts	0x0060, r1
 29e:	08 95       	ret
				return;
			case 1:
				direction=0x00;
 2a0:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2a4:	10 92 6c 00 	sts	0x006C, r1
				speed=255;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	11 c0       	rjmp	.+34     	; 0x2ce <command+0xae>
				return;
			case 2:
				direction=0x00;
 2ac:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2b0:	10 92 6c 00 	sts	0x006C, r1
				speed=215;
 2b4:	87 ed       	ldi	r24, 0xD7	; 215
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <command+0xae>
				return;
			case 3:
				direction=0x00;
 2b8:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2bc:	10 92 6c 00 	sts	0x006C, r1
				speed=190;
 2c0:	8e eb       	ldi	r24, 0xBE	; 190
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <command+0xae>
				return;
			case 4:
				direction=0x00;
 2c4:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2c8:	10 92 6c 00 	sts	0x006C, r1
				speed=160;
 2cc:	80 ea       	ldi	r24, 0xA0	; 160
 2ce:	80 93 60 00 	sts	0x0060, r24
 2d2:	08 95       	ret
				return;
			case 5:
				direction=0x00;
 2d4:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2d8:	10 92 6c 00 	sts	0x006C, r1
				gripper=0;
 2dc:	10 92 68 00 	sts	0x0068, r1
 2e0:	10 92 67 00 	sts	0x0067, r1
 2e4:	08 95       	ret
				return;
			case 6:
				gripper=1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 68 00 	sts	0x0068, r25
 2ee:	80 93 67 00 	sts	0x0067, r24
				direction=0x00;
 2f2:	10 92 69 00 	sts	0x0069, r1
				pathfollower=0;
 2f6:	10 92 6c 00 	sts	0x006C, r1
 2fa:	08 95       	ret
				return;
			case 7:
				flag=0;
 2fc:	10 92 6d 00 	sts	0x006D, r1
				backflag=0;
 300:	10 92 66 00 	sts	0x0066, r1
 304:	10 92 65 00 	sts	0x0065, r1
				pathfollower=1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 6c 00 	sts	0x006C, r24
				speed=210;
 30e:	82 ed       	ldi	r24, 0xD2	; 210
 310:	80 93 60 00 	sts	0x0060, r24
				sbi(PORTC,4);
 314:	ac 9a       	sbi	0x15, 4	; 21
 316:	08 95       	ret
				return;
			case 8:
				pathfollower=0;
 318:	10 92 6c 00 	sts	0x006C, r1
				cbi(PORTC,4);
 31c:	ac 98       	cbi	0x15, 4	; 21
 31e:	08 95       	ret
				return;
			case 32:
				//direction_motor(1);
				pathfollower=0;
 320:	10 92 6c 00 	sts	0x006C, r1
				if(gripper==1)
 324:	80 91 67 00 	lds	r24, 0x0067
 328:	90 91 68 00 	lds	r25, 0x0068
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	11 f4       	brne	.+4      	; 0x334 <command+0x114>
				{
					direction=0x04;
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	11 c0       	rjmp	.+34     	; 0x356 <command+0x136>
				}
				else
				{
					direction=0x50;
 334:	80 e5       	ldi	r24, 0x50	; 80
 336:	0f c0       	rjmp	.+30     	; 0x356 <command+0x136>
				}
				return;
			case 33:
				//direction_motor(7);
				pathfollower=0;
 338:	10 92 6c 00 	sts	0x006C, r1
				if(gripper==1)
 33c:	80 91 67 00 	lds	r24, 0x0067
 340:	90 91 68 00 	lds	r25, 0x0068
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	11 f4       	brne	.+4      	; 0x34c <command+0x12c>
				{
					direction=0x08;
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	05 c0       	rjmp	.+10     	; 0x356 <command+0x136>
				}
				else
				{
					direction=0xA0;
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	03 c0       	rjmp	.+6      	; 0x356 <command+0x136>
				}
				return;
			case 16:
				//direction_motor(2);
				pathfollower=0;
 350:	10 92 6c 00 	sts	0x006C, r1
				direction=0x10;
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	80 93 69 00 	sts	0x0069, r24
 35a:	08 95       	ret
				return;
			case 17:
				//direction_motor(3);
				pathfollower=0;
 35c:	10 92 6c 00 	sts	0x006C, r1
				direction=0x40;
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	80 93 69 00 	sts	0x0069, r24
 366:	08 95       	ret

00000368 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
    
	char i=0;
	DDRA=0x01;						//SET DATA DIRECTION REGISTER
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFC;						//SET 1 for OUTPUT PORT
 370:	8c ef       	ldi	r24, 0xFC	; 252
 372:	84 bb       	out	0x14, r24	; 20
									//SET 0 FOR INPUT PORT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	TCCR2 = TMC8_CK8;               	
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	85 bd       	out	0x25, r24	; 37
	TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 378:	8f eb       	ldi	r24, 0xBF	; 191
 37a:	84 bd       	out	0x24, r24	; 36
    TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	89 bf       	out	0x39, r24	; 57
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 380:	cf ef       	ldi	r28, 0xFF	; 255
 382:	d0 e0       	ldi	r29, 0x00	; 0
                          	// enable interrupts
	
	
	for(;;)
	{	
		command();
 384:	0e 94 10 01 	call	0x220	; 0x220 <command>
		if(speed!=0)
 388:	80 91 60 00 	lds	r24, 0x0060
 38c:	88 23       	and	r24, r24
 38e:	f1 f0       	breq	.+60     	; 0x3cc <main+0x64>
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <main+0x30>
		{
			for(i=0;i<255-speed;i++)
			{
				PORTC=0x00;
 394:	15 ba       	out	0x15, r1	; 21
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	80 91 60 00 	lds	r24, 0x0060
 39c:	24 2f       	mov	r18, r20
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	be 01       	movw	r22, r28
 3a2:	68 1b       	sub	r22, r24
 3a4:	71 09       	sbc	r23, r1
 3a6:	26 17       	cp	r18, r22
 3a8:	37 07       	cpc	r19, r23
 3aa:	a4 f3       	brlt	.-24     	; 0x394 <main+0x2c>
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <main+0x50>
			{
				PORTC=0x00;
			}
			for(i=0;i<speed-4;i++)
			{
				PORTC=direction;
 3b0:	80 91 69 00 	lds	r24, 0x0069
 3b4:	85 bb       	out	0x15, r24	; 21
		{
			for(i=0;i<255-speed;i++)
			{
				PORTC=0x00;
			}
			for(i=0;i<speed-4;i++)
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	80 91 60 00 	lds	r24, 0x0060
 3bc:	24 2f       	mov	r18, r20
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	04 97       	sbiw	r24, 0x04	; 4
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	9c f3       	brlt	.-26     	; 0x3b0 <main+0x48>
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <main+0x6a>
				
			}
		}
		else
		{
			PORTC=direction;
 3cc:	80 91 69 00 	lds	r24, 0x0069
 3d0:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,2))
 3d2:	ca 99       	sbic	0x19, 2	; 25
 3d4:	d7 cf       	rjmp	.-82     	; 0x384 <main+0x1c>
			{
				PORTC=0x00;
 3d6:	15 ba       	out	0x15, r1	; 21
 3d8:	d5 cf       	rjmp	.-86     	; 0x384 <main+0x1c>

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
