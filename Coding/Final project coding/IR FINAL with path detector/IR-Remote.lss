
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004a8  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  000004aa  0000051e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000008b  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e0  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000147  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e5  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000189  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__bad_interrupt>
   4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
   6:	4c c0       	rjmp	.+152    	; 0xa0 <__bad_interrupt>
   8:	ff c0       	rjmp	.+510    	; 0x208 <__vector_4>
   a:	4a c0       	rjmp	.+148    	; 0xa0 <__bad_interrupt>
   c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
   e:	48 c0       	rjmp	.+144    	; 0xa0 <__bad_interrupt>
  10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
  12:	46 c0       	rjmp	.+140    	; 0xa0 <__bad_interrupt>
  14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
  16:	44 c0       	rjmp	.+136    	; 0xa0 <__bad_interrupt>
  18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
  1a:	42 c0       	rjmp	.+132    	; 0xa0 <__bad_interrupt>
  1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
  1e:	40 c0       	rjmp	.+128    	; 0xa0 <__bad_interrupt>
  20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
  22:	3e c0       	rjmp	.+124    	; 0xa0 <__bad_interrupt>
  24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
  26:	bf c1       	rjmp	.+894    	; 0x3a6 <command+0x16>
  28:	c5 c1       	rjmp	.+906    	; 0x3b4 <command+0x24>
  2a:	ca c1       	rjmp	.+916    	; 0x3c0 <command+0x30>
  2c:	cf c1       	rjmp	.+926    	; 0x3cc <command+0x3c>
  2e:	d4 c1       	rjmp	.+936    	; 0x3d8 <command+0x48>
  30:	00 c2       	rjmp	.+1024   	; 0x432 <command+0xa2>
  32:	ff c1       	rjmp	.+1022   	; 0x432 <command+0xa2>
  34:	d9 c1       	rjmp	.+946    	; 0x3e8 <command+0x58>
  36:	e6 c1       	rjmp	.+972    	; 0x404 <command+0x74>
  38:	fc c1       	rjmp	.+1016   	; 0x432 <command+0xa2>
  3a:	fb c1       	rjmp	.+1014   	; 0x432 <command+0xa2>
  3c:	fa c1       	rjmp	.+1012   	; 0x432 <command+0xa2>
  3e:	f9 c1       	rjmp	.+1010   	; 0x432 <command+0xa2>
  40:	f8 c1       	rjmp	.+1008   	; 0x432 <command+0xa2>
  42:	f7 c1       	rjmp	.+1006   	; 0x432 <command+0xa2>
  44:	f6 c1       	rjmp	.+1004   	; 0x432 <command+0xa2>
  46:	ea c1       	rjmp	.+980    	; 0x41c <command+0x8c>
  48:	ef c1       	rjmp	.+990    	; 0x428 <command+0x98>
  4a:	f3 c1       	rjmp	.+998    	; 0x432 <command+0xa2>
  4c:	f2 c1       	rjmp	.+996    	; 0x432 <command+0xa2>
  4e:	f1 c1       	rjmp	.+994    	; 0x432 <command+0xa2>
  50:	f0 c1       	rjmp	.+992    	; 0x432 <command+0xa2>
  52:	ef c1       	rjmp	.+990    	; 0x432 <command+0xa2>
  54:	ee c1       	rjmp	.+988    	; 0x432 <command+0xa2>
  56:	ed c1       	rjmp	.+986    	; 0x432 <command+0xa2>
  58:	ec c1       	rjmp	.+984    	; 0x432 <command+0xa2>
  5a:	eb c1       	rjmp	.+982    	; 0x432 <command+0xa2>
  5c:	ea c1       	rjmp	.+980    	; 0x432 <command+0xa2>
  5e:	e9 c1       	rjmp	.+978    	; 0x432 <command+0xa2>
  60:	e8 c1       	rjmp	.+976    	; 0x432 <command+0xa2>
  62:	e7 c1       	rjmp	.+974    	; 0x432 <command+0xa2>
  64:	e6 c1       	rjmp	.+972    	; 0x432 <command+0xa2>
  66:	d2 c1       	rjmp	.+932    	; 0x40c <command+0x7c>
  68:	d5 c1       	rjmp	.+938    	; 0x414 <command+0x84>

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e8 ea       	ldi	r30, 0xA8	; 168
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a2 36       	cpi	r26, 0x62	; 98
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a2 e6       	ldi	r26, 0x62	; 98
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a9 37       	cpi	r26, 0x79	; 121
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	cb d1       	rcall	.+918    	; 0x434 <main>
  9e:	02 c2       	rjmp	.+1028   	; 0x4a4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <path_follower_motor>:
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
	
}

void path_follower_motor(int detectline)
{
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	91 05       	cpc	r25, r1
  a6:	71 f0       	breq	.+28     	; 0xc4 <path_follower_motor+0x22>
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	91 05       	cpc	r25, r1
  ac:	1c f4       	brge	.+6      	; 0xb4 <path_follower_motor+0x12>
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	b9 f4       	brne	.+46     	; 0xe0 <path_follower_motor+0x3e>
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <path_follower_motor+0x1e>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	39 f0       	breq	.+14     	; 0xc8 <path_follower_motor+0x26>
  ba:	04 97       	sbiw	r24, 0x04	; 4
  bc:	89 f4       	brne	.+34     	; 0xe0 <path_follower_motor+0x3e>
  be:	0b c0       	rjmp	.+22     	; 0xd6 <path_follower_motor+0x34>
	//Set the direction and speed according to the line detected
	
	switch(detectline)
	{
		case 1:	//forward
				direction=0x81;
  c0:	81 e8       	ldi	r24, 0x81	; 129
  c2:	03 c0       	rjmp	.+6      	; 0xca <path_follower_motor+0x28>
				pathfound=1;
				return;
		case 2:	//right
				direction=0x41;
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	01 c0       	rjmp	.+2      	; 0xca <path_follower_motor+0x28>
				pathfound=1;
				return;
		case 3:	//left
				direction=0x82;
  c8:	82 e8       	ldi	r24, 0x82	; 130
  ca:	80 93 67 00 	sts	0x0067, r24
				pathfound=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 74 00 	sts	0x0074, r24
  d4:	08 95       	ret
				return;
		case 4:	//stop
				direction=0x00;
  d6:	10 92 67 00 	sts	0x0067, r1
				flag=1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 6b 00 	sts	0x006B, r24
  e0:	08 95       	ret

000000e2 <remote_decoder>:
	}
}


void remote_decoder(void)
{
  e2:	80 b3       	in	r24, 0x10	; 16
  e4:	82 95       	swap	r24
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	83 70       	andi	r24, 0x03	; 3
  ec:	80 95       	com	r24
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	80 93 6c 00 	sts	0x006C, r24
	d=bit_is_clear(PIND,6);
	if(irMode==0)
  f4:	80 91 6d 00 	lds	r24, 0x006D
  f8:	88 23       	and	r24, r24
  fa:	a1 f4       	brne	.+40     	; 0x124 <remote_decoder+0x42>
	{
		if(d==1)
  fc:	80 91 6c 00 	lds	r24, 0x006C
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	11 f4       	brne	.+4      	; 0x108 <remote_decoder+0x26>
		{
			irMode=1;
 104:	80 93 6d 00 	sts	0x006D, r24
		}
		if(c131>8)
 108:	80 91 6e 00 	lds	r24, 0x006E
 10c:	90 91 6f 00 	lds	r25, 0x006F
 110:	09 97       	sbiw	r24, 0x09	; 9
 112:	0c f4       	brge	.+2      	; 0x116 <remote_decoder+0x34>
 114:	78 c0       	rjmp	.+240    	; 0x206 <remote_decoder+0x124>
		{
			cmd=64;
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 69 00 	sts	0x0069, r25
 11e:	80 93 68 00 	sts	0x0068, r24
 122:	08 95       	ret
		}
		return;
	}
	if(irMode==1)
 124:	80 91 6d 00 	lds	r24, 0x006D
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	39 f4       	brne	.+14     	; 0x13a <remote_decoder+0x58>
	{
		if(d==0)
 12c:	80 91 6c 00 	lds	r24, 0x006C
 130:	88 23       	and	r24, r24
 132:	09 f0       	breq	.+2      	; 0x136 <remote_decoder+0x54>
 134:	68 c0       	rjmp	.+208    	; 0x206 <remote_decoder+0x124>
		{
			irMode=2;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	2f c0       	rjmp	.+94     	; 0x198 <remote_decoder+0xb6>
		}
		return;
	}
	if(irMode==2)
 13a:	80 91 6d 00 	lds	r24, 0x006D
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	79 f4       	brne	.+30     	; 0x160 <remote_decoder+0x7e>
	{
		if(d==1)
 142:	80 91 6c 00 	lds	r24, 0x006C
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <remote_decoder+0x6a>
 14a:	5d c0       	rjmp	.+186    	; 0x206 <remote_decoder+0x124>
		{
			irMode=3;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 6d 00 	sts	0x006D, r24
			c3p5=0;
 152:	10 92 71 00 	sts	0x0071, r1
 156:	10 92 70 00 	sts	0x0070, r1
			irDt=0;
 15a:	10 92 72 00 	sts	0x0072, r1
 15e:	08 95       	ret
		}
		return;
		
	}
	if(irMode==3)
 160:	80 91 6d 00 	lds	r24, 0x006D
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	d9 f4       	brne	.+54     	; 0x19e <remote_decoder+0xbc>
	{
		if(c3p5>16)
 168:	80 91 70 00 	lds	r24, 0x0070
 16c:	90 91 71 00 	lds	r25, 0x0071
 170:	41 97       	sbiw	r24, 0x11	; 17
 172:	0c f4       	brge	.+2      	; 0x176 <remote_decoder+0x94>
 174:	48 c0       	rjmp	.+144    	; 0x206 <remote_decoder+0x124>
		{
			d_old=d;
 176:	80 91 6c 00 	lds	r24, 0x006C
 17a:	80 93 73 00 	sts	0x0073, r24
			irDt=irDt<<1;
 17e:	80 91 72 00 	lds	r24, 0x0072
 182:	88 0f       	add	r24, r24
 184:	80 93 72 00 	sts	0x0072, r24
			irDt=irDt+d;
 188:	90 91 72 00 	lds	r25, 0x0072
 18c:	80 91 6c 00 	lds	r24, 0x006C
 190:	89 0f       	add	r24, r25
 192:	80 93 72 00 	sts	0x0072, r24
			irMode=4;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	80 93 6d 00 	sts	0x006D, r24
 19c:	08 95       	ret
		}
		return;
	}
	if(irMode==4)
 19e:	80 91 6d 00 	lds	r24, 0x006D
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	81 f5       	brne	.+96     	; 0x206 <remote_decoder+0x124>
	{
		if(d_old!=d)
 1a6:	90 91 73 00 	lds	r25, 0x0073
 1aa:	80 91 6c 00 	lds	r24, 0x006C
 1ae:	98 17       	cp	r25, r24
 1b0:	59 f0       	breq	.+22     	; 0x1c8 <remote_decoder+0xe6>
		{
			d_old=d;
 1b2:	80 91 6c 00 	lds	r24, 0x006C
 1b6:	80 93 73 00 	sts	0x0073, r24
			irMode=3;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	80 93 6d 00 	sts	0x006D, r24
			c3p5=0;
 1c0:	10 92 71 00 	sts	0x0071, r1
 1c4:	10 92 70 00 	sts	0x0070, r1
		}
		if(c3p5>49)
 1c8:	80 91 70 00 	lds	r24, 0x0070
 1cc:	90 91 71 00 	lds	r25, 0x0071
 1d0:	c2 97       	sbiw	r24, 0x32	; 50
 1d2:	cc f0       	brlt	.+50     	; 0x206 <remote_decoder+0x124>
		{
			irMode=0;
 1d4:	10 92 6d 00 	sts	0x006D, r1
			irDt=irDt>>1;
 1d8:	80 91 72 00 	lds	r24, 0x0072
 1dc:	86 95       	lsr	r24
 1de:	80 93 72 00 	sts	0x0072, r24
			irDt=255-irDt;
 1e2:	80 91 72 00 	lds	r24, 0x0072
 1e6:	80 95       	com	r24
 1e8:	80 93 72 00 	sts	0x0072, r24
			cmd=irDt & 0x3f;
 1ec:	80 91 72 00 	lds	r24, 0x0072
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	8f 73       	andi	r24, 0x3F	; 63
 1f4:	90 70       	andi	r25, 0x00	; 0
 1f6:	90 93 69 00 	sts	0x0069, r25
 1fa:	80 93 68 00 	sts	0x0068, r24
			c131=0;
 1fe:	10 92 6f 00 	sts	0x006F, r1
 202:	10 92 6e 00 	sts	0x006E, r1
 206:	08 95       	ret

00000208 <__vector_4>:
void path_detector(void);
void path_follower_motor(int detectline);


SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 72.463usec here
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	c3p5++;
 22a:	80 91 70 00 	lds	r24, 0x0070
 22e:	90 91 71 00 	lds	r25, 0x0071
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 71 00 	sts	0x0071, r25
 238:	80 93 70 00 	sts	0x0070, r24
	c131++;
 23c:	80 91 6e 00 	lds	r24, 0x006E
 240:	90 91 6f 00 	lds	r25, 0x006F
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 6f 00 	sts	0x006F, r25
 24a:	80 93 6e 00 	sts	0x006E, r24
	pathmode++;
 24e:	80 91 75 00 	lds	r24, 0x0075
 252:	90 91 76 00 	lds	r25, 0x0076
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 76 00 	sts	0x0076, r25
 25c:	80 93 75 00 	sts	0x0075, r24
    remote_decoder();
 260:	40 df       	rcall	.-384    	; 0xe2 <remote_decoder>
	if(pathmode==8 && pathfollower==1)
 262:	80 91 75 00 	lds	r24, 0x0075
 266:	90 91 76 00 	lds	r25, 0x0076
 26a:	08 97       	sbiw	r24, 0x08	; 8
 26c:	09 f0       	breq	.+2      	; 0x270 <__vector_4+0x68>
 26e:	6f c0       	rjmp	.+222    	; 0x34e <__vector_4+0x146>
 270:	80 91 6a 00 	lds	r24, 0x006A
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <__vector_4+0x72>
 278:	6a c0       	rjmp	.+212    	; 0x34e <__vector_4+0x146>
	{
		
		if(startcount==0)
 27a:	80 91 77 00 	lds	r24, 0x0077
 27e:	90 91 78 00 	lds	r25, 0x0078
 282:	89 2b       	or	r24, r25
 284:	91 f4       	brne	.+36     	; 0x2aa <__vector_4+0xa2>
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28a:	29 e1       	ldi	r18, 0x19	; 25
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <__vector_4+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 294:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	d9 f7       	brne	.-10     	; 0x28e <__vector_4+0x86>
		{
		_delay_ms(5000);					//During first time entering this mode delay is used
		startcount++;
 298:	80 91 77 00 	lds	r24, 0x0077
 29c:	90 91 78 00 	lds	r25, 0x0078
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 78 00 	sts	0x0078, r25
 2a6:	80 93 77 00 	sts	0x0077, r24
		}
		if(flag==0)
 2aa:	80 91 6b 00 	lds	r24, 0x006B
 2ae:	88 23       	and	r24, r24
 2b0:	01 f5       	brne	.+64     	; 0x2f2 <__vector_4+0xea>
		{	//PORTB=0x00;
			
			if((!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 2b2:	99 9b       	sbis	0x13, 1	; 19
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <__vector_4+0xb6>
 2b6:	9a 9b       	sbis	0x13, 2	; 19
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <__vector_4+0xb6>
				{
					direction=0x81;
 2ba:	81 e8       	ldi	r24, 0x81	; 129
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <__vector_4+0xc0>
					pathfound=1;
				}
				
			else if((bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 2be:	99 99       	sbic	0x13, 1	; 19
 2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <__vector_4+0xcc>
 2c2:	9a 9b       	sbis	0x13, 2	; 19
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <__vector_4+0xcc>
				{
					direction=0x41;
 2c6:	81 e4       	ldi	r24, 0x41	; 65
 2c8:	80 93 67 00 	sts	0x0067, r24
					pathfound=1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 74 00 	sts	0x0074, r24
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <__vector_4+0xea>
				}
				
			else if((!bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 2d4:	99 9b       	sbis	0x13, 1	; 19
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__vector_4+0xd8>
 2d8:	9a 99       	sbic	0x13, 2	; 19
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__vector_4+0xd8>
				{
					direction=0x82;
 2dc:	82 e8       	ldi	r24, 0x82	; 130
 2de:	f4 cf       	rjmp	.-24     	; 0x2c8 <__vector_4+0xc0>
					pathfound=1;
				}
				
			else if((bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 2e0:	99 99       	sbic	0x13, 1	; 19
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__vector_4+0xea>
 2e4:	9a 99       	sbic	0x13, 2	; 19
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <__vector_4+0xea>
				{
					direction=0x00;
 2e8:	10 92 67 00 	sts	0x0067, r1
					flag=1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 6b 00 	sts	0x006B, r24
				}
		}
		if(flag==1 && backflag==0 && pathfound==1)
 2f2:	80 91 6b 00 	lds	r24, 0x006B
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	31 f5       	brne	.+76     	; 0x346 <__vector_4+0x13e>
 2fa:	80 91 65 00 	lds	r24, 0x0065
 2fe:	90 91 66 00 	lds	r25, 0x0066
 302:	89 2b       	or	r24, r25
 304:	01 f5       	brne	.+64     	; 0x346 <__vector_4+0x13e>
 306:	80 91 74 00 	lds	r24, 0x0074
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	e1 f4       	brne	.+56     	; 0x346 <__vector_4+0x13e>
		{
			stopcount=0;
 30e:	10 92 64 00 	sts	0x0064, r1
 312:	10 92 63 00 	sts	0x0063, r1
			while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
			{
				sbi(PORTB,2);
				PORTB=0x42;		//Reverse
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	04 c0       	rjmp	.+8      	; 0x322 <__vector_4+0x11a>
		if(flag==1 && backflag==0 && pathfound==1)
		{
			stopcount=0;
			while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
			{
				sbi(PORTB,2);
 31a:	c2 9a       	sbi	0x18, 2	; 24
				PORTB=0x42;		//Reverse
 31c:	88 bb       	out	0x18, r24	; 24
				flag=0;
 31e:	10 92 6b 00 	sts	0x006B, r1
				}
		}
		if(flag==1 && backflag==0 && pathfound==1)
		{
			stopcount=0;
			while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
 322:	99 99       	sbic	0x13, 1	; 19
 324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_4+0x122>
 326:	9a 9b       	sbis	0x13, 2	; 19
 328:	f8 cf       	rjmp	.-16     	; 0x31a <__vector_4+0x112>
			{
				sbi(PORTB,2);
				PORTB=0x42;		//Reverse
				flag=0;
			}
			PORTB=0x00;
 32a:	18 ba       	out	0x18, r1	; 24
			cbi(PORTB,2);
 32c:	c2 98       	cbi	0x18, 2	; 24
			if(!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2))
 32e:	99 9b       	sbis	0x13, 1	; 19
 330:	0a c0       	rjmp	.+20     	; 0x346 <__vector_4+0x13e>
 332:	9a 9b       	sbis	0x13, 2	; 19
 334:	08 c0       	rjmp	.+16     	; 0x346 <__vector_4+0x13e>
			{
				backflag=1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	90 93 66 00 	sts	0x0066, r25
 33e:	80 93 65 00 	sts	0x0065, r24
				direction=0x00;
 342:	10 92 67 00 	sts	0x0067, r1
			}
		}
		pathmode=0;
 346:	10 92 76 00 	sts	0x0076, r1
 34a:	10 92 75 00 	sts	0x0075, r1
	}
	
	if(pathmode==8 && pathfollower==0)
 34e:	80 91 75 00 	lds	r24, 0x0075
 352:	90 91 76 00 	lds	r25, 0x0076
 356:	08 97       	sbiw	r24, 0x08	; 8
 358:	41 f4       	brne	.+16     	; 0x36a <__vector_4+0x162>
 35a:	80 91 6a 00 	lds	r24, 0x006A
 35e:	88 23       	and	r24, r24
 360:	21 f4       	brne	.+8      	; 0x36a <__vector_4+0x162>
	{
		pathmode=0;
 362:	10 92 76 00 	sts	0x0076, r1
 366:	10 92 75 00 	sts	0x0075, r1
	}
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
 36a:	8f eb       	ldi	r24, 0xBF	; 191
 36c:	84 bd       	out	0x24, r24	; 36
	
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <command>:
		return;
	}
}

void command(void)
{
 390:	e0 91 68 00 	lds	r30, 0x0068
 394:	f0 91 69 00 	lds	r31, 0x0069
 398:	e2 32       	cpi	r30, 0x22	; 34
 39a:	f1 05       	cpc	r31, r1
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <command+0x10>
 39e:	49 c0       	rjmp	.+146    	; 0x432 <command+0xa2>
 3a0:	ed 5e       	subi	r30, 0xED	; 237
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	09 94       	ijmp
switch (cmd)
		{
			case 0:
				direction=0x00;
 3a6:	10 92 67 00 	sts	0x0067, r1
				pathfollower=0;
 3aa:	10 92 6a 00 	sts	0x006A, r1
				speed=0;
 3ae:	10 92 60 00 	sts	0x0060, r1
 3b2:	08 95       	ret
				return;
			case 1:
				direction=0x00;
 3b4:	10 92 67 00 	sts	0x0067, r1
				pathfollower=0;
 3b8:	10 92 6a 00 	sts	0x006A, r1
				speed=255;
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	11 c0       	rjmp	.+34     	; 0x3e2 <command+0x52>
				return;
			case 2:
				direction=0x00;
 3c0:	10 92 67 00 	sts	0x0067, r1
				pathfollower=0;
 3c4:	10 92 6a 00 	sts	0x006A, r1
				speed=215;
 3c8:	87 ed       	ldi	r24, 0xD7	; 215
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <command+0x52>
				return;
			case 3:
				direction=0x00;
 3cc:	10 92 67 00 	sts	0x0067, r1
				pathfollower=0;
 3d0:	10 92 6a 00 	sts	0x006A, r1
				speed=190;
 3d4:	8e eb       	ldi	r24, 0xBE	; 190
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <command+0x52>
				return;
			case 4:
				direction=0x00;
 3d8:	10 92 67 00 	sts	0x0067, r1
				pathfollower=0;
 3dc:	10 92 6a 00 	sts	0x006A, r1
				speed=160;
 3e0:	80 ea       	ldi	r24, 0xA0	; 160
 3e2:	80 93 60 00 	sts	0x0060, r24
 3e6:	08 95       	ret
				return;
			case 7:
				flag=0;
 3e8:	10 92 6b 00 	sts	0x006B, r1
				backflag=0;
 3ec:	10 92 66 00 	sts	0x0066, r1
 3f0:	10 92 65 00 	sts	0x0065, r1
				pathfollower=1;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 6a 00 	sts	0x006A, r24
				speed=210;
 3fa:	82 ed       	ldi	r24, 0xD2	; 210
 3fc:	80 93 60 00 	sts	0x0060, r24
				sbi(PORTC,4);
 400:	ac 9a       	sbi	0x15, 4	; 21
 402:	08 95       	ret
				return;
			case 8:
				pathfollower=0;
 404:	10 92 6a 00 	sts	0x006A, r1
				cbi(PORTC,4);
 408:	ac 98       	cbi	0x15, 4	; 21
 40a:	08 95       	ret
				return;
			case 32:
				//direction_motor(1);
				pathfollower=0;
 40c:	10 92 6a 00 	sts	0x006A, r1
				direction=0x81;
 410:	81 e8       	ldi	r24, 0x81	; 129
 412:	07 c0       	rjmp	.+14     	; 0x422 <command+0x92>
				return;
			case 33:
				//direction_motor(7);
				pathfollower=0;
 414:	10 92 6a 00 	sts	0x006A, r1
				direction=0x42;
 418:	82 e4       	ldi	r24, 0x42	; 66
 41a:	03 c0       	rjmp	.+6      	; 0x422 <command+0x92>
				return;
			case 16:
				//direction_motor(2);
				pathfollower=0;
 41c:	10 92 6a 00 	sts	0x006A, r1
				direction=0x41;
 420:	81 e4       	ldi	r24, 0x41	; 65
 422:	80 93 67 00 	sts	0x0067, r24
 426:	08 95       	ret
				return;
			case 17:
				//direction_motor(3);
				pathfollower=0;
 428:	10 92 6a 00 	sts	0x006A, r1
				direction=0x82;
 42c:	82 e8       	ldi	r24, 0x82	; 130
 42e:	80 93 67 00 	sts	0x0067, r24
 432:	08 95       	ret

00000434 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
    
	char i=0;
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	81 bb       	out	0x11, r24	; 17
	DDRC=0x10;						//SET 1 for OUTPUT PORT
 43c:	80 e1       	ldi	r24, 0x10	; 16
 43e:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xC7;					//SET 0 FOR INPUT PORT
 440:	87 ec       	ldi	r24, 0xC7	; 199
 442:	87 bb       	out	0x17, r24	; 23
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	TCCR2 = TMC8_CK8;               	
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 448:	8f eb       	ldi	r24, 0xBF	; 191
 44a:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 44c:	80 e4       	ldi	r24, 0x40	; 64
 44e:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 450:	78 94       	sei
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 452:	cf ef       	ldi	r28, 0xFF	; 255
 454:	d0 e0       	ldi	r29, 0x00	; 0
    
    sei();                       	// enable interrupts
	
	for(;;)
	{	
		command();
 456:	9c df       	rcall	.-200    	; 0x390 <command>
		if(speed!=0)
 458:	80 91 60 00 	lds	r24, 0x0060
 45c:	88 23       	and	r24, r24
 45e:	f1 f0       	breq	.+60     	; 0x49c <__stack+0x3d>
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__stack+0x9>
		{
			for(i=0;i<255-speed;i++)
			{
				PORTB=0x00;
 464:	18 ba       	out	0x18, r1	; 24
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 466:	4f 5f       	subi	r20, 0xFF	; 255
 468:	80 91 60 00 	lds	r24, 0x0060
 46c:	24 2f       	mov	r18, r20
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	be 01       	movw	r22, r28
 472:	68 1b       	sub	r22, r24
 474:	71 09       	sbc	r23, r1
 476:	26 17       	cp	r18, r22
 478:	37 07       	cpc	r19, r23
 47a:	a4 f3       	brlt	.-24     	; 0x464 <__stack+0x5>
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__stack+0x29>
			{
				PORTB=0x00;
			}
			for(i=0;i<speed-4;i++)
			{
				PORTB=direction;
 480:	80 91 67 00 	lds	r24, 0x0067
 484:	88 bb       	out	0x18, r24	; 24
		{
			for(i=0;i<255-speed;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<speed-4;i++)
 486:	4f 5f       	subi	r20, 0xFF	; 255
 488:	80 91 60 00 	lds	r24, 0x0060
 48c:	24 2f       	mov	r18, r20
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	04 97       	sbiw	r24, 0x04	; 4
 494:	28 17       	cp	r18, r24
 496:	39 07       	cpc	r19, r25
 498:	9c f3       	brlt	.-26     	; 0x480 <__stack+0x21>
 49a:	dd cf       	rjmp	.-70     	; 0x456 <main+0x22>
				PORTB=direction;
			}
		}
		else
		{
			PORTB=direction;
 49c:	80 91 67 00 	lds	r24, 0x0067
 4a0:	88 bb       	out	0x18, r24	; 24
 4a2:	d9 cf       	rjmp	.-78     	; 0x456 <main+0x22>

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
