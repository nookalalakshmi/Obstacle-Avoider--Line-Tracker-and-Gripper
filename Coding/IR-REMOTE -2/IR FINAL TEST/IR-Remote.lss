
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000458  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00000458  000004cc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001eb  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011f  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000446  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f5  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e5       	ldi	r30, 0x58	; 88
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ee d1       	rcall	.+988    	; 0x436 <main>
  5a:	fc c1       	rjmp	.+1016   	; 0x454 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <detect_start>:

/*----------------------------------------------------------------
-----------------FUNCTIONS-------------------------------------
-----------------------------------------------------------------*/	
void detect_start(void)
{
  5e:	90 91 62 00 	lds	r25, 0x0062
  62:	20 91 63 00 	lds	r18, 0x0063
  66:	30 91 64 00 	lds	r19, 0x0064
			flag=0;
			break;
		}
		else
		{
			flag=1;
  6a:	41 e0       	ldi	r20, 0x01	; 1
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	1a c0       	rjmp	.+52     	; 0xa4 <detect_start+0x46>
-----------------------------------------------------------------*/	
void detect_start(void)
{
	while(m131<513)
	{
		TCNT0=0;
  70:	12 be       	out	0x32, r1	; 50
		while((PIND & 0x04));
  72:	82 99       	sbic	0x10, 2	; 16
  74:	fe cf       	rjmp	.-4      	; 0x72 <detect_start+0x14>
		m3p5=TCNT0;
  76:	92 b7       	in	r25, 0x32	; 50
		if(TCNT0>220)
  78:	82 b7       	in	r24, 0x32	; 50
  7a:	8d 3d       	cpi	r24, 0xDD	; 221
  7c:	10 f0       	brcs	.+4      	; 0x82 <detect_start+0x24>
		{
			m131++;
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if(m3p5>50)
  82:	93 33       	cpi	r25, 0x33	; 51
  84:	58 f0       	brcs	.+22     	; 0x9c <detect_start+0x3e>
  86:	90 93 62 00 	sts	0x0062, r25
  8a:	30 93 64 00 	sts	0x0064, r19
  8e:	20 93 63 00 	sts	0x0063, r18
		{
			flag=0;
  92:	10 92 6b 00 	sts	0x006B, r1
  96:	10 92 6a 00 	sts	0x006A, r1
  9a:	0e c0       	rjmp	.+28     	; 0xb8 <detect_start+0x5a>
			break;
		}
		else
		{
			flag=1;
  9c:	50 93 6b 00 	sts	0x006B, r21
  a0:	40 93 6a 00 	sts	0x006A, r20
/*----------------------------------------------------------------
-----------------FUNCTIONS-------------------------------------
-----------------------------------------------------------------*/	
void detect_start(void)
{
	while(m131<513)
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	21 30       	cpi	r18, 0x01	; 1
  a8:	38 07       	cpc	r19, r24
  aa:	14 f3       	brlt	.-60     	; 0x70 <detect_start+0x12>
  ac:	90 93 62 00 	sts	0x0062, r25
  b0:	30 93 64 00 	sts	0x0064, r19
  b4:	20 93 63 00 	sts	0x0063, r18
		else
		{
			flag=1;
		}
	}
	if(flag==0)
  b8:	80 91 6a 00 	lds	r24, 0x006A
  bc:	90 91 6b 00 	lds	r25, 0x006B
  c0:	89 2b       	or	r24, r25
  c2:	09 f0       	breq	.+2      	; 0xc6 <detect_start+0x68>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <detect_start+0x126>
	{
		TCNT0=0;
  c6:	12 be       	out	0x32, r1	; 50
		while(bit_is_clear(PIND,2));
  c8:	82 9b       	sbis	0x10, 2	; 16
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <detect_start+0x6a>
		u800=TCNT0;
  cc:	82 b7       	in	r24, 0x32	; 50
  ce:	80 93 65 00 	sts	0x0065, r24
		if(u800>=13 && u800<15)
  d2:	8d 50       	subi	r24, 0x0D	; 13
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	08 f0       	brcs	.+2      	; 0xda <detect_start+0x7c>
  d8:	4f c0       	rjmp	.+158    	; 0x178 <detect_start+0x11a>
		{
			TCNT0=0;
  da:	12 be       	out	0x32, r1	; 50
			while(!bit_is_clear(PIND,2));
  dc:	82 99       	sbic	0x10, 2	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <detect_start+0x7e>
			u800=TCNT0;
  e0:	82 b7       	in	r24, 0x32	; 50
  e2:	80 93 65 00 	sts	0x0065, r24
			if(u800>=13 && u800<15)
  e6:	8d 50       	subi	r24, 0x0D	; 13
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	08 f0       	brcs	.+2      	; 0xee <detect_start+0x90>
  ec:	4b c0       	rjmp	.+150    	; 0x184 <detect_start+0x126>
			{
				d_old=bit_is_clear(PIND,2);
  ee:	80 b3       	in	r24, 0x10	; 16
  f0:	48 2f       	mov	r20, r24
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	56 95       	lsr	r21
  f6:	47 95       	ror	r20
  f8:	56 95       	lsr	r21
  fa:	47 95       	ror	r20
  fc:	40 95       	com	r20
  fe:	50 95       	com	r21
 100:	41 70       	andi	r20, 0x01	; 1
 102:	50 70       	andi	r21, 0x00	; 0
 104:	50 93 67 00 	sts	0x0067, r21
 108:	40 93 66 00 	sts	0x0066, r20
				TCNT0=0;
 10c:	12 be       	out	0x32, r1	; 50
 10e:	20 91 68 00 	lds	r18, 0x0068
 112:	30 91 69 00 	lds	r19, 0x0069
				while(TCNT0<14)
				{
					d_new=bit_is_clear(PIND,2);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	22 c0       	rjmp	.+68     	; 0x160 <detect_start+0x102>
 11c:	80 b3       	in	r24, 0x10	; 16
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	36 95       	lsr	r19
 124:	27 95       	ror	r18
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	26 27       	eor	r18, r22
 12c:	37 27       	eor	r19, r23
 12e:	21 70       	andi	r18, 0x01	; 1
 130:	30 70       	andi	r19, 0x00	; 0
					if(d_old==d_new)
 132:	42 17       	cp	r20, r18
 134:	53 07       	cpc	r21, r19
 136:	29 f4       	brne	.+10     	; 0x142 <detect_start+0xe4>
					{
						flag=0;
 138:	10 92 6b 00 	sts	0x006B, r1
 13c:	10 92 6a 00 	sts	0x006A, r1
 140:	0f c0       	rjmp	.+30     	; 0x160 <detect_start+0x102>
						d_old=d_new;
						continue;
 142:	30 93 69 00 	sts	0x0069, r19
 146:	20 93 68 00 	sts	0x0068, r18
 14a:	50 93 67 00 	sts	0x0067, r21
 14e:	40 93 66 00 	sts	0x0066, r20
					}
					else
					{
						flag=1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 6b 00 	sts	0x006B, r25
 15a:	80 93 6a 00 	sts	0x006A, r24
 15e:	08 95       	ret
			u800=TCNT0;
			if(u800>=13 && u800<15)
			{
				d_old=bit_is_clear(PIND,2);
				TCNT0=0;
				while(TCNT0<14)
 160:	82 b7       	in	r24, 0x32	; 50
 162:	8e 30       	cpi	r24, 0x0E	; 14
 164:	d8 f2       	brcs	.-74     	; 0x11c <detect_start+0xbe>
 166:	30 93 69 00 	sts	0x0069, r19
 16a:	20 93 68 00 	sts	0x0068, r18
 16e:	50 93 67 00 	sts	0x0067, r21
 172:	40 93 66 00 	sts	0x0066, r20
 176:	08 95       	ret
			}
			
		}
		else
		{
			flag=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 6b 00 	sts	0x006B, r25
 180:	80 93 6a 00 	sts	0x006A, r24
 184:	08 95       	ret

00000186 <detect_control>:
		}
	}
}
void detect_control(void)
{
 186:	12 be       	out	0x32, r1	; 50
	
	
	TCNT0=0;
	
	while(TCNT0<21);	//to watch control bit
 188:	82 b7       	in	r24, 0x32	; 50
 18a:	85 31       	cpi	r24, 0x15	; 21
 18c:	e8 f3       	brcs	.-6      	; 0x188 <detect_control+0x2>
	if(bit_is_clear(PIND,2))
 18e:	82 99       	sbic	0x10, 2	; 16
 190:	02 c0       	rjmp	.+4      	; 0x196 <detect_control+0x10>
	{
		sbi(PORTD,6);
 192:	96 9a       	sbi	0x12, 6	; 18
 194:	08 95       	ret
	}
	else
	{
		cbi(PORTD,6);
 196:	96 98       	cbi	0x12, 6	; 18
 198:	08 95       	ret

0000019a <detect_address>:
	}
	*/

}
void detect_address(void)
{
 19a:	60 91 68 00 	lds	r22, 0x0068
 19e:	70 91 69 00 	lds	r23, 0x0069
 1a2:	40 91 66 00 	lds	r20, 0x0066
 1a6:	50 91 67 00 	lds	r21, 0x0067
 1aa:	e0 e0       	ldi	r30, 0x00	; 0
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
					}
				}
			}
			else
			{
				flag=1;
 1ae:	a1 e0       	ldi	r26, 0x01	; 1
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
void detect_address(void)
{
	int pulsecount=0;
	while(pulsecount<5)
	{
		TCNT0=0;
 1b2:	12 be       	out	0x32, r1	; 50
		if(bit_is_clear(PIND,2))
 1b4:	82 99       	sbic	0x10, 2	; 16
 1b6:	36 c0       	rjmp	.+108    	; 0x224 <detect_address+0x8a>
		{
			while(bit_is_clear(PIND,2));
 1b8:	82 9b       	sbis	0x10, 2	; 16
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <detect_address+0x1e>
			u800=TCNT0;
 1bc:	32 b7       	in	r19, 0x32	; 50
			if(u800>=13 && u800<15)
 1be:	83 2f       	mov	r24, r19
 1c0:	8d 50       	subi	r24, 0x0D	; 13
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <detect_address+0x2e>
 1c6:	6a c0       	rjmp	.+212    	; 0x29c <detect_address+0x102>
			{
				TCNT0=0;
 1c8:	12 be       	out	0x32, r1	; 50
				d_old=bit_is_clear(PIND,2);
 1ca:	80 b3       	in	r24, 0x10	; 16
 1cc:	48 2f       	mov	r20, r24
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	56 95       	lsr	r21
 1d2:	47 95       	ror	r20
 1d4:	56 95       	lsr	r21
 1d6:	47 95       	ror	r20
 1d8:	4a 27       	eor	r20, r26
 1da:	5b 27       	eor	r21, r27
 1dc:	41 70       	andi	r20, 0x01	; 1
 1de:	50 70       	andi	r21, 0x00	; 0
 1e0:	1d c0       	rjmp	.+58     	; 0x21c <detect_address+0x82>
				while(TCNT0<13)
				{	
					d_new=bit_is_clear(PIND,2);
 1e2:	80 b3       	in	r24, 0x10	; 16
 1e4:	68 2f       	mov	r22, r24
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	76 95       	lsr	r23
 1ea:	67 95       	ror	r22
 1ec:	76 95       	lsr	r23
 1ee:	67 95       	ror	r22
 1f0:	6a 27       	eor	r22, r26
 1f2:	7b 27       	eor	r23, r27
 1f4:	61 70       	andi	r22, 0x01	; 1
 1f6:	70 70       	andi	r23, 0x00	; 0
 1f8:	cf 01       	movw	r24, r30
 1fa:	01 96       	adiw	r24, 0x01	; 1
					if(d_old==d_new)
 1fc:	46 17       	cp	r20, r22
 1fe:	57 07       	cpc	r21, r23
 200:	09 f0       	breq	.+2      	; 0x204 <detect_address+0x6a>
 202:	40 c0       	rjmp	.+128    	; 0x284 <detect_address+0xea>
					{
						d_old=d_new;
						cbi(PORTC,pulsecount+1);
 204:	25 b3       	in	r18, 0x15	; 21
 206:	fc 01       	movw	r30, r24
 208:	cd 01       	movw	r24, r26
 20a:	0e 2e       	mov	r0, r30
 20c:	02 c0       	rjmp	.+4      	; 0x212 <detect_address+0x78>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <detect_address+0x74>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	85 bb       	out	0x15, r24	; 21
			u800=TCNT0;
			if(u800>=13 && u800<15)
			{
				TCNT0=0;
				d_old=bit_is_clear(PIND,2);
				while(TCNT0<13)
 21c:	82 b7       	in	r24, 0x32	; 50
 21e:	8d 30       	cpi	r24, 0x0D	; 13
 220:	00 f3       	brcs	.-64     	; 0x1e2 <detect_address+0x48>
 222:	40 c0       	rjmp	.+128    	; 0x2a4 <detect_address+0x10a>
				flag=1;
			}
		}
		else
		{
			while(!bit_is_clear(PIND,2));
 224:	82 99       	sbic	0x10, 2	; 16
 226:	fe cf       	rjmp	.-4      	; 0x224 <detect_address+0x8a>
			u800=TCNT0;
 228:	32 b7       	in	r19, 0x32	; 50
			if(u800>=13 && u800<15)
 22a:	83 2f       	mov	r24, r19
 22c:	8d 50       	subi	r24, 0x0D	; 13
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	a8 f5       	brcc	.+106    	; 0x29c <detect_address+0x102>
			{
				TCNT0=0;
 232:	12 be       	out	0x32, r1	; 50
				d_old=bit_is_clear(PIND,2);
 234:	80 b3       	in	r24, 0x10	; 16
 236:	48 2f       	mov	r20, r24
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	56 95       	lsr	r21
 23c:	47 95       	ror	r20
 23e:	56 95       	lsr	r21
 240:	47 95       	ror	r20
 242:	4a 27       	eor	r20, r26
 244:	5b 27       	eor	r21, r27
 246:	41 70       	andi	r20, 0x01	; 1
 248:	50 70       	andi	r21, 0x00	; 0
 24a:	24 c0       	rjmp	.+72     	; 0x294 <detect_address+0xfa>
				while(TCNT0<13)
				{	
					d_new=bit_is_clear(PIND,2);
 24c:	80 b3       	in	r24, 0x10	; 16
 24e:	68 2f       	mov	r22, r24
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	76 95       	lsr	r23
 254:	67 95       	ror	r22
 256:	76 95       	lsr	r23
 258:	67 95       	ror	r22
 25a:	6a 27       	eor	r22, r26
 25c:	7b 27       	eor	r23, r27
 25e:	61 70       	andi	r22, 0x01	; 1
 260:	70 70       	andi	r23, 0x00	; 0
 262:	cf 01       	movw	r24, r30
 264:	01 96       	adiw	r24, 0x01	; 1
					if(d_old==d_new)
 266:	46 17       	cp	r20, r22
 268:	57 07       	cpc	r21, r23
 26a:	61 f4       	brne	.+24     	; 0x284 <detect_address+0xea>
					{
						d_old=d_new;
						sbi(PORTC,pulsecount+1);
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	fc 01       	movw	r30, r24
 270:	cd 01       	movw	r24, r26
 272:	0e 2e       	mov	r0, r30
 274:	02 c0       	rjmp	.+4      	; 0x27a <detect_address+0xe0>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <detect_address+0xdc>
 27e:	28 2b       	or	r18, r24
 280:	25 bb       	out	0x15, r18	; 21
 282:	08 c0       	rjmp	.+16     	; 0x294 <detect_address+0xfa>
						pulsecount++;
					}
					else
					{
						pulsecount++;
 284:	fc 01       	movw	r30, r24
						flag=1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 6b 00 	sts	0x006B, r25
 28e:	80 93 6a 00 	sts	0x006A, r24
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <detect_address+0x10a>
			u800=TCNT0;
			if(u800>=13 && u800<15)
			{
				TCNT0=0;
				d_old=bit_is_clear(PIND,2);
				while(TCNT0<13)
 294:	82 b7       	in	r24, 0x32	; 50
 296:	8d 30       	cpi	r24, 0x0D	; 13
 298:	c8 f2       	brcs	.-78     	; 0x24c <detect_address+0xb2>
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <detect_address+0x10a>
					}
				}
			}
			else
			{
				flag=1;
 29c:	b0 93 6b 00 	sts	0x006B, r27
 2a0:	a0 93 6a 00 	sts	0x006A, r26

}
void detect_address(void)
{
	int pulsecount=0;
	while(pulsecount<5)
 2a4:	e5 30       	cpi	r30, 0x05	; 5
 2a6:	f1 05       	cpc	r31, r1
 2a8:	0c f4       	brge	.+2      	; 0x2ac <detect_address+0x112>
 2aa:	83 cf       	rjmp	.-250    	; 0x1b2 <detect_address+0x18>
 2ac:	70 93 69 00 	sts	0x0069, r23
 2b0:	60 93 68 00 	sts	0x0068, r22
 2b4:	50 93 67 00 	sts	0x0067, r21
 2b8:	40 93 66 00 	sts	0x0066, r20
 2bc:	30 93 65 00 	sts	0x0065, r19
			{
				flag=1;
			}
		}
	}
}
 2c0:	08 95       	ret

000002c2 <detect_data>:
void detect_data(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	PORTC=0x00;
 2c6:	15 ba       	out	0x15, r1	; 21
 2c8:	60 91 68 00 	lds	r22, 0x0068
 2cc:	70 91 69 00 	lds	r23, 0x0069
 2d0:	40 91 66 00 	lds	r20, 0x0066
 2d4:	50 91 67 00 	lds	r21, 0x0067
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b0 e0       	ldi	r27, 0x00	; 0
					}
				}
			}
			else
			{
				flag=1;
 2dc:	c1 e0       	ldi	r28, 0x01	; 1
 2de:	d0 e0       	ldi	r29, 0x00	; 0
{
	PORTC=0x00;
	int pulsecount=0;
	while(pulsecount<6)
	{
		TCNT0=0;
 2e0:	12 be       	out	0x32, r1	; 50
		if(bit_is_clear(PIND,2))
 2e2:	82 99       	sbic	0x10, 2	; 16
 2e4:	35 c0       	rjmp	.+106    	; 0x350 <detect_data+0x8e>
		{
			while(bit_is_clear(PIND,2));
 2e6:	82 9b       	sbis	0x10, 2	; 16
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <detect_data+0x24>
			u800=TCNT0;
 2ea:	32 b7       	in	r19, 0x32	; 50
			if(u800>=13 && u800<15)
 2ec:	83 2f       	mov	r24, r19
 2ee:	8d 50       	subi	r24, 0x0D	; 13
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <detect_data+0x34>
 2f4:	68 c0       	rjmp	.+208    	; 0x3c6 <detect_data+0x104>
			{
				TCNT0=0;
 2f6:	12 be       	out	0x32, r1	; 50
				d_old=bit_is_clear(PIND,2);
 2f8:	80 b3       	in	r24, 0x10	; 16
 2fa:	48 2f       	mov	r20, r24
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	56 95       	lsr	r21
 300:	47 95       	ror	r20
 302:	56 95       	lsr	r21
 304:	47 95       	ror	r20
 306:	4c 27       	eor	r20, r28
 308:	5d 27       	eor	r21, r29
 30a:	41 70       	andi	r20, 0x01	; 1
 30c:	50 70       	andi	r21, 0x00	; 0
 30e:	1c c0       	rjmp	.+56     	; 0x348 <detect_data+0x86>
				while(TCNT0<13)
				{	
					d_new=bit_is_clear(PIND,2);
 310:	80 b3       	in	r24, 0x10	; 16
 312:	68 2f       	mov	r22, r24
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	76 95       	lsr	r23
 318:	67 95       	ror	r22
 31a:	76 95       	lsr	r23
 31c:	67 95       	ror	r22
 31e:	6c 27       	eor	r22, r28
 320:	7d 27       	eor	r23, r29
 322:	61 70       	andi	r22, 0x01	; 1
 324:	70 70       	andi	r23, 0x00	; 0
 326:	fd 01       	movw	r30, r26
 328:	31 96       	adiw	r30, 0x01	; 1
					if(d_old==d_new)
 32a:	46 17       	cp	r20, r22
 32c:	57 07       	cpc	r21, r23
 32e:	09 f0       	breq	.+2      	; 0x332 <detect_data+0x70>
 330:	3e c0       	rjmp	.+124    	; 0x3ae <detect_data+0xec>
					{
						d_old=d_new;
						cbi(PORTC,pulsecount);
 332:	25 b3       	in	r18, 0x15	; 21
 334:	ce 01       	movw	r24, r28
 336:	02 c0       	rjmp	.+4      	; 0x33c <detect_data+0x7a>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	aa 95       	dec	r26
 33e:	e2 f7       	brpl	.-8      	; 0x338 <detect_data+0x76>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	85 bb       	out	0x15, r24	; 21
						pulsecount++;
 346:	df 01       	movw	r26, r30
			u800=TCNT0;
			if(u800>=13 && u800<15)
			{
				TCNT0=0;
				d_old=bit_is_clear(PIND,2);
				while(TCNT0<13)
 348:	82 b7       	in	r24, 0x32	; 50
 34a:	8d 30       	cpi	r24, 0x0D	; 13
 34c:	08 f3       	brcs	.-62     	; 0x310 <detect_data+0x4e>
 34e:	3f c0       	rjmp	.+126    	; 0x3ce <detect_data+0x10c>
				flag=1;
			}
		}
		else
		{
			while(!bit_is_clear(PIND,2));
 350:	82 99       	sbic	0x10, 2	; 16
 352:	fe cf       	rjmp	.-4      	; 0x350 <detect_data+0x8e>
			u800=TCNT0;
 354:	32 b7       	in	r19, 0x32	; 50
			if(u800>=13 && u800<15)
 356:	83 2f       	mov	r24, r19
 358:	8d 50       	subi	r24, 0x0D	; 13
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	a0 f5       	brcc	.+104    	; 0x3c6 <detect_data+0x104>
			{
				TCNT0=0;
 35e:	12 be       	out	0x32, r1	; 50
				d_old=bit_is_clear(PIND,2);
 360:	80 b3       	in	r24, 0x10	; 16
 362:	48 2f       	mov	r20, r24
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	56 95       	lsr	r21
 368:	47 95       	ror	r20
 36a:	56 95       	lsr	r21
 36c:	47 95       	ror	r20
 36e:	4c 27       	eor	r20, r28
 370:	5d 27       	eor	r21, r29
 372:	41 70       	andi	r20, 0x01	; 1
 374:	50 70       	andi	r21, 0x00	; 0
 376:	23 c0       	rjmp	.+70     	; 0x3be <detect_data+0xfc>
				while(TCNT0<13)
				{	
					d_new=bit_is_clear(PIND,2);
 378:	80 b3       	in	r24, 0x10	; 16
 37a:	68 2f       	mov	r22, r24
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	76 95       	lsr	r23
 380:	67 95       	ror	r22
 382:	76 95       	lsr	r23
 384:	67 95       	ror	r22
 386:	6c 27       	eor	r22, r28
 388:	7d 27       	eor	r23, r29
 38a:	61 70       	andi	r22, 0x01	; 1
 38c:	70 70       	andi	r23, 0x00	; 0
 38e:	fd 01       	movw	r30, r26
 390:	31 96       	adiw	r30, 0x01	; 1
					if(d_old==d_new)
 392:	46 17       	cp	r20, r22
 394:	57 07       	cpc	r21, r23
 396:	59 f4       	brne	.+22     	; 0x3ae <detect_data+0xec>
					{
						d_old=d_new;
						sbi(PORTC,pulsecount);
 398:	25 b3       	in	r18, 0x15	; 21
 39a:	ce 01       	movw	r24, r28
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <detect_data+0xe0>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	aa 95       	dec	r26
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <detect_data+0xdc>
 3a6:	28 2b       	or	r18, r24
 3a8:	25 bb       	out	0x15, r18	; 21
						pulsecount++;
 3aa:	df 01       	movw	r26, r30
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <detect_data+0xfc>
					}
					else
					{
						pulsecount++;
 3ae:	df 01       	movw	r26, r30
						flag=1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 6b 00 	sts	0x006B, r25
 3b8:	80 93 6a 00 	sts	0x006A, r24
 3bc:	08 c0       	rjmp	.+16     	; 0x3ce <detect_data+0x10c>
			u800=TCNT0;
			if(u800>=13 && u800<15)
			{
				TCNT0=0;
				d_old=bit_is_clear(PIND,2);
				while(TCNT0<13)
 3be:	82 b7       	in	r24, 0x32	; 50
 3c0:	8d 30       	cpi	r24, 0x0D	; 13
 3c2:	d0 f2       	brcs	.-76     	; 0x378 <detect_data+0xb6>
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <detect_data+0x10c>
					}
				}
			}
			else
			{
				flag=1;
 3c6:	d0 93 6b 00 	sts	0x006B, r29
 3ca:	c0 93 6a 00 	sts	0x006A, r28
}
void detect_data(void)
{
	PORTC=0x00;
	int pulsecount=0;
	while(pulsecount<6)
 3ce:	a6 30       	cpi	r26, 0x06	; 6
 3d0:	b1 05       	cpc	r27, r1
 3d2:	0c f4       	brge	.+2      	; 0x3d6 <detect_data+0x114>
 3d4:	85 cf       	rjmp	.-246    	; 0x2e0 <detect_data+0x1e>
 3d6:	70 93 69 00 	sts	0x0069, r23
 3da:	60 93 68 00 	sts	0x0068, r22
 3de:	50 93 67 00 	sts	0x0067, r21
 3e2:	40 93 66 00 	sts	0x0066, r20
 3e6:	30 93 65 00 	sts	0x0065, r19
			{
				flag=1;
			}
		}
	}
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <callIR>:

void callIR(void)
{
 3f0:	36 de       	rcall	.-916    	; 0x5e <detect_start>
	
	detect_start();
	
	
	if(flag==0)
 3f2:	80 91 6a 00 	lds	r24, 0x006A
 3f6:	90 91 6b 00 	lds	r25, 0x006B
 3fa:	89 2b       	or	r24, r25
 3fc:	a1 f4       	brne	.+40     	; 0x426 <callIR+0x36>
}
void detect_control(void)
{
	
	
	TCNT0=0;
 3fe:	12 be       	out	0x32, r1	; 50
	
	while(TCNT0<21);	//to watch control bit
 400:	82 b7       	in	r24, 0x32	; 50
 402:	85 31       	cpi	r24, 0x15	; 21
 404:	e8 f3       	brcs	.-6      	; 0x400 <callIR+0x10>
	if(bit_is_clear(PIND,2))
 406:	82 99       	sbic	0x10, 2	; 16
 408:	02 c0       	rjmp	.+4      	; 0x40e <callIR+0x1e>
	{
		sbi(PORTD,6);
 40a:	96 9a       	sbi	0x12, 6	; 18
 40c:	01 c0       	rjmp	.+2      	; 0x410 <callIR+0x20>
	}
	else
	{
		cbi(PORTD,6);
 40e:	96 98       	cbi	0x12, 6	; 18
	
	if(flag==0)
	{
		detect_control();
		
		if(flag==0)
 410:	80 91 6a 00 	lds	r24, 0x006A
 414:	90 91 6b 00 	lds	r25, 0x006B
 418:	89 2b       	or	r24, r25
 41a:	29 f4       	brne	.+10     	; 0x426 <callIR+0x36>
		{
			detect_address();
 41c:	be de       	rcall	.-644    	; 0x19a <detect_address>
			if(PORTC==0x00)
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <callIR+0x36>
			{
				detect_data();
 424:	4e df       	rcall	.-356    	; 0x2c2 <detect_data>
			}
			
		}
		
	}
	if(flag==1)
 426:	80 91 6a 00 	lds	r24, 0x006A
 42a:	90 91 6b 00 	lds	r25, 0x006B
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	09 f4       	brne	.+2      	; 0x434 <callIR+0x44>
	{
		sbi(PORTD,7);
 432:	97 9a       	sbi	0x12, 7	; 18
 434:	08 95       	ret

00000436 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	87 bb       	out	0x17, r24	; 23
	DDRB=0x04;
	DDRC=0x3f;
 43a:	8f e3       	ldi	r24, 0x3F	; 63
 43c:	84 bb       	out	0x14, r24	; 20
	DDRD=0xf0;
 43e:	80 ef       	ldi	r24, 0xF0	; 240
 440:	81 bb       	out	0x11, r24	; 17
	
	TCCR0=TMC8_CK8;
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	83 bf       	out	0x33, r24	; 51
	//TCCR2=TMC8_CK1024;
	//TCNT2=TIMER_2_CNT;
	//TIMSK=_BV(TOIE2);
	sei();
 446:	78 94       	sei
	
	for(;;)
	{
		if(bit_is_clear(PIND,2))
 448:	82 99       	sbic	0x10, 2	; 16
 44a:	02 c0       	rjmp	.+4      	; 0x450 <main+0x1a>
		{
			callIR();
 44c:	d1 df       	rcall	.-94     	; 0x3f0 <callIR>
 44e:	fc cf       	rjmp	.-8      	; 0x448 <main+0x12>
		}
		else
		{
			sbi(PORTD,7);
 450:	97 9a       	sbi	0x12, 7	; 18
 452:	fa cf       	rjmp	.-12     	; 0x448 <main+0x12>

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
