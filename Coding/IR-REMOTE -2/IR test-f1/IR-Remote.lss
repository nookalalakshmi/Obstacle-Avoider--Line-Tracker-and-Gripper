
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  000001ce  00000242  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000057  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000118  00000000  00000000  000002b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a3  00000000  00000000  000003d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000200  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c0  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a1 d0       	rcall	.+322    	; 0x19c <main>
  5a:	b6 c0       	rjmp	.+364    	; 0x1c8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_4>:
												// GIVES 8*1 = 8 CYCLES
												// AT 8MHZ FREQUENCY  = 0.125 microSECONDS/cycle


SIGNAL(SIG_OVERFLOW2)            	
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	
	bitdetector=bitdetector+1;
  6c:	80 91 62 00 	lds	r24, 0x0062
  70:	90 91 63 00 	lds	r25, 0x0063
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	90 93 63 00 	sts	0x0063, r25
  7a:	80 93 62 00 	sts	0x0062, r24
    TCNT2 = TIMER_2_CNT;         	
  7e:	8e ef       	ldi	r24, 0xFE	; 254
  80:	84 bd       	out	0x24, r24	; 36
	
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <detect_silence>:

//---------------------------------------------
void detect_silence(void)
{
  90:	12 be       	out	0x32, r1	; 50
	TCNT0  = 0;
	silence=0;
  92:	10 92 65 00 	sts	0x0065, r1
  96:	10 92 64 00 	sts	0x0064, r1
	startdetector=0;
  9a:	10 92 67 00 	sts	0x0067, r1
  9e:	10 92 66 00 	sts	0x0066, r1
	
	
	for(;;)
	{
		
		if(bit_is_clear(PIND,2))
  a2:	82 99       	sbic	0x10, 2	; 16
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <detect_silence+0x24>
		{
			silence=TCNT0;
  a6:	82 b7       	in	r24, 0x32	; 50
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 65 00 	sts	0x0065, r25
  ae:	80 93 64 00 	sts	0x0064, r24
  b2:	04 c0       	rjmp	.+8      	; 0xbc <detect_silence+0x2c>
			
		}
		else
		{
			silence=0;
  b4:	10 92 65 00 	sts	0x0065, r1
  b8:	10 92 64 00 	sts	0x0064, r1
		}
		startdetector=TCNT0;
  bc:	82 b7       	in	r24, 0x32	; 50
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 67 00 	sts	0x0067, r25
  c4:	80 93 66 00 	sts	0x0066, r24
		if(silence>=6)
  c8:	80 91 64 00 	lds	r24, 0x0064
  cc:	90 91 65 00 	lds	r25, 0x0065
  d0:	06 97       	sbiw	r24, 0x06	; 6
  d2:	1c f0       	brlt	.+6      	; 0xda <detect_silence+0x4a>
		{
			flag=0;
  d4:	10 92 60 00 	sts	0x0060, r1
  d8:	0a c0       	rjmp	.+20     	; 0xee <detect_silence+0x5e>
			break;
		}
		if(startdetector>246)
  da:	80 91 66 00 	lds	r24, 0x0066
  de:	90 91 67 00 	lds	r25, 0x0067
  e2:	87 3f       	cpi	r24, 0xF7	; 247
  e4:	91 05       	cpc	r25, r1
  e6:	ec f2       	brlt	.-70     	; 0xa2 <detect_silence+0x12>
		{
			flag=1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 60 00 	sts	0x0060, r24
			break;
		}
	}
	if(flag==1 || flag==2)
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d0 f0       	brcs	.+52     	; 0x12c <detect_silence+0x9c>
		return;
	//while(bit_is_clear(PIND,2));
	startdetector=0;
  f8:	10 92 67 00 	sts	0x0067, r1
  fc:	10 92 66 00 	sts	0x0066, r1
	for(;;)
	{
		TCNT0  = 0;
 100:	12 be       	out	0x32, r1	; 50
		if(!bit_is_clear(PIND,2))
 102:	82 9b       	sbis	0x10, 2	; 16
 104:	03 c0       	rjmp	.+6      	; 0x10c <detect_silence+0x7c>
		{
			flag=0;
 106:	10 92 60 00 	sts	0x0060, r1
 10a:	08 95       	ret
			break;
		}
		startdetector=TCNT0;
 10c:	82 b7       	in	r24, 0x32	; 50
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 67 00 	sts	0x0067, r25
 114:	80 93 66 00 	sts	0x0066, r24
		if(startdetector>246)
 118:	80 91 66 00 	lds	r24, 0x0066
 11c:	90 91 67 00 	lds	r25, 0x0067
 120:	87 3f       	cpi	r24, 0xF7	; 247
 122:	91 05       	cpc	r25, r1
 124:	6c f3       	brlt	.-38     	; 0x100 <detect_silence+0x70>
		{
			flag=1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 60 00 	sts	0x0060, r24
 12c:	08 95       	ret

0000012e <detect_start>:
		}
	}
	
}
void detect_start(void)
{
 12e:	8e ef       	ldi	r24, 0xFE	; 254
 130:	84 bd       	out	0x24, r24	; 36
	int i=0;
	
	TCNT2  = TIMER_2_CNT;
	bitdetector=0;
 132:	10 92 63 00 	sts	0x0063, r1
 136:	10 92 62 00 	sts	0x0062, r1
		while(bitdetector>165);
 13a:	80 91 62 00 	lds	r24, 0x0062
 13e:	90 91 63 00 	lds	r25, 0x0063
 142:	86 3a       	cpi	r24, 0xA6	; 166
 144:	91 05       	cpc	r25, r1
 146:	cc f7       	brge	.-14     	; 0x13a <detect_start+0xc>
	
		if(!bit_is_clear(PIND,2))
 148:	82 9b       	sbis	0x10, 2	; 16
 14a:	03 c0       	rjmp	.+6      	; 0x152 <detect_start+0x24>
		{
			flag=0;
 14c:	10 92 60 00 	sts	0x0060, r1
 150:	03 c0       	rjmp	.+6      	; 0x158 <detect_start+0x2a>
		}
		else
		{
			flag=1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 60 00 	sts	0x0060, r24
		}
		if(flag==1)
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	e9 f0       	breq	.+58     	; 0x19a <detect_start+0x6c>
			return;
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
		
		for(i=0;i<9;i++)
		{
			TCNT2  = TIMER_2_CNT;
 164:	4e ef       	ldi	r20, 0xFE	; 254
 166:	44 bd       	out	0x24, r20	; 36
			bitdetector=0;
 168:	10 92 63 00 	sts	0x0063, r1
 16c:	10 92 62 00 	sts	0x0062, r1
			while(bitdetector>=225);
 170:	80 91 62 00 	lds	r24, 0x0062
 174:	90 91 63 00 	lds	r25, 0x0063
 178:	81 3e       	cpi	r24, 0xE1	; 225
 17a:	91 05       	cpc	r25, r1
 17c:	cc f7       	brge	.-14     	; 0x170 <detect_start+0x42>
			flag=1;
		}
		if(flag==1)
			return;
		
		for(i=0;i<9;i++)
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	29 30       	cpi	r18, 0x09	; 9
 184:	31 05       	cpc	r19, r1
 186:	79 f7       	brne	.-34     	; 0x166 <detect_start+0x38>
		{
			TCNT2  = TIMER_2_CNT;
			bitdetector=0;
			while(bitdetector>=225);
		}
		bitdetector=0;
 188:	10 92 63 00 	sts	0x0063, r1
 18c:	10 92 62 00 	sts	0x0062, r1
		if(bit_is_clear(PIND,2))
 190:	82 99       	sbic	0x10, 2	; 16
 192:	02 c0       	rjmp	.+4      	; 0x198 <detect_start+0x6a>
		{
			cbi(PORTB,2);
 194:	c2 98       	cbi	0x18, 2	; 24
 196:	08 95       	ret
		}
		else
		{
			sbi(PORTB,2);
 198:	c2 9a       	sbi	0x18, 2	; 24
 19a:	08 95       	ret

0000019c <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 19c:	11 ba       	out	0x11, r1	; 17
   	
	DDRD=0x00;
	DDRC=0xFF;				//Set Port C as output port all bits.
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	84 bb       	out	0x14, r24	; 20
	DDRB=0x04;
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	87 bb       	out	0x17, r24	; 23
	TCCR0 = TMC08_CK64;               	
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        	// reset TCNT0
 1aa:	9e ef       	ldi	r25, 0xFE	; 254
 1ac:	92 bf       	out	0x32, r25	; 50
	TCCR2 =TMC28_CK8;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;
 1b2:	94 bd       	out	0x24, r25	; 36
	TIMSK=(_BV(TOIE2));
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	89 bf       	out	0x39, r24	; 57
    sei();                       	// enable interrupts
 1b8:	78 94       	sei
	
	for(;;)
	{
		detect_silence();
 1ba:	6a df       	rcall	.-300    	; 0x90 <detect_silence>
	
		if(flag==0)
 1bc:	80 91 60 00 	lds	r24, 0x0060
 1c0:	88 23       	and	r24, r24
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <main+0x1e>
		{
			detect_start();
 1c4:	b4 df       	rcall	.-152    	; 0x12e <detect_start>
 1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <main+0x1e>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
