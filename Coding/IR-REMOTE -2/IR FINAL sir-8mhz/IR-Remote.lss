
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000340  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800062  00000342  000003b6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009b  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000024f  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fb  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  000007bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000145  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	0a c1       	rjmp	.+532    	; 0x21e <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e4       	ldi	r30, 0x40	; 64
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 37       	cpi	r26, 0x75	; 117
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	57 d1       	rcall	.+686    	; 0x308 <main>
  5a:	70 c1       	rjmp	.+736    	; 0x33c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <speed_implement>:
	
}


void speed_implement(char direction,char value)
{
  5e:	38 2f       	mov	r19, r24
	//This function will take value as speed and direction and will implement accordingly
	char i=0;
	
	while(TCNT2< 250)
	{
		for(i=0;i<255-value;i++)
  60:	4f ef       	ldi	r20, 0xFF	; 255
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	46 1b       	sub	r20, r22
  66:	51 09       	sbc	r21, r1
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed_implement+0x26>
		{
			PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
	//This function will take value as speed and direction and will implement accordingly
	char i=0;
	
	while(TCNT2< 250)
	{
		for(i=0;i<255-value;i++)
  6c:	2f 5f       	subi	r18, 0xFF	; 255
  6e:	82 2f       	mov	r24, r18
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	84 17       	cp	r24, r20
  74:	95 07       	cpc	r25, r21
  76:	cc f3       	brlt	.-14     	; 0x6a <speed_implement+0xc>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <speed_implement+0x22>
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  7c:	38 bb       	out	0x18, r19	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  7e:	8f 5f       	subi	r24, 0xFF	; 255
  80:	86 17       	cp	r24, r22
  82:	e0 f3       	brcs	.-8      	; 0x7c <speed_implement+0x1e>
void speed_implement(char direction,char value)
{
	//This function will take value as speed and direction and will implement accordingly
	char i=0;
	
	while(TCNT2< 250)
  84:	84 b5       	in	r24, 0x24	; 36
  86:	8a 3f       	cpi	r24, 0xFA	; 250
  88:	10 f4       	brcc	.+4      	; 0x8e <speed_implement+0x30>
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	f0 cf       	rjmp	.-32     	; 0x6e <speed_implement+0x10>
  8e:	08 95       	ret

00000090 <direction_motor>:
}



void direction_motor(int detectline)
{
  90:	84 30       	cpi	r24, 0x04	; 4
  92:	91 05       	cpc	r25, r1
  94:	21 f1       	breq	.+72     	; 0xde <direction_motor+0x4e>
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	91 05       	cpc	r25, r1
  9a:	4c f4       	brge	.+18     	; 0xae <direction_motor+0x1e>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	a1 f0       	breq	.+40     	; 0xca <direction_motor+0x3a>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	91 05       	cpc	r25, r1
  a6:	b4 f4       	brge	.+44     	; 0xd4 <direction_motor+0x44>
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	29 f5       	brne	.+74     	; 0xf6 <direction_motor+0x66>
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <direction_motor+0x30>
  ae:	86 30       	cpi	r24, 0x06	; 6
  b0:	91 05       	cpc	r25, r1
  b2:	e1 f0       	breq	.+56     	; 0xec <direction_motor+0x5c>
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	91 05       	cpc	r25, r1
  b8:	bc f0       	brlt	.+46     	; 0xe8 <direction_motor+0x58>
  ba:	07 97       	sbiw	r24, 0x07	; 7
  bc:	e1 f4       	brne	.+56     	; 0xf6 <direction_motor+0x66>
  be:	19 c0       	rjmp	.+50     	; 0xf2 <direction_motor+0x62>
	char direction;
	switch(detectline)
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 73 00 	sts	0x0073, r24
				PORTB=direction;
  c6:	81 e8       	ldi	r24, 0x81	; 129
  c8:	12 c0       	rjmp	.+36     	; 0xee <direction_motor+0x5e>
				//speed_implement(direction,speed);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 73 00 	sts	0x0073, r24
				PORTB=direction;
  d0:	81 e4       	ldi	r24, 0x41	; 65
  d2:	0d c0       	rjmp	.+26     	; 0xee <direction_motor+0x5e>
				//speed_implement(direction,speed);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 73 00 	sts	0x0073, r24
				PORTB=direction;
  da:	82 e8       	ldi	r24, 0x82	; 130
  dc:	08 c0       	rjmp	.+16     	; 0xee <direction_motor+0x5e>
				//speed_implement(direction,speed);
				return;
		case 4:	//stop
				direction=0x00;
				flag=1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 74 00 	sts	0x0074, r24
				PORTB=direction;
  e4:	18 ba       	out	0x18, r1	; 24
  e6:	08 95       	ret
				//speed_implement(direction,speed);
				return;
		case 5: //left from center
				direction=0x02;
				PORTB=direction;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	01 c0       	rjmp	.+2      	; 0xee <direction_motor+0x5e>
				//speed_implement(direction,speed);
				return;
		
		case 6:	//right from center
				direction=0x40;
				PORTB=direction;
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	08 95       	ret
				//speed_implement(direction,speed);
				return;
		
		case 7:	//reverse
				direction=0x42;
				PORTB=direction;
  f2:	82 e4       	ldi	r24, 0x42	; 66
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret

000000f8 <remote_decoder>:
				return;
	}
}

void remote_decoder(void)
{
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	82 95       	swap	r24
  fc:	86 95       	lsr	r24
  fe:	86 95       	lsr	r24
 100:	83 70       	andi	r24, 0x03	; 3
 102:	80 95       	com	r24
 104:	81 70       	andi	r24, 0x01	; 1
 106:	80 93 6b 00 	sts	0x006B, r24
	d=bit_is_clear(PIND,6);
	if(irMode==0)
 10a:	80 91 6c 00 	lds	r24, 0x006C
 10e:	88 23       	and	r24, r24
 110:	a1 f4       	brne	.+40     	; 0x13a <remote_decoder+0x42>
	{
		if(d==1)
 112:	80 91 6b 00 	lds	r24, 0x006B
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	11 f4       	brne	.+4      	; 0x11e <remote_decoder+0x26>
		{
			irMode=1;
 11a:	80 93 6c 00 	sts	0x006C, r24
		}
		if(c131>8)
 11e:	80 91 6d 00 	lds	r24, 0x006D
 122:	90 91 6e 00 	lds	r25, 0x006E
 126:	09 97       	sbiw	r24, 0x09	; 9
 128:	0c f4       	brge	.+2      	; 0x12c <remote_decoder+0x34>
 12a:	78 c0       	rjmp	.+240    	; 0x21c <remote_decoder+0x124>
		{
			cmd=64;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 68 00 	sts	0x0068, r25
 134:	80 93 67 00 	sts	0x0067, r24
 138:	08 95       	ret
		}
		return;
	}
	if(irMode==1)
 13a:	80 91 6c 00 	lds	r24, 0x006C
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	39 f4       	brne	.+14     	; 0x150 <remote_decoder+0x58>
	{
		if(d==0)
 142:	80 91 6b 00 	lds	r24, 0x006B
 146:	88 23       	and	r24, r24
 148:	09 f0       	breq	.+2      	; 0x14c <remote_decoder+0x54>
 14a:	68 c0       	rjmp	.+208    	; 0x21c <remote_decoder+0x124>
		{
			irMode=2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	2f c0       	rjmp	.+94     	; 0x1ae <remote_decoder+0xb6>
		}
		return;
	}
	if(irMode==2)
 150:	80 91 6c 00 	lds	r24, 0x006C
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	79 f4       	brne	.+30     	; 0x176 <remote_decoder+0x7e>
	{
		if(d==1)
 158:	80 91 6b 00 	lds	r24, 0x006B
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	09 f0       	breq	.+2      	; 0x162 <remote_decoder+0x6a>
 160:	5d c0       	rjmp	.+186    	; 0x21c <remote_decoder+0x124>
		{
			irMode=3;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	80 93 6c 00 	sts	0x006C, r24
			c3p5=0;
 168:	10 92 70 00 	sts	0x0070, r1
 16c:	10 92 6f 00 	sts	0x006F, r1
			irDt=0;
 170:	10 92 71 00 	sts	0x0071, r1
 174:	08 95       	ret
		}
		return;
		
	}
	if(irMode==3)
 176:	80 91 6c 00 	lds	r24, 0x006C
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	d9 f4       	brne	.+54     	; 0x1b4 <remote_decoder+0xbc>
	{
		if(c3p5>16)
 17e:	80 91 6f 00 	lds	r24, 0x006F
 182:	90 91 70 00 	lds	r25, 0x0070
 186:	41 97       	sbiw	r24, 0x11	; 17
 188:	0c f4       	brge	.+2      	; 0x18c <remote_decoder+0x94>
 18a:	48 c0       	rjmp	.+144    	; 0x21c <remote_decoder+0x124>
		{
			d_old=d;
 18c:	80 91 6b 00 	lds	r24, 0x006B
 190:	80 93 72 00 	sts	0x0072, r24
			irDt=irDt<<1;
 194:	80 91 71 00 	lds	r24, 0x0071
 198:	88 0f       	add	r24, r24
 19a:	80 93 71 00 	sts	0x0071, r24
			irDt=irDt+d;
 19e:	90 91 71 00 	lds	r25, 0x0071
 1a2:	80 91 6b 00 	lds	r24, 0x006B
 1a6:	89 0f       	add	r24, r25
 1a8:	80 93 71 00 	sts	0x0071, r24
			irMode=4;
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	80 93 6c 00 	sts	0x006C, r24
 1b2:	08 95       	ret
		}
		return;
	}
	if(irMode==4)
 1b4:	80 91 6c 00 	lds	r24, 0x006C
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	81 f5       	brne	.+96     	; 0x21c <remote_decoder+0x124>
	{
		if(d_old!=d)
 1bc:	90 91 72 00 	lds	r25, 0x0072
 1c0:	80 91 6b 00 	lds	r24, 0x006B
 1c4:	98 17       	cp	r25, r24
 1c6:	59 f0       	breq	.+22     	; 0x1de <remote_decoder+0xe6>
		{
			d_old=d;
 1c8:	80 91 6b 00 	lds	r24, 0x006B
 1cc:	80 93 72 00 	sts	0x0072, r24
			irMode=3;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	80 93 6c 00 	sts	0x006C, r24
			c3p5=0;
 1d6:	10 92 70 00 	sts	0x0070, r1
 1da:	10 92 6f 00 	sts	0x006F, r1
		}
		if(c3p5>49)
 1de:	80 91 6f 00 	lds	r24, 0x006F
 1e2:	90 91 70 00 	lds	r25, 0x0070
 1e6:	c2 97       	sbiw	r24, 0x32	; 50
 1e8:	cc f0       	brlt	.+50     	; 0x21c <remote_decoder+0x124>
		{
			irMode=0;
 1ea:	10 92 6c 00 	sts	0x006C, r1
			irDt=irDt>>1;
 1ee:	80 91 71 00 	lds	r24, 0x0071
 1f2:	86 95       	lsr	r24
 1f4:	80 93 71 00 	sts	0x0071, r24
			irDt=255-irDt;
 1f8:	80 91 71 00 	lds	r24, 0x0071
 1fc:	80 95       	com	r24
 1fe:	80 93 71 00 	sts	0x0071, r24
			cmd=irDt & 0x3f;
 202:	80 91 71 00 	lds	r24, 0x0071
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	8f 73       	andi	r24, 0x3F	; 63
 20a:	90 70       	andi	r25, 0x00	; 0
 20c:	90 93 68 00 	sts	0x0068, r25
 210:	80 93 67 00 	sts	0x0067, r24
			c131=0;
 214:	10 92 6e 00 	sts	0x006E, r1
 218:	10 92 6d 00 	sts	0x006D, r1
 21c:	08 95       	ret

0000021e <__vector_4>:
void path_detector(void);
void direction_motor(int detectline);


SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 72.463usec here
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	c3p5++;
 240:	80 91 6f 00 	lds	r24, 0x006F
 244:	90 91 70 00 	lds	r25, 0x0070
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 70 00 	sts	0x0070, r25
 24e:	80 93 6f 00 	sts	0x006F, r24
	c131++;
 252:	80 91 6d 00 	lds	r24, 0x006D
 256:	90 91 6e 00 	lds	r25, 0x006E
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	90 93 6e 00 	sts	0x006E, r25
 260:	80 93 6d 00 	sts	0x006D, r24

    remote_decoder();
 264:	49 df       	rcall	.-366    	; 0xf8 <remote_decoder>
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
 266:	8f eb       	ldi	r24, 0xBF	; 191
 268:	84 bd       	out	0x24, r24	; 36
	
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <command>:
		return;
	}
}

void command(void)
{
 28c:	80 91 67 00 	lds	r24, 0x0067
 290:	90 91 68 00 	lds	r25, 0x0068
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	91 05       	cpc	r25, r1
 298:	49 f1       	breq	.+82     	; 0x2ec <command+0x60>
 29a:	85 30       	cpi	r24, 0x05	; 5
 29c:	91 05       	cpc	r25, r1
 29e:	7c f4       	brge	.+30     	; 0x2be <command+0x32>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 05       	cpc	r25, r1
 2a4:	e9 f0       	breq	.+58     	; 0x2e0 <command+0x54>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	91 05       	cpc	r25, r1
 2aa:	1c f4       	brge	.+6      	; 0x2b2 <command+0x26>
 2ac:	89 2b       	or	r24, r25
 2ae:	b1 f0       	breq	.+44     	; 0x2dc <command+0x50>
 2b0:	08 95       	ret
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	91 05       	cpc	r25, r1
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <command+0x58>
 2b8:	03 97       	sbiw	r24, 0x03	; 3
 2ba:	29 f5       	brne	.+74     	; 0x306 <command+0x7a>
 2bc:	15 c0       	rjmp	.+42     	; 0x2e8 <command+0x5c>
 2be:	81 31       	cpi	r24, 0x11	; 17
 2c0:	91 05       	cpc	r25, r1
 2c2:	f9 f0       	breq	.+62     	; 0x302 <command+0x76>
 2c4:	82 31       	cpi	r24, 0x12	; 18
 2c6:	91 05       	cpc	r25, r1
 2c8:	1c f4       	brge	.+6      	; 0x2d0 <command+0x44>
 2ca:	40 97       	sbiw	r24, 0x10	; 16
 2cc:	e1 f4       	brne	.+56     	; 0x306 <command+0x7a>
 2ce:	16 c0       	rjmp	.+44     	; 0x2fc <command+0x70>
 2d0:	80 32       	cpi	r24, 0x20	; 32
 2d2:	91 05       	cpc	r25, r1
 2d4:	79 f0       	breq	.+30     	; 0x2f4 <command+0x68>
 2d6:	81 97       	sbiw	r24, 0x21	; 33
 2d8:	b1 f4       	brne	.+44     	; 0x306 <command+0x7a>
 2da:	0e c0       	rjmp	.+28     	; 0x2f8 <command+0x6c>
switch (cmd)
		{
			case 0:
				PORTB=0x00;
 2dc:	18 ba       	out	0x18, r1	; 24
 2de:	08 95       	ret
				return;
			case 1:
				speed=255;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <command+0x62>
				return;
			case 2:
				speed=150;
 2e4:	86 e9       	ldi	r24, 0x96	; 150
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <command+0x62>
				return;
			case 3:
				speed=100;
 2e8:	84 e6       	ldi	r24, 0x64	; 100
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <command+0x62>
				return;
			case 4:
				speed=50;
 2ec:	82 e3       	ldi	r24, 0x32	; 50
 2ee:	80 93 60 00 	sts	0x0060, r24
 2f2:	08 95       	ret
				return;
			case 8:
				return;
			case 32:
				//direction_motor(1);
				PORTB=0x81;
 2f4:	81 e8       	ldi	r24, 0x81	; 129
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <command+0x72>
				return;
			case 33:
				//direction_motor(7);
				PORTB=0x42;
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <command+0x72>
				return;
			case 16:
				//direction_motor(2);
				PORTB=0x41;
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	88 bb       	out	0x18, r24	; 24
 300:	08 95       	ret
				return;
			case 17:
				//direction_motor(3);
				PORTB=0x82;
 302:	82 e8       	ldi	r24, 0x82	; 130
 304:	88 bb       	out	0x18, r24	; 24
 306:	08 95       	ret

00000308 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	81 bb       	out	0x11, r24	; 17
    char i=0;
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
	DDRC=0x30;						//SET 1 for OUTPUT PORT
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xC7;					//SET 0 FOR INPUT PORT
 310:	87 ec       	ldi	r24, 0xC7	; 199
 312:	87 bb       	out	0x17, r24	; 23
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	TCCR2 = TMC8_CK8;               	
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 318:	8f eb       	ldi	r24, 0xBF	; 191
 31a:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 31c:	80 e4       	ldi	r24, 0x40	; 64
 31e:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 320:	78 94       	sei
	
	for(;;)
	{	
		command();
 322:	b4 df       	rcall	.-152    	; 0x28c <command>
		if(cmd!=7)
 324:	80 91 67 00 	lds	r24, 0x0067
 328:	90 91 68 00 	lds	r25, 0x0068
 32c:	07 97       	sbiw	r24, 0x07	; 7
 32e:	c9 f3       	breq	.-14     	; 0x322 <main+0x1a>
		{
			startcount=0;
 330:	10 92 6a 00 	sts	0x006A, r1
 334:	10 92 69 00 	sts	0x0069, r1
			cbi(PORTC,4);
 338:	ac 98       	cbi	0x15, 4	; 21
 33a:	f3 cf       	rjmp	.-26     	; 0x322 <main+0x1a>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
