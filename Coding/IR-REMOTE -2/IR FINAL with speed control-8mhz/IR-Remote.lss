
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000033c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  0000033e  000003b2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000085  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000204  00000000  00000000  00000457  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c3  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013c  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 37       	cpi	r26, 0x72	; 114
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	37 d1       	rcall	.+622    	; 0x2c8 <main>
  5a:	6e c1       	rjmp	.+732    	; 0x338 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <speed_control>:
}



void speed_control()
{
  5e:	40 e0       	ldi	r20, 0x00	; 0
	char i=0;
	for(i=0;i<255-speed;i++)
  60:	6f ef       	ldi	r22, 0xFF	; 255
  62:	70 e0       	ldi	r23, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <speed_control+0xc>
		{
			PORTB=0x00;
  66:	18 ba       	out	0x18, r1	; 24


void speed_control()
{
	char i=0;
	for(i=0;i<255-speed;i++)
  68:	4f 5f       	subi	r20, 0xFF	; 255
  6a:	80 91 60 00 	lds	r24, 0x0060
  6e:	24 2f       	mov	r18, r20
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	fb 01       	movw	r30, r22
  74:	e8 1b       	sub	r30, r24
  76:	f1 09       	sbc	r31, r1
  78:	2e 17       	cp	r18, r30
  7a:	3f 07       	cpc	r19, r31
  7c:	a4 f3       	brlt	.-24     	; 0x66 <speed_control+0x8>
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	04 c0       	rjmp	.+8      	; 0x8a <speed_control+0x2c>
		{
			PORTB=0x00;
		}
	for(i=0;i<speed-10;i++)
		{
			PORTB=direction;
  82:	80 91 67 00 	lds	r24, 0x0067
  86:	88 bb       	out	0x18, r24	; 24
	char i=0;
	for(i=0;i<255-speed;i++)
		{
			PORTB=0x00;
		}
	for(i=0;i<speed-10;i++)
  88:	4f 5f       	subi	r20, 0xFF	; 255
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	24 2f       	mov	r18, r20
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0a 97       	sbiw	r24, 0x0a	; 10
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	9c f3       	brlt	.-26     	; 0x82 <speed_control+0x24>
			PORTB=direction;
		}
		
	return;

}
  9c:	08 95       	ret

0000009e <remote_decoder>:



void remote_decoder(void)
{
  9e:	80 b3       	in	r24, 0x10	; 16
  a0:	82 95       	swap	r24
  a2:	86 95       	lsr	r24
  a4:	86 95       	lsr	r24
  a6:	83 70       	andi	r24, 0x03	; 3
  a8:	80 95       	com	r24
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	80 93 6a 00 	sts	0x006A, r24
	d=bit_is_clear(PIND,6);
	if(irMode==0)
  b0:	80 91 6b 00 	lds	r24, 0x006B
  b4:	88 23       	and	r24, r24
  b6:	a1 f4       	brne	.+40     	; 0xe0 <remote_decoder+0x42>
	{
		if(d==1)
  b8:	80 91 6a 00 	lds	r24, 0x006A
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	11 f4       	brne	.+4      	; 0xc4 <remote_decoder+0x26>
		{
			irMode=1;
  c0:	80 93 6b 00 	sts	0x006B, r24
		}
		if(c131>8)
  c4:	80 91 6c 00 	lds	r24, 0x006C
  c8:	90 91 6d 00 	lds	r25, 0x006D
  cc:	09 97       	sbiw	r24, 0x09	; 9
  ce:	0c f4       	brge	.+2      	; 0xd2 <remote_decoder+0x34>
  d0:	78 c0       	rjmp	.+240    	; 0x1c2 <remote_decoder+0x124>
		{
			cmd=64;
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 69 00 	sts	0x0069, r25
  da:	80 93 68 00 	sts	0x0068, r24
  de:	08 95       	ret
		}
		return;
	}
	if(irMode==1)
  e0:	80 91 6b 00 	lds	r24, 0x006B
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	39 f4       	brne	.+14     	; 0xf6 <remote_decoder+0x58>
	{
		if(d==0)
  e8:	80 91 6a 00 	lds	r24, 0x006A
  ec:	88 23       	and	r24, r24
  ee:	09 f0       	breq	.+2      	; 0xf2 <remote_decoder+0x54>
  f0:	68 c0       	rjmp	.+208    	; 0x1c2 <remote_decoder+0x124>
		{
			irMode=2;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	2f c0       	rjmp	.+94     	; 0x154 <remote_decoder+0xb6>
		}
		return;
	}
	if(irMode==2)
  f6:	80 91 6b 00 	lds	r24, 0x006B
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	79 f4       	brne	.+30     	; 0x11c <remote_decoder+0x7e>
	{
		if(d==1)
  fe:	80 91 6a 00 	lds	r24, 0x006A
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	09 f0       	breq	.+2      	; 0x108 <remote_decoder+0x6a>
 106:	5d c0       	rjmp	.+186    	; 0x1c2 <remote_decoder+0x124>
		{
			irMode=3;
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	80 93 6b 00 	sts	0x006B, r24
			c3p5=0;
 10e:	10 92 6f 00 	sts	0x006F, r1
 112:	10 92 6e 00 	sts	0x006E, r1
			irDt=0;
 116:	10 92 70 00 	sts	0x0070, r1
 11a:	08 95       	ret
		}
		return;
		
	}
	if(irMode==3)
 11c:	80 91 6b 00 	lds	r24, 0x006B
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	d9 f4       	brne	.+54     	; 0x15a <remote_decoder+0xbc>
	{
		if(c3p5>16)
 124:	80 91 6e 00 	lds	r24, 0x006E
 128:	90 91 6f 00 	lds	r25, 0x006F
 12c:	41 97       	sbiw	r24, 0x11	; 17
 12e:	0c f4       	brge	.+2      	; 0x132 <remote_decoder+0x94>
 130:	48 c0       	rjmp	.+144    	; 0x1c2 <remote_decoder+0x124>
		{
			d_old=d;
 132:	80 91 6a 00 	lds	r24, 0x006A
 136:	80 93 71 00 	sts	0x0071, r24
			irDt=irDt<<1;
 13a:	80 91 70 00 	lds	r24, 0x0070
 13e:	88 0f       	add	r24, r24
 140:	80 93 70 00 	sts	0x0070, r24
			irDt=irDt+d;
 144:	90 91 70 00 	lds	r25, 0x0070
 148:	80 91 6a 00 	lds	r24, 0x006A
 14c:	89 0f       	add	r24, r25
 14e:	80 93 70 00 	sts	0x0070, r24
			irMode=4;
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	80 93 6b 00 	sts	0x006B, r24
 158:	08 95       	ret
		}
		return;
	}
	if(irMode==4)
 15a:	80 91 6b 00 	lds	r24, 0x006B
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	81 f5       	brne	.+96     	; 0x1c2 <remote_decoder+0x124>
	{
		if(d_old!=d)
 162:	90 91 71 00 	lds	r25, 0x0071
 166:	80 91 6a 00 	lds	r24, 0x006A
 16a:	98 17       	cp	r25, r24
 16c:	59 f0       	breq	.+22     	; 0x184 <remote_decoder+0xe6>
		{
			d_old=d;
 16e:	80 91 6a 00 	lds	r24, 0x006A
 172:	80 93 71 00 	sts	0x0071, r24
			irMode=3;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 6b 00 	sts	0x006B, r24
			c3p5=0;
 17c:	10 92 6f 00 	sts	0x006F, r1
 180:	10 92 6e 00 	sts	0x006E, r1
		}
		if(c3p5>49)
 184:	80 91 6e 00 	lds	r24, 0x006E
 188:	90 91 6f 00 	lds	r25, 0x006F
 18c:	c2 97       	sbiw	r24, 0x32	; 50
 18e:	cc f0       	brlt	.+50     	; 0x1c2 <remote_decoder+0x124>
		{
			irMode=0;
 190:	10 92 6b 00 	sts	0x006B, r1
			irDt=irDt>>1;
 194:	80 91 70 00 	lds	r24, 0x0070
 198:	86 95       	lsr	r24
 19a:	80 93 70 00 	sts	0x0070, r24
			irDt=255-irDt;
 19e:	80 91 70 00 	lds	r24, 0x0070
 1a2:	80 95       	com	r24
 1a4:	80 93 70 00 	sts	0x0070, r24
			cmd=irDt & 0x3f;
 1a8:	80 91 70 00 	lds	r24, 0x0070
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	8f 73       	andi	r24, 0x3F	; 63
 1b0:	90 70       	andi	r25, 0x00	; 0
 1b2:	90 93 69 00 	sts	0x0069, r25
 1b6:	80 93 68 00 	sts	0x0068, r24
			c131=0;
 1ba:	10 92 6d 00 	sts	0x006D, r1
 1be:	10 92 6c 00 	sts	0x006C, r1
 1c2:	08 95       	ret

000001c4 <__vector_4>:
void path_detector(void);
void speed_control(void);


SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 72.463usec here
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	c3p5++;
 1e6:	80 91 6e 00 	lds	r24, 0x006E
 1ea:	90 91 6f 00 	lds	r25, 0x006F
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 6f 00 	sts	0x006F, r25
 1f4:	80 93 6e 00 	sts	0x006E, r24
	c131++;
 1f8:	80 91 6c 00 	lds	r24, 0x006C
 1fc:	90 91 6d 00 	lds	r25, 0x006D
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 6d 00 	sts	0x006D, r25
 206:	80 93 6c 00 	sts	0x006C, r24

    remote_decoder();
 20a:	49 df       	rcall	.-366    	; 0x9e <remote_decoder>
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
 20c:	8f eb       	ldi	r24, 0xBF	; 191
 20e:	84 bd       	out	0x24, r24	; 36
	
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <command>:
		return;
	}
}

void command(void)
{
 232:	80 91 68 00 	lds	r24, 0x0068
 236:	90 91 69 00 	lds	r25, 0x0069
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	91 05       	cpc	r25, r1
 23e:	91 f1       	breq	.+100    	; 0x2a4 <command+0x72>
 240:	85 30       	cpi	r24, 0x05	; 5
 242:	91 05       	cpc	r25, r1
 244:	7c f4       	brge	.+30     	; 0x264 <command+0x32>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	91 05       	cpc	r25, r1
 24a:	01 f1       	breq	.+64     	; 0x28c <command+0x5a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	91 05       	cpc	r25, r1
 250:	1c f4       	brge	.+6      	; 0x258 <command+0x26>
 252:	89 2b       	or	r24, r25
 254:	b1 f0       	breq	.+44     	; 0x282 <command+0x50>
 256:	08 95       	ret
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	d9 f0       	breq	.+54     	; 0x294 <command+0x62>
 25e:	03 97       	sbiw	r24, 0x03	; 3
 260:	91 f5       	brne	.+100    	; 0x2c6 <command+0x94>
 262:	1c c0       	rjmp	.+56     	; 0x29c <command+0x6a>
 264:	81 31       	cpi	r24, 0x11	; 17
 266:	91 05       	cpc	r25, r1
 268:	59 f1       	breq	.+86     	; 0x2c0 <command+0x8e>
 26a:	82 31       	cpi	r24, 0x12	; 18
 26c:	91 05       	cpc	r25, r1
 26e:	1c f4       	brge	.+6      	; 0x276 <command+0x44>
 270:	40 97       	sbiw	r24, 0x10	; 16
 272:	49 f5       	brne	.+82     	; 0x2c6 <command+0x94>
 274:	21 c0       	rjmp	.+66     	; 0x2b8 <command+0x86>
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	91 05       	cpc	r25, r1
 27a:	d1 f0       	breq	.+52     	; 0x2b0 <command+0x7e>
 27c:	81 97       	sbiw	r24, 0x21	; 33
 27e:	19 f5       	brne	.+70     	; 0x2c6 <command+0x94>
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <command+0x82>
switch (cmd)
		{
			case 0:
				direction=0x00;
 282:	10 92 67 00 	sts	0x0067, r1
				speed=0;
 286:	10 92 60 00 	sts	0x0060, r1
 28a:	08 95       	ret
				return;
			case 1:
				direction=0x00;
 28c:	10 92 67 00 	sts	0x0067, r1
				speed=255;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	0b c0       	rjmp	.+22     	; 0x2aa <command+0x78>
				return;
			case 2:
				direction=0x00;
 294:	10 92 67 00 	sts	0x0067, r1
				speed=215;
 298:	87 ed       	ldi	r24, 0xD7	; 215
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <command+0x78>
				return;
			case 3:
				direction=0x00;
 29c:	10 92 67 00 	sts	0x0067, r1
				speed=190;
 2a0:	8e eb       	ldi	r24, 0xBE	; 190
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <command+0x78>
				return;
			case 4:
				direction=0x00;
 2a4:	10 92 67 00 	sts	0x0067, r1
				speed=160;
 2a8:	80 ea       	ldi	r24, 0xA0	; 160
 2aa:	80 93 60 00 	sts	0x0060, r24
 2ae:	08 95       	ret
				return;
			case 8:
				return;
			case 32:
				//direction_motor(1);
				direction=0x81;
 2b0:	81 e8       	ldi	r24, 0x81	; 129
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <command+0x88>
				return;
			case 33:
				//direction_motor(7);
				direction=0x42;
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <command+0x88>
				return;
			case 16:
				//direction_motor(2);
				direction=0x41;
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	80 93 67 00 	sts	0x0067, r24
 2be:	08 95       	ret
				return;
			case 17:
				//direction_motor(3);
				direction=0x82;
 2c0:	82 e8       	ldi	r24, 0x82	; 130
 2c2:	80 93 67 00 	sts	0x0067, r24
 2c6:	08 95       	ret

000002c8 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
    
	char i=0;
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	81 bb       	out	0x11, r24	; 17
	DDRC=0x30;						//SET 1 for OUTPUT PORT
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xC7;					//SET 0 FOR INPUT PORT
 2d4:	87 ec       	ldi	r24, 0xC7	; 199
 2d6:	87 bb       	out	0x17, r24	; 23
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	TCCR2 = TMC8_CK8;               	
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 2dc:	8f eb       	ldi	r24, 0xBF	; 191
 2de:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 2e0:	80 e4       	ldi	r24, 0x40	; 64
 2e2:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 2e4:	78 94       	sei
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 2e6:	cf ef       	ldi	r28, 0xFF	; 255
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
    
    sei();                       	// enable interrupts
	
	for(;;)
	{	
		command();
 2ea:	a3 df       	rcall	.-186    	; 0x232 <command>
		if(speed!=0)
 2ec:	80 91 60 00 	lds	r24, 0x0060
 2f0:	88 23       	and	r24, r24
 2f2:	f1 f0       	breq	.+60     	; 0x330 <main+0x68>
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x34>
		{
			for(i=0;i<255-speed;i++)
			{
				PORTB=0x00;
 2f8:	18 ba       	out	0x18, r1	; 24
	for(;;)
	{	
		command();
		if(speed!=0)
		{
			for(i=0;i<255-speed;i++)
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	80 91 60 00 	lds	r24, 0x0060
 300:	24 2f       	mov	r18, r20
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	be 01       	movw	r22, r28
 306:	68 1b       	sub	r22, r24
 308:	71 09       	sbc	r23, r1
 30a:	26 17       	cp	r18, r22
 30c:	37 07       	cpc	r19, r23
 30e:	a4 f3       	brlt	.-24     	; 0x2f8 <main+0x30>
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	04 c0       	rjmp	.+8      	; 0x31c <main+0x54>
			{
				PORTB=0x00;
			}
			for(i=0;i<speed-10;i++)
			{
				PORTB=direction;
 314:	80 91 67 00 	lds	r24, 0x0067
 318:	88 bb       	out	0x18, r24	; 24
		{
			for(i=0;i<255-speed;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<speed-10;i++)
 31a:	4f 5f       	subi	r20, 0xFF	; 255
 31c:	80 91 60 00 	lds	r24, 0x0060
 320:	24 2f       	mov	r18, r20
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0a 97       	sbiw	r24, 0x0a	; 10
 328:	28 17       	cp	r18, r24
 32a:	39 07       	cpc	r19, r25
 32c:	9c f3       	brlt	.-26     	; 0x314 <main+0x4c>
 32e:	dd cf       	rjmp	.-70     	; 0x2ea <main+0x22>
				PORTB=direction;
			}
		}
		else
		{
			PORTB=direction;
 330:	80 91 67 00 	lds	r24, 0x0067
 334:	88 bb       	out	0x18, r24	; 24
 336:	d9 cf       	rjmp	.-78     	; 0x2ea <main+0x22>

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
