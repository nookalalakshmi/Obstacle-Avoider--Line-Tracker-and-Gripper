
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004de  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800062  000004e0  00000554  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000073  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056f  00000000  00000000  000005e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000164  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065e  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b9  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033b  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__bad_interrupt>
   4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
   6:	4c c0       	rjmp	.+152    	; 0xa0 <__bad_interrupt>
   8:	df c0       	rjmp	.+446    	; 0x1c8 <__vector_4>
   a:	4a c0       	rjmp	.+148    	; 0xa0 <__bad_interrupt>
   c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
   e:	48 c0       	rjmp	.+144    	; 0xa0 <__bad_interrupt>
  10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
  12:	46 c0       	rjmp	.+140    	; 0xa0 <__bad_interrupt>
  14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
  16:	44 c0       	rjmp	.+136    	; 0xa0 <__bad_interrupt>
  18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
  1a:	42 c0       	rjmp	.+132    	; 0xa0 <__bad_interrupt>
  1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
  1e:	40 c0       	rjmp	.+128    	; 0xa0 <__bad_interrupt>
  20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
  22:	3e c0       	rjmp	.+124    	; 0xa0 <__bad_interrupt>
  24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
  26:	1b c1       	rjmp	.+566    	; 0x25e <command+0x16>
  28:	25 c1       	rjmp	.+586    	; 0x274 <command+0x2c>
  2a:	2e c1       	rjmp	.+604    	; 0x288 <command+0x40>
  2c:	37 c1       	rjmp	.+622    	; 0x29c <command+0x54>
  2e:	40 c1       	rjmp	.+640    	; 0x2b0 <command+0x68>
  30:	95 c1       	rjmp	.+810    	; 0x35c <command+0x114>
  32:	94 c1       	rjmp	.+808    	; 0x35c <command+0x114>
  34:	49 c1       	rjmp	.+658    	; 0x2c8 <command+0x80>
  36:	5a c1       	rjmp	.+692    	; 0x2ec <command+0xa4>
  38:	61 c1       	rjmp	.+706    	; 0x2fc <command+0xb4>
  3a:	90 c1       	rjmp	.+800    	; 0x35c <command+0x114>
  3c:	8f c1       	rjmp	.+798    	; 0x35c <command+0x114>
  3e:	8e c1       	rjmp	.+796    	; 0x35c <command+0x114>
  40:	8d c1       	rjmp	.+794    	; 0x35c <command+0x114>
  42:	8c c1       	rjmp	.+792    	; 0x35c <command+0x114>
  44:	8b c1       	rjmp	.+790    	; 0x35c <command+0x114>
  46:	77 c1       	rjmp	.+750    	; 0x336 <command+0xee>
  48:	80 c1       	rjmp	.+768    	; 0x34a <command+0x102>
  4a:	88 c1       	rjmp	.+784    	; 0x35c <command+0x114>
  4c:	87 c1       	rjmp	.+782    	; 0x35c <command+0x114>
  4e:	86 c1       	rjmp	.+780    	; 0x35c <command+0x114>
  50:	85 c1       	rjmp	.+778    	; 0x35c <command+0x114>
  52:	84 c1       	rjmp	.+776    	; 0x35c <command+0x114>
  54:	83 c1       	rjmp	.+774    	; 0x35c <command+0x114>
  56:	82 c1       	rjmp	.+772    	; 0x35c <command+0x114>
  58:	81 c1       	rjmp	.+770    	; 0x35c <command+0x114>
  5a:	80 c1       	rjmp	.+768    	; 0x35c <command+0x114>
  5c:	7f c1       	rjmp	.+766    	; 0x35c <command+0x114>
  5e:	7e c1       	rjmp	.+764    	; 0x35c <command+0x114>
  60:	7d c1       	rjmp	.+762    	; 0x35c <command+0x114>
  62:	7c c1       	rjmp	.+760    	; 0x35c <command+0x114>
  64:	7b c1       	rjmp	.+758    	; 0x35c <command+0x114>
  66:	57 c1       	rjmp	.+686    	; 0x316 <command+0xce>
  68:	5e c1       	rjmp	.+700    	; 0x326 <command+0xde>

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ee ed       	ldi	r30, 0xDE	; 222
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a2 36       	cpi	r26, 0x62	; 98
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a2 e6       	ldi	r26, 0x62	; 98
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 37       	cpi	r26, 0x7E	; 126
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	60 d1       	rcall	.+704    	; 0x35e <main>
  9e:	1d c2       	rjmp	.+1082   	; 0x4da <_exit>

000000a0 <__bad_interrupt>:
  a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <remote_decoder>:
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
	
}

void remote_decoder(void)
{
  a2:	80 b3       	in	r24, 0x10	; 16
  a4:	82 95       	swap	r24
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	83 70       	andi	r24, 0x03	; 3
  ac:	80 95       	com	r24
  ae:	81 70       	andi	r24, 0x01	; 1
  b0:	80 93 74 00 	sts	0x0074, r24
	d=bit_is_clear(PIND,6);
	if(irMode==0)
  b4:	80 91 75 00 	lds	r24, 0x0075
  b8:	88 23       	and	r24, r24
  ba:	a1 f4       	brne	.+40     	; 0xe4 <remote_decoder+0x42>
	{
		if(d==1)
  bc:	80 91 74 00 	lds	r24, 0x0074
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	11 f4       	brne	.+4      	; 0xc8 <remote_decoder+0x26>
		{
			irMode=1;
  c4:	80 93 75 00 	sts	0x0075, r24
		}
		if(c131>8)
  c8:	80 91 76 00 	lds	r24, 0x0076
  cc:	90 91 77 00 	lds	r25, 0x0077
  d0:	09 97       	sbiw	r24, 0x09	; 9
  d2:	0c f4       	brge	.+2      	; 0xd6 <remote_decoder+0x34>
  d4:	78 c0       	rjmp	.+240    	; 0x1c6 <remote_decoder+0x124>
		{
			cmd=64;
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 70 00 	sts	0x0070, r25
  de:	80 93 6f 00 	sts	0x006F, r24
  e2:	08 95       	ret
		}
		return;
	}
	if(irMode==1)
  e4:	80 91 75 00 	lds	r24, 0x0075
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	39 f4       	brne	.+14     	; 0xfa <remote_decoder+0x58>
	{
		if(d==0)
  ec:	80 91 74 00 	lds	r24, 0x0074
  f0:	88 23       	and	r24, r24
  f2:	09 f0       	breq	.+2      	; 0xf6 <remote_decoder+0x54>
  f4:	68 c0       	rjmp	.+208    	; 0x1c6 <remote_decoder+0x124>
		{
			irMode=2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	2f c0       	rjmp	.+94     	; 0x158 <remote_decoder+0xb6>
		}
		return;
	}
	if(irMode==2)
  fa:	80 91 75 00 	lds	r24, 0x0075
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	79 f4       	brne	.+30     	; 0x120 <remote_decoder+0x7e>
	{
		if(d==1)
 102:	80 91 74 00 	lds	r24, 0x0074
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <remote_decoder+0x6a>
 10a:	5d c0       	rjmp	.+186    	; 0x1c6 <remote_decoder+0x124>
		{
			irMode=3;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 75 00 	sts	0x0075, r24
			c3p5=0;
 112:	10 92 79 00 	sts	0x0079, r1
 116:	10 92 78 00 	sts	0x0078, r1
			irDt=0;
 11a:	10 92 7a 00 	sts	0x007A, r1
 11e:	08 95       	ret
		}
		return;
		
	}
	if(irMode==3)
 120:	80 91 75 00 	lds	r24, 0x0075
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	d9 f4       	brne	.+54     	; 0x15e <remote_decoder+0xbc>
	{
		if(c3p5>16)
 128:	80 91 78 00 	lds	r24, 0x0078
 12c:	90 91 79 00 	lds	r25, 0x0079
 130:	41 97       	sbiw	r24, 0x11	; 17
 132:	0c f4       	brge	.+2      	; 0x136 <remote_decoder+0x94>
 134:	48 c0       	rjmp	.+144    	; 0x1c6 <remote_decoder+0x124>
		{
			d_old=d;
 136:	80 91 74 00 	lds	r24, 0x0074
 13a:	80 93 7b 00 	sts	0x007B, r24
			irDt=irDt<<1;
 13e:	80 91 7a 00 	lds	r24, 0x007A
 142:	88 0f       	add	r24, r24
 144:	80 93 7a 00 	sts	0x007A, r24
			irDt=irDt+d;
 148:	90 91 7a 00 	lds	r25, 0x007A
 14c:	80 91 74 00 	lds	r24, 0x0074
 150:	89 0f       	add	r24, r25
 152:	80 93 7a 00 	sts	0x007A, r24
			irMode=4;
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	80 93 75 00 	sts	0x0075, r24
 15c:	08 95       	ret
		}
		return;
	}
	if(irMode==4)
 15e:	80 91 75 00 	lds	r24, 0x0075
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	81 f5       	brne	.+96     	; 0x1c6 <remote_decoder+0x124>
	{
		if(d_old!=d)
 166:	90 91 7b 00 	lds	r25, 0x007B
 16a:	80 91 74 00 	lds	r24, 0x0074
 16e:	98 17       	cp	r25, r24
 170:	59 f0       	breq	.+22     	; 0x188 <remote_decoder+0xe6>
		{
			d_old=d;
 172:	80 91 74 00 	lds	r24, 0x0074
 176:	80 93 7b 00 	sts	0x007B, r24
			irMode=3;
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	80 93 75 00 	sts	0x0075, r24
			c3p5=0;
 180:	10 92 79 00 	sts	0x0079, r1
 184:	10 92 78 00 	sts	0x0078, r1
		}
		if(c3p5>49)
 188:	80 91 78 00 	lds	r24, 0x0078
 18c:	90 91 79 00 	lds	r25, 0x0079
 190:	c2 97       	sbiw	r24, 0x32	; 50
 192:	cc f0       	brlt	.+50     	; 0x1c6 <remote_decoder+0x124>
		{
			irMode=0;
 194:	10 92 75 00 	sts	0x0075, r1
			irDt=irDt>>1;
 198:	80 91 7a 00 	lds	r24, 0x007A
 19c:	86 95       	lsr	r24
 19e:	80 93 7a 00 	sts	0x007A, r24
			irDt=255-irDt;
 1a2:	80 91 7a 00 	lds	r24, 0x007A
 1a6:	80 95       	com	r24
 1a8:	80 93 7a 00 	sts	0x007A, r24
			cmd=irDt & 0x3f;
 1ac:	80 91 7a 00 	lds	r24, 0x007A
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	8f 73       	andi	r24, 0x3F	; 63
 1b4:	90 70       	andi	r25, 0x00	; 0
 1b6:	90 93 70 00 	sts	0x0070, r25
 1ba:	80 93 6f 00 	sts	0x006F, r24
			c131=0;
 1be:	10 92 77 00 	sts	0x0077, r1
 1c2:	10 92 76 00 	sts	0x0076, r1
 1c6:	08 95       	ret

000001c8 <__vector_4>:
void remote_decoder(void);



SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 72.463usec here
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	
	c3p5++;
 1ea:	80 91 78 00 	lds	r24, 0x0078
 1ee:	90 91 79 00 	lds	r25, 0x0079
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 79 00 	sts	0x0079, r25
 1f8:	80 93 78 00 	sts	0x0078, r24
	c131++;
 1fc:	80 91 76 00 	lds	r24, 0x0076
 200:	90 91 77 00 	lds	r25, 0x0077
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	90 93 77 00 	sts	0x0077, r25
 20a:	80 93 76 00 	sts	0x0076, r24
	pathmode++;
 20e:	80 91 7c 00 	lds	r24, 0x007C
 212:	90 91 7d 00 	lds	r25, 0x007D
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	90 93 7d 00 	sts	0x007D, r25
 21c:	80 93 7c 00 	sts	0x007C, r24
	remote_decoder();
 220:	40 df       	rcall	.-384    	; 0xa2 <remote_decoder>
	TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
 222:	8f eb       	ldi	r24, 0xBF	; 191
 224:	84 bd       	out	0x24, r24	; 36
	
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <command>:
		return;
	}
}

void command(void)
{
 248:	e0 91 6f 00 	lds	r30, 0x006F
 24c:	f0 91 70 00 	lds	r31, 0x0070
 250:	e2 32       	cpi	r30, 0x22	; 34
 252:	f1 05       	cpc	r31, r1
 254:	08 f0       	brcs	.+2      	; 0x258 <command+0x10>
 256:	82 c0       	rjmp	.+260    	; 0x35c <command+0x114>
 258:	ed 5e       	subi	r30, 0xED	; 237
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	09 94       	ijmp
switch (cmd)
		{
			case 0:
				direction=0x00;
 25e:	10 92 71 00 	sts	0x0071, r1
				pathfollower=0;
 262:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 266:	10 92 68 00 	sts	0x0068, r1
 26a:	10 92 67 00 	sts	0x0067, r1
				speed=0;
 26e:	10 92 60 00 	sts	0x0060, r1
 272:	08 95       	ret
				return;
			case 1:
				direction=0x00;
 274:	10 92 71 00 	sts	0x0071, r1
				pathfollower=0;
 278:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 27c:	10 92 68 00 	sts	0x0068, r1
 280:	10 92 67 00 	sts	0x0067, r1
				speed=255;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	1d c0       	rjmp	.+58     	; 0x2c2 <command+0x7a>
				return;
			case 2:
				direction=0x00;
 288:	10 92 71 00 	sts	0x0071, r1
				pathfollower=0;
 28c:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 290:	10 92 68 00 	sts	0x0068, r1
 294:	10 92 67 00 	sts	0x0067, r1
				speed=215;
 298:	87 ed       	ldi	r24, 0xD7	; 215
 29a:	13 c0       	rjmp	.+38     	; 0x2c2 <command+0x7a>
				return;
			case 3:
				direction=0x00;
 29c:	10 92 71 00 	sts	0x0071, r1
				pathfollower=0;
 2a0:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 2a4:	10 92 68 00 	sts	0x0068, r1
 2a8:	10 92 67 00 	sts	0x0067, r1
				speed=190;
 2ac:	8e eb       	ldi	r24, 0xBE	; 190
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <command+0x7a>
				return;
			case 4:
				direction=0x00;
 2b0:	10 92 71 00 	sts	0x0071, r1
				pathfollower=0;
 2b4:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 2b8:	10 92 68 00 	sts	0x0068, r1
 2bc:	10 92 67 00 	sts	0x0067, r1
				speed=160;
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	80 93 60 00 	sts	0x0060, r24
 2c6:	08 95       	ret
				return;
			case 7:
				flag=0;
 2c8:	10 92 73 00 	sts	0x0073, r1
				backflag=0;
 2cc:	10 92 66 00 	sts	0x0066, r1
 2d0:	10 92 65 00 	sts	0x0065, r1
				obsavoid=0;
 2d4:	10 92 68 00 	sts	0x0068, r1
 2d8:	10 92 67 00 	sts	0x0067, r1
				pathfollower=1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 72 00 	sts	0x0072, r24
				speed=210;
 2e2:	82 ed       	ldi	r24, 0xD2	; 210
 2e4:	80 93 60 00 	sts	0x0060, r24
				sbi(PORTC,4);
 2e8:	ac 9a       	sbi	0x15, 4	; 21
 2ea:	08 95       	ret
				return;
			case 8:
				pathfollower=0;
 2ec:	10 92 72 00 	sts	0x0072, r1
				cbi(PORTC,4);
 2f0:	ac 98       	cbi	0x15, 4	; 21
				obsavoid=0;
 2f2:	10 92 68 00 	sts	0x0068, r1
 2f6:	10 92 67 00 	sts	0x0067, r1
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <command+0xc4>
				speed=0;
				direction=0x00;
				return;
			case 9:
				pathfollower=0;
 2fc:	10 92 72 00 	sts	0x0072, r1
				obsavoid=1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 68 00 	sts	0x0068, r25
 308:	80 93 67 00 	sts	0x0067, r24
				speed=0;
 30c:	10 92 60 00 	sts	0x0060, r1
				direction=0x00;
 310:	10 92 71 00 	sts	0x0071, r1
 314:	08 95       	ret
				return;
			case 32:
				//direction_motor(1);
				pathfollower=0;
 316:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 31a:	10 92 68 00 	sts	0x0068, r1
 31e:	10 92 67 00 	sts	0x0067, r1
				direction=0x81;
 322:	81 e8       	ldi	r24, 0x81	; 129
 324:	0f c0       	rjmp	.+30     	; 0x344 <command+0xfc>
				return;
			case 33:
				//direction_motor(7);
				pathfollower=0;
 326:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 32a:	10 92 68 00 	sts	0x0068, r1
 32e:	10 92 67 00 	sts	0x0067, r1
				direction=0x42;
 332:	82 e4       	ldi	r24, 0x42	; 66
 334:	07 c0       	rjmp	.+14     	; 0x344 <command+0xfc>
				return;
			case 16:
				//direction_motor(2);
				pathfollower=0;
 336:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 33a:	10 92 68 00 	sts	0x0068, r1
 33e:	10 92 67 00 	sts	0x0067, r1
				direction=0x41;
 342:	81 e4       	ldi	r24, 0x41	; 65
 344:	80 93 71 00 	sts	0x0071, r24
 348:	08 95       	ret
				return;
			case 17:
				//direction_motor(3);
				pathfollower=0;
 34a:	10 92 72 00 	sts	0x0072, r1
				obsavoid=0;
 34e:	10 92 68 00 	sts	0x0068, r1
 352:	10 92 67 00 	sts	0x0067, r1
				direction=0x82;
 356:	82 e8       	ldi	r24, 0x82	; 130
 358:	80 93 71 00 	sts	0x0071, r24
 35c:	08 95       	ret

0000035e <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
    
	char i=0;
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 366:	8f e0       	ldi	r24, 0x0F	; 15
 368:	81 bb       	out	0x11, r24	; 17
	DDRC=0x30;						//SET 1 for OUTPUT PORT
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xC7;					//SET 0 FOR INPUT PORT
 36e:	87 ec       	ldi	r24, 0xC7	; 199
 370:	87 bb       	out	0x17, r24	; 23
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	TCCR2 = TMC8_CK8;               	
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 376:	8f eb       	ldi	r24, 0xBF	; 191
 378:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 37e:	78 94       	sei
	
	for(;;)
	{	
		
		command();
 380:	63 df       	rcall	.-314    	; 0x248 <command>
		sbi(PORTB,2);
 382:	c2 9a       	sbi	0x18, 2	; 24
			else
			{
				PORTB=direction;
			}
		}*/
		if(obsavoid==1)	//enter obstacle avoider mode
 384:	80 91 67 00 	lds	r24, 0x0067
 388:	90 91 68 00 	lds	r25, 0x0068
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	c1 f7       	brne	.-16     	; 0x380 <main+0x22>
		{
			cbi(PORTB,2);
 390:	c2 98       	cbi	0x18, 2	; 24
			TIMSK=0x00;			//disable timer
 392:	19 be       	out	0x39, r1	; 57
			while(1)						//INFINITE LOOP
			{
				fwdrestrict++;
				PORTB=0x81;	//Forward
 394:	51 e8       	ldi	r21, 0x81	; 129
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 396:	64 ec       	ldi	r22, 0xC4	; 196
 398:	79 e0       	ldi	r23, 0x09	; 9
						//sbi(PORTB,2);
						fwdrestrict=0;
						
						while(bit_is_clear(PIND,2))		//front obstacle
						{
							PORTB=0x82;		//Left
 39a:	12 e8       	ldi	r17, 0x82	; 130
							//sbi(PORTB,2);
							leftjam++;
							if(leftjam==1000)
							{
								PORTB=0x42;
 39c:	a2 e4       	ldi	r26, 0x42	; 66
 39e:	29 e1       	ldi	r18, 0x19	; 25
 3a0:	30 e0       	ldi	r19, 0x00	; 0
						//sbi(PORTB,2);
						fwdrestrict=0;
						
						while(bit_is_clear(PINC,0)) //left obstacle
						{
							PORTB=0x41;		//right
 3a2:	b1 e4       	ldi	r27, 0x41	; 65
 3a4:	c4 ed       	ldi	r28, 0xD4	; 212
 3a6:	d0 e3       	ldi	r29, 0x30	; 48
				_delay_ms(50);
				if(fwdrestrict==300)
				{
					PORTB=0x42;
					_delay_ms(6000);
					PORTB=0x02;
 3a8:	02 e0       	ldi	r16, 0x02	; 2
		{
			cbi(PORTB,2);
			TIMSK=0x00;			//disable timer
			while(1)						//INFINITE LOOP
			{
				fwdrestrict++;
 3aa:	80 91 69 00 	lds	r24, 0x0069
 3ae:	90 91 6a 00 	lds	r25, 0x006A
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 6a 00 	sts	0x006A, r25
 3b8:	80 93 69 00 	sts	0x0069, r24
				PORTB=0x81;	//Forward
 3bc:	58 bb       	out	0x18, r21	; 24
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	cb 01       	movw	r24, r22
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x64>
				for(i=0;i<5;i++)
				{
				
					_delay_ms(10);
					sbi(PORTC,5);		//enable obstacle avoid
 3c6:	ad 9a       	sbi	0x15, 5	; 21
 3c8:	cb 01       	movw	r24, r22
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x6c>
					_delay_ms(10);
					
					if(bit_is_clear(PIND,2))
 3ce:	82 99       	sbic	0x10, 2	; 16
 3d0:	2a c0       	rjmp	.+84     	; 0x426 <main+0xc8>
					{
						//sbi(PORTB,2);
						fwdrestrict=0;
 3d2:	10 92 6a 00 	sts	0x006A, r1
 3d6:	10 92 69 00 	sts	0x0069, r1
 3da:	1a c0       	rjmp	.+52     	; 0x410 <main+0xb2>
						
						while(bit_is_clear(PIND,2))		//front obstacle
						{
							PORTB=0x82;		//Left
 3dc:	18 bb       	out	0x18, r17	; 24
							//sbi(PORTB,2);
							leftjam++;
 3de:	80 91 6b 00 	lds	r24, 0x006B
 3e2:	90 91 6c 00 	lds	r25, 0x006C
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 6c 00 	sts	0x006C, r25
 3ec:	80 93 6b 00 	sts	0x006B, r24
							if(leftjam==1000)
 3f0:	80 91 6b 00 	lds	r24, 0x006B
 3f4:	90 91 6c 00 	lds	r25, 0x006C
 3f8:	88 5e       	subi	r24, 0xE8	; 232
 3fa:	93 40       	sbci	r25, 0x03	; 3
 3fc:	49 f4       	brne	.+18     	; 0x410 <main+0xb2>
							{
								PORTB=0x42;
 3fe:	a8 bb       	out	0x18, r26	; 24
 400:	80 e3       	ldi	r24, 0x30	; 48
 402:	95 e7       	ldi	r25, 0x75	; 117
 404:	f9 01       	movw	r30, r18
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <main+0xa8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 40a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40c:	d9 f7       	brne	.-10     	; 0x404 <main+0xa6>
								//sbi(PORTB,2);
								_delay_ms(3000);
								PORTB=0x82;
 40e:	18 bb       	out	0x18, r17	; 24
					if(bit_is_clear(PIND,2))
					{
						//sbi(PORTB,2);
						fwdrestrict=0;
						
						while(bit_is_clear(PIND,2))		//front obstacle
 410:	82 9b       	sbis	0x10, 2	; 16
 412:	e4 cf       	rjmp	.-56     	; 0x3dc <main+0x7e>
 414:	80 e2       	ldi	r24, 0x20	; 32
 416:	9e e4       	ldi	r25, 0x4E	; 78
 418:	f9 01       	movw	r30, r18
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <main+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 420:	d9 f7       	brne	.-10     	; 0x418 <main+0xba>
								PORTB=0x82;
								//sbi(PORTB,2);
							}
						}
						_delay_ms(2000);
						PORTB=0x81;		//Forward
 422:	58 bb       	out	0x18, r21	; 24
 424:	01 c0       	rjmp	.+2      	; 0x428 <main+0xca>
						//_delay_ms(10);
						
					}
					else
					{
						cbi(PORTB,2);
 426:	c2 98       	cbi	0x18, 2	; 24
					}
					if(bit_is_clear(PINC,0))		//left obstacle
 428:	98 99       	sbic	0x13, 0	; 19
 42a:	2a c0       	rjmp	.+84     	; 0x480 <__stack+0x21>
					{		
						//sbi(PORTB,2);
						fwdrestrict=0;
 42c:	10 92 6a 00 	sts	0x006A, r1
 430:	10 92 69 00 	sts	0x0069, r1
 434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
						
						while(bit_is_clear(PINC,0)) //left obstacle
						{
							PORTB=0x41;		//right
 436:	b8 bb       	out	0x18, r27	; 24
							//sbi(PORTB,2);
							rightjam++;
 438:	80 91 6d 00 	lds	r24, 0x006D
 43c:	90 91 6e 00 	lds	r25, 0x006E
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	90 93 6e 00 	sts	0x006E, r25
 446:	80 93 6d 00 	sts	0x006D, r24
							if(rightjam==1000)
 44a:	80 91 6d 00 	lds	r24, 0x006D
 44e:	90 91 6e 00 	lds	r25, 0x006E
 452:	88 5e       	subi	r24, 0xE8	; 232
 454:	93 40       	sbci	r25, 0x03	; 3
 456:	49 f4       	brne	.+18     	; 0x46a <__stack+0xb>
							{
								PORTB=0x42;
 458:	a8 bb       	out	0x18, r26	; 24
 45a:	80 e3       	ldi	r24, 0x30	; 48
 45c:	95 e7       	ldi	r25, 0x75	; 117
 45e:	f9 01       	movw	r30, r18
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 464:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 466:	d9 f7       	brne	.-10     	; 0x45e <main+0x100>
								//sbi(PORTB,2);
								_delay_ms(3000);
								PORTB=0x41;
 468:	b8 bb       	out	0x18, r27	; 24
					if(bit_is_clear(PINC,0))		//left obstacle
					{		
						//sbi(PORTB,2);
						fwdrestrict=0;
						
						while(bit_is_clear(PINC,0)) //left obstacle
 46a:	98 9b       	sbis	0x13, 0	; 19
 46c:	e4 cf       	rjmp	.-56     	; 0x436 <main+0xd8>
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	9e e4       	ldi	r25, 0x4E	; 78
 472:	f9 01       	movw	r30, r18
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 478:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 47a:	d9 f7       	brne	.-10     	; 0x472 <__stack+0x13>
								PORTB=0x41;
								//sbi(PORTB,2);
							}
						}
						_delay_ms(2000);
						PORTB=0x81;		//Forward
 47c:	58 bb       	out	0x18, r21	; 24
 47e:	01 c0       	rjmp	.+2      	; 0x482 <__stack+0x23>
						//_delay_ms(10);
						
					}
					else
					{
						cbi(PORTB,2);
 480:	c2 98       	cbi	0x18, 2	; 24
 482:	cb 01       	movw	r24, r22
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__stack+0x25>
					}
					
					
					_delay_ms(10);
					cbi(PORTC,5);
 488:	ad 98       	cbi	0x15, 5	; 21
 48a:	cb 01       	movw	r24, r22
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
			TIMSK=0x00;			//disable timer
			while(1)						//INFINITE LOOP
			{
				fwdrestrict++;
				PORTB=0x81;	//Forward
				for(i=0;i<5;i++)
 490:	4f 5f       	subi	r20, 0xFF	; 255
 492:	45 30       	cpi	r20, 0x05	; 5
 494:	09 f0       	breq	.+2      	; 0x498 <__stack+0x39>
 496:	94 cf       	rjmp	.-216    	; 0x3c0 <main+0x62>
 498:	ce 01       	movw	r24, r28
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__stack+0x3b>
					
					
				}
			
				_delay_ms(50);
				if(fwdrestrict==300)
 49e:	80 91 69 00 	lds	r24, 0x0069
 4a2:	90 91 6a 00 	lds	r25, 0x006A
 4a6:	8c 52       	subi	r24, 0x2C	; 44
 4a8:	91 40       	sbci	r25, 0x01	; 1
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__stack+0x4f>
 4ac:	7e cf       	rjmp	.-260    	; 0x3aa <main+0x4c>
				{
					PORTB=0x42;
 4ae:	a8 bb       	out	0x18, r26	; 24
 4b0:	80 e6       	ldi	r24, 0x60	; 96
 4b2:	9a ee       	ldi	r25, 0xEA	; 234
 4b4:	f9 01       	movw	r30, r18
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__stack+0x57>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__stack+0x55>
					_delay_ms(6000);
					PORTB=0x02;
 4be:	08 bb       	out	0x18, r16	; 24
 4c0:	80 e5       	ldi	r24, 0x50	; 80
 4c2:	93 ec       	ldi	r25, 0xC3	; 195
 4c4:	f9 01       	movw	r30, r18
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__stack+0x67>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__stack+0x65>
					_delay_ms(5000);
					PORTB=0x81;
 4ce:	58 bb       	out	0x18, r21	; 24
					fwdrestrict=0;
 4d0:	10 92 6a 00 	sts	0x006A, r1
 4d4:	10 92 69 00 	sts	0x0069, r1
 4d8:	68 cf       	rjmp	.-304    	; 0x3aa <main+0x4c>

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
