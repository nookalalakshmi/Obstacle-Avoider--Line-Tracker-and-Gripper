
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003cc  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000692  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec eb       	ldi	r30, 0xBC	; 188
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1e d0       	rcall	.+60     	; 0x96 <main>
  5a:	2e c0       	rjmp	.+92     	; 0xb8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <__vector_8>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/

SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	for(i=0;i<5000;i++)
	{
		cbi(PORTD,6);
  72:	96 98       	cbi	0x12, 6	; 18
-----------------------------------------------------------------*/

SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
{
	int i=0;
	for(i=0;i<5000;i++)
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	23 e1       	ldi	r18, 0x13	; 19
  78:	88 38       	cpi	r24, 0x88	; 136
  7a:	92 07       	cpc	r25, r18
  7c:	d1 f7       	brne	.-12     	; 0x72 <__vector_8+0x14>
		cbi(PORTD,6);
		
	}
	

	    TCNT1  = TIMER_1_CNT;
  7e:	8e e2       	ldi	r24, 0x2E	; 46
  80:	9c ef       	ldi	r25, 0xFC	; 252
  82:	9d bd       	out	0x2d, r25	; 45
  84:	8c bd       	out	0x2c, r24	; 44
}
  86:	9f 91       	pop	r25
  88:	8f 91       	pop	r24
  8a:	2f 91       	pop	r18
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <main>:
-----------------------------------------------------------------*/

int main(void)
{
    
	DDRB=0x01;						//SET DATA DIRECTION REGISTER
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	87 bb       	out	0x17, r24	; 23
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	
	DDRD=0xC0;						//SET DATA DIRECTION REGISTER
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	81 bb       	out	0x11, r24	; 17
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	
	sbi(PORTB,0);					//LED1 ON (INDICATION FOR READY TO USE)
  9e:	c0 9a       	sbi	0x18, 0	; 24

    TCCR1A = 0x00;               	// disable PWM and Compare Output Mode
  a0:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = TMC16_CK1024;       	// use CLK/1024 prescale value
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	8e bd       	out	0x2e, r24	; 46
    TCNT1  = TIMER_1_CNT;        			// reset TCNT1
  a6:	8e e2       	ldi	r24, 0x2E	; 46
  a8:	9c ef       	ldi	r25, 0xFC	; 252
  aa:	9d bd       	out	0x2d, r25	; 45
  ac:	8c bd       	out	0x2c, r24	; 44
    
    TIMSK  = _BV(TOIE1);         	// enable TCNT1 overflow 
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
  b2:	78 94       	sei
    
    for (;;) 						// loop forever
	{                      
			sbi(PORTD,6);
  b4:	96 9a       	sbi	0x12, 6	; 18
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x1e>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
