
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000170  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000035  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000cd  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000097  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000093  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/

SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt1 overflow interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	count++;
  a0:	80 91 62 00 	lds	r24, 0x0062
  a4:	90 91 63 00 	lds	r25, 0x0063
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 63 00 	sts	0x0063, r25
  ae:	80 93 62 00 	sts	0x0062, r24
	if(bit_is_clear(PORTC,0))
  b2:	a8 99       	sbic	0x15, 0	; 21
  b4:	02 c0       	rjmp	.+4      	; 0xba <__vector_5+0x28>
	{
		sbi(PORTC,0);
  b6:	a8 9a       	sbi	0x15, 0	; 21
  b8:	01 c0       	rjmp	.+2      	; 0xbc <__vector_5+0x2a>
	}
	else
	{
		cbi(PORTC,0);
  ba:	a8 98       	cbi	0x15, 0	; 21
	}
		
	
		

    TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
  bc:	8f ed       	ldi	r24, 0xDF	; 223
  be:	84 bd       	out	0x24, r24	; 36
	
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:
-----------------------------------------------------------------*/

int main(void)
{

	DDRA=0x80;				//Set Port A-6 as output port.
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;				//Set Port C as output port all bits.
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
	TCCR2 = TMC8_CK8;               	
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	85 bd       	out	0x25, r24	; 37
    
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
  da:	8f ed       	ldi	r24, 0xDF	; 223
  dc:	84 bd       	out	0x24, r24	; 36
    
    TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	89 bf       	out	0x39, r24	; 57
	
    
    sei();                       	// enable interrupts
  e2:	78 94       	sei
			else
			{
				cbi(PORTC,1);
			}
		}*/
		if((count & 0x02) == 0)
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	90 91 63 00 	lds	r25, 0x0063
  ec:	81 fd       	sbrc	r24, 1
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0x26>
		{
			cbi(PORTC,1);
  f0:	a9 98       	cbi	0x15, 1	; 21
  f2:	f8 cf       	rjmp	.-16     	; 0xe4 <main+0x16>
		}
		else
		{
			sbi(PORTC,1);
  f4:	a9 9a       	sbi	0x15, 1	; 21
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <main+0x16>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
