
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  0000020c  00000280  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000058  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000148  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ea  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fe  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	b8 c0       	rjmp	.+368    	; 0x17a <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e0       	ldi	r30, 0x0C	; 12
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c6 d0       	rcall	.+396    	; 0x1e6 <main>
  5a:	d6 c0       	rjmp	.+428    	; 0x208 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <detect>:

/*----------------------------------------------------------------
-----------------FUNCTIONS-------------------------------------
-----------------------------------------------------------------*/	
void detect(void)
{
  5e:	1d bc       	out	0x2d, r1	; 45
  60:	1c bc       	out	0x2c, r1	; 44
		TCNT0=0;
		while(PIND & 0x04);
		count=TCNT0;
		if(count<55)
		{
			flag=1;
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	1e c0       	rjmp	.+60     	; 0xa4 <detect+0x46>
	
	TCNT1=0;
	
	while(TCNT1<2047)
	{
		TCNT0=0;
  68:	12 be       	out	0x32, r1	; 50
		while(PIND & 0x04);
  6a:	82 99       	sbic	0x10, 2	; 16
  6c:	fe cf       	rjmp	.-4      	; 0x6a <detect+0xc>
		count=TCNT0;
  6e:	82 b7       	in	r24, 0x32	; 50
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 65 00 	sts	0x0065, r25
  76:	80 93 64 00 	sts	0x0064, r24
		if(count<55)
  7a:	80 91 64 00 	lds	r24, 0x0064
  7e:	90 91 65 00 	lds	r25, 0x0065
  82:	c7 97       	sbiw	r24, 0x37	; 55
  84:	2c f4       	brge	.+10     	; 0x90 <detect+0x32>
		{
			flag=1;
  86:	30 93 63 00 	sts	0x0063, r19
  8a:	20 93 62 00 	sts	0x0062, r18
  8e:	04 c0       	rjmp	.+8      	; 0x98 <detect+0x3a>
		}
		else
		{
			flag=0;
  90:	10 92 63 00 	sts	0x0063, r1
  94:	10 92 62 00 	sts	0x0062, r1
		}
			
		
		if(flag==0)
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	90 91 63 00 	lds	r25, 0x0063
  a0:	89 2b       	or	r24, r25
  a2:	29 f0       	breq	.+10     	; 0xae <detect+0x50>
void detect(void)
{
	
	TCNT1=0;
	
	while(TCNT1<2047)
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	9d b5       	in	r25, 0x2d	; 45
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	97 40       	sbci	r25, 0x07	; 7
  ac:	e8 f2       	brcs	.-70     	; 0x68 <detect+0xa>
		{
			break;
		}
	}

	if(flag==1)
  ae:	80 91 62 00 	lds	r24, 0x0062
  b2:	90 91 63 00 	lds	r25, 0x0063
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	39 f1       	breq	.+78     	; 0x108 <detect+0xaa>
		
		return;
	}
	else
	{
		TCNT1=0;
  ba:	1d bc       	out	0x2d, r1	; 45
  bc:	1c bc       	out	0x2c, r1	; 44
		TCNT0=0;
  be:	12 be       	out	0x32, r1	; 50
		
		
			if(bit_is_clear(PIND,2))
  c0:	82 99       	sbic	0x10, 2	; 16
  c2:	05 c0       	rjmp	.+10     	; 0xce <detect+0x70>
			{	
				flag=0;
  c4:	10 92 63 00 	sts	0x0063, r1
  c8:	10 92 62 00 	sts	0x0062, r1
  cc:	06 c0       	rjmp	.+12     	; 0xda <detect+0x7c>
				
			}
			else
			{
				flag=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 63 00 	sts	0x0063, r25
  d6:	80 93 62 00 	sts	0x0062, r24
				
				
			}
	
		if(flag==0)
  da:	80 91 62 00 	lds	r24, 0x0062
  de:	90 91 63 00 	lds	r25, 0x0063
  e2:	89 2b       	or	r24, r25
  e4:	89 f4       	brne	.+34     	; 0x108 <detect+0xaa>
		{
			TCNT0=0;
  e6:	12 be       	out	0x32, r1	; 50
			while(TCNT0<30);
  e8:	82 b7       	in	r24, 0x32	; 50
  ea:	8e 31       	cpi	r24, 0x1E	; 30
  ec:	e8 f3       	brcs	.-6      	; 0xe8 <detect+0x8a>
			if(bit_is_clear(PIND,2))
  ee:	82 99       	sbic	0x10, 2	; 16
  f0:	05 c0       	rjmp	.+10     	; 0xfc <detect+0x9e>
			{
				
				flag=0;
  f2:	10 92 63 00 	sts	0x0063, r1
  f6:	10 92 62 00 	sts	0x0062, r1
  fa:	08 95       	ret
				
			}
			else
			{
				flag=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 63 00 	sts	0x0063, r25
 104:	80 93 62 00 	sts	0x0062, r24
 108:	08 95       	ret

0000010a <detectc>:
		
	}
	
}
void detectc(void)
{
 10a:	12 be       	out	0x32, r1	; 50
	TCNT0=0;
	while(TCNT0<30);
 10c:	82 b7       	in	r24, 0x32	; 50
 10e:	8e 31       	cpi	r24, 0x1E	; 30
 110:	e8 f3       	brcs	.-6      	; 0x10c <detectc+0x2>
	if(bit_is_clear(PIND,2))
 112:	82 99       	sbic	0x10, 2	; 16
 114:	02 c0       	rjmp	.+4      	; 0x11a <detectc+0x10>
	{
		sbi(PORTB,2);
 116:	c2 9a       	sbi	0x18, 2	; 24
 118:	08 95       	ret
		
	}
	else
	{
		cbi(PORTB,2);
 11a:	c2 98       	cbi	0x18, 2	; 24
 11c:	08 95       	ret

0000011e <detecta>:
	}
}
void detecta(void)
{
 11e:	12 be       	out	0x32, r1	; 50
	TCNT0=0;
	while(TCNT0<30);
 120:	82 b7       	in	r24, 0x32	; 50
 122:	8e 31       	cpi	r24, 0x1E	; 30
 124:	e8 f3       	brcs	.-6      	; 0x120 <detecta+0x2>
	
	if(bit_is_clear(PIND,2))
 126:	82 99       	sbic	0x10, 2	; 16
 128:	02 c0       	rjmp	.+4      	; 0x12e <detecta+0x10>
	{
		PORTC|=0x20;
 12a:	ad 9a       	sbi	0x15, 5	; 21
 12c:	01 c0       	rjmp	.+2      	; 0x130 <detecta+0x12>
	}
	else
	{
		PORTC&= 0xdf;
 12e:	ad 98       	cbi	0x15, 5	; 21
	}
	
	TCNT0=0;
 130:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 132:	82 b7       	in	r24, 0x32	; 50
 134:	8e 31       	cpi	r24, 0x1E	; 30
 136:	e8 f3       	brcs	.-6      	; 0x132 <detecta+0x14>
	
	if(bit_is_clear(PIND,2))
 138:	82 99       	sbic	0x10, 2	; 16
 13a:	02 c0       	rjmp	.+4      	; 0x140 <detecta+0x22>
	{
		PORTC|=0x10;
 13c:	ac 9a       	sbi	0x15, 4	; 21
 13e:	01 c0       	rjmp	.+2      	; 0x142 <detecta+0x24>
	}
	else
	{
		PORTC&= 0xef;
 140:	ac 98       	cbi	0x15, 4	; 21
	}
	
	TCNT0=0;
 142:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 144:	82 b7       	in	r24, 0x32	; 50
 146:	8e 31       	cpi	r24, 0x1E	; 30
 148:	e8 f3       	brcs	.-6      	; 0x144 <detecta+0x26>
	
	if(bit_is_clear(PIND,2))
 14a:	82 99       	sbic	0x10, 2	; 16
 14c:	02 c0       	rjmp	.+4      	; 0x152 <detecta+0x34>
	{
		PORTC|=0x08;
 14e:	ab 9a       	sbi	0x15, 3	; 21
 150:	01 c0       	rjmp	.+2      	; 0x154 <detecta+0x36>
	}
	else
	{
		PORTC&= 0xf7;
 152:	ab 98       	cbi	0x15, 3	; 21
	}
	
	TCNT0=0;
 154:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 156:	82 b7       	in	r24, 0x32	; 50
 158:	8e 31       	cpi	r24, 0x1E	; 30
 15a:	e8 f3       	brcs	.-6      	; 0x156 <detecta+0x38>
	
	if(bit_is_clear(PIND,2))
 15c:	82 99       	sbic	0x10, 2	; 16
 15e:	02 c0       	rjmp	.+4      	; 0x164 <detecta+0x46>
	{
		PORTC|=0x04;
 160:	aa 9a       	sbi	0x15, 2	; 21
 162:	01 c0       	rjmp	.+2      	; 0x166 <detecta+0x48>
	}
	else
	{
		PORTC&= 0xfb;
 164:	aa 98       	cbi	0x15, 2	; 21
	}
	
	TCNT0=0;
 166:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 168:	82 b7       	in	r24, 0x32	; 50
 16a:	8e 31       	cpi	r24, 0x1E	; 30
 16c:	e8 f3       	brcs	.-6      	; 0x168 <detecta+0x4a>
	
	if(bit_is_clear(PIND,2))
 16e:	82 99       	sbic	0x10, 2	; 16
 170:	02 c0       	rjmp	.+4      	; 0x176 <detecta+0x58>
	{
		PORTC|=0x02;
 172:	a9 9a       	sbi	0x15, 1	; 21
 174:	08 95       	ret
	}
	else
	{
		PORTC&= 0xfd;
 176:	a9 98       	cbi	0x15, 1	; 21
 178:	08 95       	ret

0000017a <__vector_4>:
	
	
}

SIGNAL(SIG_OVERFLOW2)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	detect();
 19c:	60 df       	rcall	.-320    	; 0x5e <detect>
	if(flag!=1)
 19e:	80 91 62 00 	lds	r24, 0x0062
 1a2:	90 91 63 00 	lds	r25, 0x0063
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <__vector_4+0x46>
	}
	
}
void detectc(void)
{
	TCNT0=0;
 1aa:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 1ac:	82 b7       	in	r24, 0x32	; 50
 1ae:	8e 31       	cpi	r24, 0x1E	; 30
 1b0:	e8 f3       	brcs	.-6      	; 0x1ac <__vector_4+0x32>
	if(bit_is_clear(PIND,2))
 1b2:	82 99       	sbic	0x10, 2	; 16
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_4+0x40>
	{
		sbi(PORTB,2);
 1b6:	c2 9a       	sbi	0x18, 2	; 24
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <__vector_4+0x42>
		
	}
	else
	{
		cbi(PORTB,2);
 1ba:	c2 98       	cbi	0x18, 2	; 24
{
	detect();
	if(flag!=1)
	{
		detectc();
		TCNT0=0;
 1bc:	12 be       	out	0x32, r1	; 50
		
		detecta();
 1be:	af df       	rcall	.-162    	; 0x11e <detecta>
		TCNT2=TIMER_2_CNT;
	}
	else
	{
		TCNT2=TIMER_2_CNT;
 1c0:	8f e8       	ldi	r24, 0x8F	; 143
 1c2:	84 bd       	out	0x24, r24	; 36
		return;
	}
	
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	87 bb       	out	0x17, r24	; 23
	DDRB=0x04;
	DDRC=0x3F;
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	84 bb       	out	0x14, r24	; 20
	DDRD=0x00;
 1ee:	11 ba       	out	0x11, r1	; 17
	
	
	TCCR0 = TMC8_CK8;               	
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	83 bf       	out	0x33, r24	; 51
    TCCR1A=0x00;
 1f4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=TMC16_CK64;
 1f6:	8e bd       	out	0x2e, r24	; 46
	TCCR2=TMC8_CK1024;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	85 bd       	out	0x25, r24	; 37
    TIMSK  = _BV(TOIE2);         	// disable TCNT2 overflow
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	89 bf       	out	0x39, r24	; 57
	TCNT2=TIMER_2_CNT;
 200:	8f e8       	ldi	r24, 0x8F	; 143
 202:	84 bd       	out	0x24, r24	; 36
	

	
    sei();                       	// enable interrupts
 204:	78 94       	sei
 206:	ff cf       	rjmp	.-2      	; 0x206 <main+0x20>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
