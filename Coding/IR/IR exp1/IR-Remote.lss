
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  000001c8  0000023c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003b  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000132  00000000  00000000  00000297  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e3  00000000  00000000  000003c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e1  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000092  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec eb       	ldi	r30, 0xBC	; 188
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a1 d0       	rcall	.+322    	; 0x19c <main>
  5a:	ae c0       	rjmp	.+348    	; 0x1b8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	ef 93       	push	r30
  7a:	ff 93       	push	r31
	char sold=bit_is_clear(PIND,2);
  7c:	40 b3       	in	r20, 0x10	; 16
  7e:	46 95       	lsr	r20
  80:	46 95       	lsr	r20
  82:	40 95       	com	r20
  84:	41 70       	andi	r20, 0x01	; 1
	char s;
	sbi(PORTB,2);
  86:	c2 9a       	sbi	0x18, 2	; 24
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	
	int i=0,j=0;
	for(i=0;i<1125;i++)
	{
		s=bit_is_clear(PIND,2);
		if(sold!=s)
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	70 e0       	ldi	r23, 0x00	; 0
	sbi(PORTB,2);
	
	int i=0,j=0;
	for(i=0;i<1125;i++)
	{
		s=bit_is_clear(PIND,2);
  90:	80 b3       	in	r24, 0x10	; 16
		if(sold!=s)
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	96 95       	lsr	r25
  96:	87 95       	ror	r24
  98:	96 95       	lsr	r25
  9a:	87 95       	ror	r24
  9c:	86 27       	eor	r24, r22
  9e:	97 27       	eor	r25, r23
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	48 17       	cp	r20, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <__vector_9+0x4a>
  a6:	6b c0       	rjmp	.+214    	; 0x17e <__vector_9+0x120>
	char sold=bit_is_clear(PIND,2);
	char s;
	sbi(PORTB,2);
	
	int i=0,j=0;
	for(i=0;i<1125;i++)
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	25 36       	cpi	r18, 0x65	; 101
  b0:	38 07       	cpc	r19, r24
  b2:	71 f7       	brne	.-36     	; 0x90 <__vector_9+0x32>
		if(sold!=s)
		{		
			return;
		}
	}
	sold=bit_is_clear(PIND,2);
  b4:	50 b3       	in	r21, 0x10	; 16
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<600;i++)
	{
		s=bit_is_clear(PIND,2);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 b3       	in	r24, 0x10	; 16
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	96 95       	lsr	r25
  c4:	87 95       	ror	r24
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	86 27       	eor	r24, r22
  cc:	97 27       	eor	r25, r23
  ce:	48 2f       	mov	r20, r24
  d0:	41 70       	andi	r20, 0x01	; 1
		{		
			return;
		}
	}
	sold=bit_is_clear(PIND,2);
	for(i=0;i<600;i++)
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	28 35       	cpi	r18, 0x58	; 88
  da:	38 07       	cpc	r19, r24
  dc:	81 f7       	brne	.-32     	; 0xbe <__vector_9+0x60>
	{
		s=bit_is_clear(PIND,2);
	}
	if(s!=sold)
  de:	85 2f       	mov	r24, r21
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	82 27       	eor	r24, r18
  f0:	93 27       	eor	r25, r19
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	48 17       	cp	r20, r24
  f6:	09 f0       	breq	.+2      	; 0xfa <__vector_9+0x9c>
  f8:	42 c0       	rjmp	.+132    	; 0x17e <__vector_9+0x120>
	{
		return;
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
	for(j=0;j<12;j++)
	{
		for(i=0;i<900;i++)
		{
		}
		d[j]=bit_is_clear(PIND,2);
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	80 b3       	in	r24, 0x10	; 16
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	84 27       	eor	r24, r20
 110:	95 27       	eor	r25, r21
 112:	81 70       	andi	r24, 0x01	; 1
 114:	f9 01       	movw	r30, r18
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 83       	st	Z, r24
	}
	if(s!=sold)
	{
		return;
	}
	for(j=0;j<12;j++)
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	2c 30       	cpi	r18, 0x0C	; 12
 122:	31 05       	cpc	r19, r1
 124:	71 f7       	brne	.-36     	; 0x102 <__vector_9+0xa4>
		}
		d[j]=bit_is_clear(PIND,2);
		
		
	}
	if(d[6]=='1')
 126:	80 91 66 00 	lds	r24, 0x0066
 12a:	81 33       	cpi	r24, 0x31	; 49
 12c:	11 f4       	brne	.+4      	; 0x132 <__vector_9+0xd4>
		sbi(PORTC,0);
 12e:	a8 9a       	sbi	0x15, 0	; 21
 130:	01 c0       	rjmp	.+2      	; 0x134 <__vector_9+0xd6>
	else
		cbi(PORTC,0);
 132:	a8 98       	cbi	0x15, 0	; 21
		
	if(d[7]=='1')
 134:	80 91 67 00 	lds	r24, 0x0067
 138:	81 33       	cpi	r24, 0x31	; 49
 13a:	11 f4       	brne	.+4      	; 0x140 <__vector_9+0xe2>
		sbi(PORTC,1);
 13c:	a9 9a       	sbi	0x15, 1	; 21
 13e:	01 c0       	rjmp	.+2      	; 0x142 <__vector_9+0xe4>
	else
		cbi(PORTC,1);
 140:	a9 98       	cbi	0x15, 1	; 21
	

		
	if(d[8]=='1')
 142:	80 91 68 00 	lds	r24, 0x0068
 146:	81 33       	cpi	r24, 0x31	; 49
 148:	11 f4       	brne	.+4      	; 0x14e <__vector_9+0xf0>
		sbi(PORTC,2);
 14a:	aa 9a       	sbi	0x15, 2	; 21
 14c:	01 c0       	rjmp	.+2      	; 0x150 <__vector_9+0xf2>
	else
		cbi(PORTC,2);
 14e:	aa 98       	cbi	0x15, 2	; 21
	

		
	if(d[9]=='1')
 150:	80 91 69 00 	lds	r24, 0x0069
 154:	81 33       	cpi	r24, 0x31	; 49
 156:	11 f4       	brne	.+4      	; 0x15c <__vector_9+0xfe>
		sbi(PORTC,3);
 158:	ab 9a       	sbi	0x15, 3	; 21
 15a:	01 c0       	rjmp	.+2      	; 0x15e <__vector_9+0x100>
	else
		cbi(PORTC,3);
 15c:	ab 98       	cbi	0x15, 3	; 21
	

		
	if(d[10]=='1')
 15e:	80 91 6a 00 	lds	r24, 0x006A
 162:	81 33       	cpi	r24, 0x31	; 49
 164:	11 f4       	brne	.+4      	; 0x16a <__vector_9+0x10c>
		sbi(PORTC,4);
 166:	ac 9a       	sbi	0x15, 4	; 21
 168:	01 c0       	rjmp	.+2      	; 0x16c <__vector_9+0x10e>
	else
		cbi(PORTC,4);
 16a:	ac 98       	cbi	0x15, 4	; 21
	

		
	if(d[11]=='1')
 16c:	80 91 6b 00 	lds	r24, 0x006B
 170:	81 33       	cpi	r24, 0x31	; 49
 172:	11 f4       	brne	.+4      	; 0x178 <__vector_9+0x11a>
		sbi(PORTC,5);
 174:	ad 9a       	sbi	0x15, 5	; 21
 176:	01 c0       	rjmp	.+2      	; 0x17a <__vector_9+0x11c>
	else
		cbi(PORTC,5);
 178:	ad 98       	cbi	0x15, 5	; 21
	
	TCNT0  = TIMER_2_CNT;        	// reset TCNT2
 17a:	8f e4       	ldi	r24, 0x4F	; 79
 17c:	82 bf       	out	0x32, r24	; 50

	return;
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	87 bb       	out	0x17, r24	; 23
	DDRB=0x02;
	DDRD=0x00;
 1a0:	11 ba       	out	0x11, r1	; 17
	
	DDRC=0x3F;				//Set Port C 0-5 pins as output port all bits.
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = TMC8_CK8;               	
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	83 bf       	out	0x33, r24	; 51
    
    TCNT0  = TIMER_2_CNT;        	// reset TCNT1
 1aa:	8f e4       	ldi	r24, 0x4F	; 79
 1ac:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	89 bf       	out	0x39, r24	; 57
	
    
    sei();                       	// enable interrupts
 1b2:	78 94       	sei
	
	for(;;)
	{
		cbi(PORTB,2);
 1b4:	c2 98       	cbi	0x18, 2	; 24
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <main+0x18>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
