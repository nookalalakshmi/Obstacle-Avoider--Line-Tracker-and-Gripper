
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  000001aa  0000021e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000045  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000023b  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000153  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000336  00000000  00000000  00000611  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fb  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000aa  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8a d0       	rcall	.+276    	; 0x16e <main>
  5a:	a5 c0       	rjmp	.+330    	; 0x1a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <getstartbit>:
-----------------------------------------------------------------*/



void getstartbit(void)
{
  5e:	12 be       	out	0x32, r1	; 50
	unsigned char count;
	TCNT0 = 0;
	while(bit_is_clear(PIND,2));
  60:	82 9b       	sbis	0x10, 2	; 16
  62:	fe cf       	rjmp	.-4      	; 0x60 <getstartbit+0x2>
	while(!bit_is_clear(PIND,2));
  64:	82 99       	sbic	0x10, 2	; 16
  66:	fe cf       	rjmp	.-4      	; 0x64 <getstartbit+0x6>
	count=TCNT0;
  68:	82 b7       	in	r24, 0x32	; 50
	if(count>25)
  6a:	8a 31       	cpi	r24, 0x1A	; 26
  6c:	38 f0       	brcs	.+14     	; 0x7c <getstartbit+0x1e>
	{
		a=1;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 63 00 	sts	0x0063, r25
  76:	80 93 62 00 	sts	0x0062, r24
  7a:	08 95       	ret
		
	}
	else
	{
	a=0;
  7c:	10 92 63 00 	sts	0x0063, r1
  80:	10 92 62 00 	sts	0x0062, r1
  84:	08 95       	ret

00000086 <__vector_1>:




SIGNAL(SIG_INTERRUPT0)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
 unsigned char count;
unsigned int IR_input=0;

TCNT0 = 0;
  94:	12 be       	out	0x32, r1	; 50
while((PIND & 0x04));
  96:	82 99       	sbic	0x10, 2	; 16
  98:	fe cf       	rjmp	.-4      	; 0x96 <__vector_1+0x10>
count = TCNT0;
  9a:	82 b7       	in	r24, 0x32	; 50


if(count < 55) //to verify silence (3.5 ms long)
  9c:	87 33       	cpi	r24, 0x37	; 55
  9e:	18 f4       	brcc	.+6      	; 0xa6 <__vector_1+0x20>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	97 e2       	ldi	r25, 0x27	; 39
  a4:	59 c0       	rjmp	.+178    	; 0x158 <__vector_1+0xd2>


void getstartbit(void)
{
	unsigned char count;
	TCNT0 = 0;
  a6:	12 be       	out	0x32, r1	; 50
	while(bit_is_clear(PIND,2));
  a8:	82 9b       	sbis	0x10, 2	; 16
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <__vector_1+0x22>
	while(!bit_is_clear(PIND,2));
  ac:	82 99       	sbic	0x10, 2	; 16
  ae:	fe cf       	rjmp	.-4      	; 0xac <__vector_1+0x26>
	count=TCNT0;
  b0:	82 b7       	in	r24, 0x32	; 50
	if(count>25)
  b2:	8a 31       	cpi	r24, 0x1A	; 26
  b4:	38 f0       	brcs	.+14     	; 0xc4 <__vector_1+0x3e>
	{
		a=1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 63 00 	sts	0x0063, r25
  be:	80 93 62 00 	sts	0x0062, r24
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__vector_1+0x46>
		
	}
	else
	{
	a=0;
  c4:	10 92 63 00 	sts	0x0063, r1
  c8:	10 92 62 00 	sts	0x0062, r1
	_delay_ms(40);
	return;
}

getstartbit();
if(a==1)
  cc:	80 91 62 00 	lds	r24, 0x0062
  d0:	90 91 63 00 	lds	r25, 0x0063
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	09 f0       	breq	.+2      	; 0xda <__vector_1+0x54>
  d8:	42 c0       	rjmp	.+132    	; 0x15e <__vector_1+0xd8>
{
	
	TCNT0=0;
  da:	12 be       	out	0x32, r1	; 50
	
	while(TCNT0<43);	//not to consider control bit
  dc:	82 b7       	in	r24, 0x32	; 50
  de:	8b 32       	cpi	r24, 0x2B	; 43
  e0:	e8 f3       	brcs	.-6      	; 0xdc <__vector_1+0x56>
	TCNT0=0;
  e2:	12 be       	out	0x32, r1	; 50
	while(TCNT0<155);	//not to consider address bits
  e4:	82 b7       	in	r24, 0x32	; 50
  e6:	8b 39       	cpi	r24, 0x9B	; 155
  e8:	e8 f3       	brcs	.-6      	; 0xe4 <__vector_1+0x5e>
	TCNT0=0;
  ea:	12 be       	out	0x32, r1	; 50
	//while(TCNT0<141);	//not consideing first 5.5 command bits
	PORTC=0x00;
  ec:	15 ba       	out	0x15, r1	; 21
	
	if(bit_is_clear(PIND,2))
  ee:	82 99       	sbic	0x10, 2	; 16
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_1+0x70>
	{
		//sbi(PORTB,2);
		PORTC |= 0x20;
  f2:	ad 9a       	sbi	0x15, 5	; 21
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <__vector_1+0x72>
	}
	else
	{
		//cbi(PORTB,2);
		cbi(PORTC,5);
  f6:	ad 98       	cbi	0x15, 5	; 21
	}
	TCNT0=0;
  f8:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
  fa:	82 b7       	in	r24, 0x32	; 50
  fc:	8e 31       	cpi	r24, 0x1E	; 30
  fe:	e8 f3       	brcs	.-6      	; 0xfa <__vector_1+0x74>
	
		if(bit_is_clear(PIND,2))
 100:	82 99       	sbic	0x10, 2	; 16
 102:	02 c0       	rjmp	.+4      	; 0x108 <__vector_1+0x82>
		{
			PORTC|=0x10;
 104:	ac 9a       	sbi	0x15, 4	; 21
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_1+0x84>
		}
		else
		{
			cbi(PORTC,4);
 108:	ac 98       	cbi	0x15, 4	; 21
		}
	
	TCNT0=0;
 10a:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 10c:	82 b7       	in	r24, 0x32	; 50
 10e:	8e 31       	cpi	r24, 0x1E	; 30
 110:	e8 f3       	brcs	.-6      	; 0x10c <__vector_1+0x86>
	
		if(bit_is_clear(PIND,2))
 112:	82 99       	sbic	0x10, 2	; 16
 114:	02 c0       	rjmp	.+4      	; 0x11a <__vector_1+0x94>
		{
			PORTC|=0x08;
 116:	ab 9a       	sbi	0x15, 3	; 21
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_1+0x96>
		}
		else
		{
			cbi(PORTC,3);
 11a:	ab 98       	cbi	0x15, 3	; 21
		}
	
	TCNT0=0;
 11c:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 11e:	82 b7       	in	r24, 0x32	; 50
 120:	8e 31       	cpi	r24, 0x1E	; 30
 122:	e8 f3       	brcs	.-6      	; 0x11e <__vector_1+0x98>
	
		if(bit_is_clear(PIND,2))
 124:	82 99       	sbic	0x10, 2	; 16
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_1+0xa6>
		{
			PORTC|=0x04;
 128:	aa 9a       	sbi	0x15, 2	; 21
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_1+0xa8>
		}
		else
		{
			cbi(PORTC,2);
 12c:	aa 98       	cbi	0x15, 2	; 21
		}
	
	TCNT0=0;
 12e:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 130:	82 b7       	in	r24, 0x32	; 50
 132:	8e 31       	cpi	r24, 0x1E	; 30
 134:	e8 f3       	brcs	.-6      	; 0x130 <__vector_1+0xaa>

		if(bit_is_clear(PIND,2))
 136:	82 99       	sbic	0x10, 2	; 16
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_1+0xb8>
		{
			PORTC|=0x02;
 13a:	a9 9a       	sbi	0x15, 1	; 21
 13c:	01 c0       	rjmp	.+2      	; 0x140 <__vector_1+0xba>
		}
		else
		{
			cbi(PORTC,1);
 13e:	a9 98       	cbi	0x15, 1	; 21
		}
	
	TCNT0=0;
 140:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 142:	82 b7       	in	r24, 0x32	; 50
 144:	8e 31       	cpi	r24, 0x1E	; 30
 146:	e8 f3       	brcs	.-6      	; 0x142 <__vector_1+0xbc>
	
		if(bit_is_clear(PIND,2))
 148:	82 99       	sbic	0x10, 2	; 16
 14a:	03 c0       	rjmp	.+6      	; 0x152 <__vector_1+0xcc>
		{
			sbi(PORTD,5);
 14c:	95 9a       	sbi	0x12, 5	; 18
			sbi(PORTB,2);
 14e:	c2 9a       	sbi	0x18, 2	; 24
 150:	01 c0       	rjmp	.+2      	; 0x154 <__vector_1+0xce>
		}
		else
		{
			cbi(PORTC,0);
 152:	a8 98       	cbi	0x15, 0	; 21
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	94 ef       	ldi	r25, 0xF4	; 244
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <__vector_1+0xd2>
 15c:	01 c0       	rjmp	.+2      	; 0x160 <__vector_1+0xda>
	return;
	
}
else
{
	cbi(PORTB,2);
 15e:	c2 98       	cbi	0x18, 2	; 24
}


	
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	87 bb       	out	0x17, r24	; 23
	
	
	DDRB=0x04;
	DDRD=0x20;
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	81 bb       	out	0x11, r24	; 17
	
	DDRC=0x3F;				//Set Port C 0-5 pins as output port all bits.
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = TMC8_CK8;               	
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	83 bf       	out	0x33, r24	; 51
    
	
    TIMSK  = 0x00;         	// enable TCNT1 overflow
 17e:	19 be       	out	0x39, r1	; 57
	
    GIMSK=_BV(INT0);
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	8b bf       	out	0x3b, r24	; 59
	MCUCR = _BV(ISC01);          	// falling egde: int0
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	85 bf       	out	0x35, r24	; 53

	
    sei();                       	// enable interrupts
 188:	78 94       	sei
	
	for(;;)
	{
		a=0;
 18a:	10 92 63 00 	sts	0x0063, r1
 18e:	10 92 62 00 	sts	0x0062, r1
		b=0;
 192:	10 92 65 00 	sts	0x0065, r1
 196:	10 92 64 00 	sts	0x0064, r1
		flag=0;
 19a:	10 92 67 00 	sts	0x0067, r1
 19e:	10 92 66 00 	sts	0x0066, r1
		cbi(PORTB,2);
 1a2:	c2 98       	cbi	0x18, 2	; 24
 1a4:	f2 cf       	rjmp	.-28     	; 0x18a <main+0x1c>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
