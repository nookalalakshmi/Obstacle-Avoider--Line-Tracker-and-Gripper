
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  0000020e  00000282  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000058  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000169  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f9  00000000  00000000  00000463  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033e  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b9  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	b6 c0       	rjmp	.+364    	; 0x176 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e0       	ldi	r30, 0x0E	; 14
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c7 d0       	rcall	.+398    	; 0x1e8 <main>
  5a:	d7 c0       	rjmp	.+430    	; 0x20a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <detect>:

/*----------------------------------------------------------------
-----------------FUNCTIONS-------------------------------------
-----------------------------------------------------------------*/	
void detect(void)
{
  5e:	20 e0       	ldi	r18, 0x00	; 0
		{
			m131++;
		}
		if(m3p5<50)
		{
			flag=1;
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	50 e0       	ldi	r21, 0x00	; 0
	char m131=0;
	
	
	while(m131<=8)
	{
		TCNT0=0;
  64:	12 be       	out	0x32, r1	; 50
		while(PIND & 0x04);
  66:	82 99       	sbic	0x10, 2	; 16
  68:	fe cf       	rjmp	.-4      	; 0x66 <detect+0x8>
		m3p5=TCNT0;
  6a:	92 b7       	in	r25, 0x32	; 50
		if(TCNT0>220)
  6c:	82 b7       	in	r24, 0x32	; 50
  6e:	8d 3d       	cpi	r24, 0xDD	; 221
  70:	08 f0       	brcs	.+2      	; 0x74 <detect+0x16>
		{
			m131++;
  72:	2f 5f       	subi	r18, 0xFF	; 255
		}
		if(m3p5<50)
  74:	92 33       	cpi	r25, 0x32	; 50
  76:	28 f4       	brcc	.+10     	; 0x82 <detect+0x24>
		{
			flag=1;
  78:	50 93 63 00 	sts	0x0063, r21
  7c:	40 93 62 00 	sts	0x0062, r20
  80:	04 c0       	rjmp	.+8      	; 0x8a <detect+0x2c>
		}
		else
		{
			flag=0;
  82:	10 92 63 00 	sts	0x0063, r1
  86:	10 92 62 00 	sts	0x0062, r1
		}
		
		if(flag==0)
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	90 91 63 00 	lds	r25, 0x0063
  92:	89 2b       	or	r24, r25
  94:	11 f0       	breq	.+4      	; 0x9a <detect+0x3c>
{
	char m3p5=0;
	char m131=0;
	
	
	while(m131<=8)
  96:	29 30       	cpi	r18, 0x09	; 9
  98:	28 f3       	brcs	.-54     	; 0x64 <detect+0x6>
		{
			break;
		}
	}

	if(flag==1)
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	90 91 63 00 	lds	r25, 0x0063
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	29 f1       	breq	.+74     	; 0xf0 <detect+0x92>
	{
		return;
	}
	else
	{
		TCNT0=0;
  a6:	12 be       	out	0x32, r1	; 50
		if(bit_is_clear(PIND,2))
  a8:	82 99       	sbic	0x10, 2	; 16
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <detect+0x58>
		{	
			flag=0;
  ac:	10 92 63 00 	sts	0x0063, r1
  b0:	10 92 62 00 	sts	0x0062, r1
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <detect+0x64>
		}
		else
		{
			flag=1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 63 00 	sts	0x0063, r25
  be:	80 93 62 00 	sts	0x0062, r24
		}
	
		if(flag==0)
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	90 91 63 00 	lds	r25, 0x0063
  ca:	89 2b       	or	r24, r25
  cc:	89 f4       	brne	.+34     	; 0xf0 <detect+0x92>
		{
			TCNT0=0;
  ce:	12 be       	out	0x32, r1	; 50
			while(TCNT0<30);
  d0:	82 b7       	in	r24, 0x32	; 50
  d2:	8e 31       	cpi	r24, 0x1E	; 30
  d4:	e8 f3       	brcs	.-6      	; 0xd0 <detect+0x72>
			if(bit_is_clear(PIND,2))
  d6:	82 99       	sbic	0x10, 2	; 16
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <detect+0x86>
			{
				flag=0;
  da:	10 92 63 00 	sts	0x0063, r1
  de:	10 92 62 00 	sts	0x0062, r1
  e2:	08 95       	ret
			}
			else
			{
				flag=1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 63 00 	sts	0x0063, r25
  ec:	80 93 62 00 	sts	0x0062, r24
  f0:	08 95       	ret

000000f2 <detectc>:
		}
	}
	
}
void detectc(void)
{
  f2:	12 be       	out	0x32, r1	; 50
	TCNT0=0;
	while(TCNT0<30);
  f4:	82 b7       	in	r24, 0x32	; 50
  f6:	8e 31       	cpi	r24, 0x1E	; 30
  f8:	e8 f3       	brcs	.-6      	; 0xf4 <detectc+0x2>
	if(bit_is_clear(PIND,2))
  fa:	82 99       	sbic	0x10, 2	; 16
  fc:	02 c0       	rjmp	.+4      	; 0x102 <detectc+0x10>
	{
		sbi(PORTB,2);
  fe:	c2 9a       	sbi	0x18, 2	; 24
 100:	08 95       	ret
		
	}
	else
	{
		cbi(PORTB,2);
 102:	c2 98       	cbi	0x18, 2	; 24
 104:	08 95       	ret

00000106 <detectb>:
	}
}
void detectb(void)
{
 106:	15 ba       	out	0x15, r1	; 21
	PORTC=0x00;
	TCNT0=0;
 108:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 10a:	82 b7       	in	r24, 0x32	; 50
 10c:	8e 31       	cpi	r24, 0x1E	; 30
 10e:	e8 f3       	brcs	.-6      	; 0x10a <detectb+0x4>
	
	if(bit_is_clear(PIND,2))
 110:	82 99       	sbic	0x10, 2	; 16
 112:	02 c0       	rjmp	.+4      	; 0x118 <detectb+0x12>
	{
		PORTC|=0x20;
 114:	ad 9a       	sbi	0x15, 5	; 21
 116:	01 c0       	rjmp	.+2      	; 0x11a <detectb+0x14>
	}
	else
	{
		PORTC&= 0xdf;
 118:	ad 98       	cbi	0x15, 5	; 21
	}
	
	TCNT0=0;
 11a:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 11c:	82 b7       	in	r24, 0x32	; 50
 11e:	8e 31       	cpi	r24, 0x1E	; 30
 120:	e8 f3       	brcs	.-6      	; 0x11c <detectb+0x16>
	
	if(bit_is_clear(PIND,2))
 122:	82 99       	sbic	0x10, 2	; 16
 124:	02 c0       	rjmp	.+4      	; 0x12a <detectb+0x24>
	{
		PORTC|=0x10;
 126:	ac 9a       	sbi	0x15, 4	; 21
 128:	01 c0       	rjmp	.+2      	; 0x12c <detectb+0x26>
	}
	else
	{
		PORTC&= 0xef;
 12a:	ac 98       	cbi	0x15, 4	; 21
	}
	
	TCNT0=0;
 12c:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 12e:	82 b7       	in	r24, 0x32	; 50
 130:	8e 31       	cpi	r24, 0x1E	; 30
 132:	e8 f3       	brcs	.-6      	; 0x12e <detectb+0x28>
	
	if(bit_is_clear(PIND,2))
 134:	82 99       	sbic	0x10, 2	; 16
 136:	02 c0       	rjmp	.+4      	; 0x13c <detectb+0x36>
	{
		PORTC|=0x08;
 138:	ab 9a       	sbi	0x15, 3	; 21
 13a:	01 c0       	rjmp	.+2      	; 0x13e <detectb+0x38>
	}
	else
	{
		PORTC&= 0xf7;
 13c:	ab 98       	cbi	0x15, 3	; 21
	}
	
	TCNT0=0;
 13e:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 140:	82 b7       	in	r24, 0x32	; 50
 142:	8e 31       	cpi	r24, 0x1E	; 30
 144:	e8 f3       	brcs	.-6      	; 0x140 <detectb+0x3a>
	
	if(bit_is_clear(PIND,2))
 146:	82 99       	sbic	0x10, 2	; 16
 148:	02 c0       	rjmp	.+4      	; 0x14e <detectb+0x48>
	{
		PORTC|=0x04;
 14a:	aa 9a       	sbi	0x15, 2	; 21
 14c:	01 c0       	rjmp	.+2      	; 0x150 <detectb+0x4a>
	}
	else
	{
		PORTC&= 0xfb;
 14e:	aa 98       	cbi	0x15, 2	; 21
	}
	
	TCNT0=0;
 150:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 152:	82 b7       	in	r24, 0x32	; 50
 154:	8e 31       	cpi	r24, 0x1E	; 30
 156:	e8 f3       	brcs	.-6      	; 0x152 <detectb+0x4c>
	
	if(bit_is_clear(PIND,2))
 158:	82 99       	sbic	0x10, 2	; 16
 15a:	02 c0       	rjmp	.+4      	; 0x160 <detectb+0x5a>
	{
		PORTC|=0x02;
 15c:	a9 9a       	sbi	0x15, 1	; 21
 15e:	01 c0       	rjmp	.+2      	; 0x162 <detectb+0x5c>
	}
	else
	{
		PORTC&= 0xfd;
 160:	a9 98       	cbi	0x15, 1	; 21
	}
	
	TCNT0=0;
 162:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 164:	82 b7       	in	r24, 0x32	; 50
 166:	8e 31       	cpi	r24, 0x1E	; 30
 168:	e8 f3       	brcs	.-6      	; 0x164 <detectb+0x5e>
	
	if(bit_is_clear(PIND,2))
 16a:	82 99       	sbic	0x10, 2	; 16
 16c:	02 c0       	rjmp	.+4      	; 0x172 <detectb+0x6c>
	{
		PORTC|=0x01;
 16e:	a8 9a       	sbi	0x15, 0	; 21
 170:	08 95       	ret
	}
	else
	{
		PORTC&= 0xfe;
 172:	a8 98       	cbi	0x15, 0	; 21
 174:	08 95       	ret

00000176 <__vector_4>:
	}
}

SIGNAL(SIG_OVERFLOW2)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	
	detect();
 198:	62 df       	rcall	.-316    	; 0x5e <detect>
	if(flag!=1)
 19a:	80 91 62 00 	lds	r24, 0x0062
 19e:	90 91 63 00 	lds	r25, 0x0063
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	71 f0       	breq	.+28     	; 0x1c2 <__vector_4+0x4c>
	}
	
}
void detectc(void)
{
	TCNT0=0;
 1a6:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 1a8:	82 b7       	in	r24, 0x32	; 50
 1aa:	8e 31       	cpi	r24, 0x1E	; 30
 1ac:	e8 f3       	brcs	.-6      	; 0x1a8 <__vector_4+0x32>
	if(bit_is_clear(PIND,2))
 1ae:	82 99       	sbic	0x10, 2	; 16
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__vector_4+0x40>
	{
		sbi(PORTB,2);
 1b2:	c2 9a       	sbi	0x18, 2	; 24
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <__vector_4+0x42>
		
	}
	else
	{
		cbi(PORTB,2);
 1b6:	c2 98       	cbi	0x18, 2	; 24
	
	detect();
	if(flag!=1)
	{
		detectc();
		TCNT0=0;
 1b8:	12 be       	out	0x32, r1	; 50
		while(TCNT0<142);
 1ba:	82 b7       	in	r24, 0x32	; 50
 1bc:	8e 38       	cpi	r24, 0x8E	; 142
 1be:	e8 f3       	brcs	.-6      	; 0x1ba <__vector_4+0x44>
		detectb();
 1c0:	a2 df       	rcall	.-188    	; 0x106 <detectb>
		TCNT2=TIMER_2_CNT;
	}
	else
	{
		TCNT2=TIMER_2_CNT;
 1c2:	8f e8       	ldi	r24, 0x8F	; 143
 1c4:	84 bd       	out	0x24, r24	; 36
		return;
	}
	
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	87 bb       	out	0x17, r24	; 23
	DDRB=0x04;
	DDRC=0x3F;
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	84 bb       	out	0x14, r24	; 20
	DDRD=0x00;
 1f0:	11 ba       	out	0x11, r1	; 17
	
	
	TCCR0 = TMC8_CK8;               	
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	83 bf       	out	0x33, r24	; 51
    TCCR1A=0x00;
 1f6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=TMC16_CK64;
 1f8:	8e bd       	out	0x2e, r24	; 46
	TCCR2=TMC8_CK1024;
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	85 bd       	out	0x25, r24	; 37
    TIMSK  = _BV(TOIE2);         	// disable TCNT2 overflow
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	89 bf       	out	0x39, r24	; 57
	TCNT2=TIMER_2_CNT;
 202:	8f e8       	ldi	r24, 0x8F	; 143
 204:	84 bd       	out	0x24, r24	; 36
	

	
    sei();                       	// enable interrupts
 206:	78 94       	sei
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x20>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
