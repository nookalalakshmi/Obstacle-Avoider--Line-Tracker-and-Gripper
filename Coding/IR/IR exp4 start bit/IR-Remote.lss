
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00000132  000001a6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000045  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001cd  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000117  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ef  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f0  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000064  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	42 c0       	rjmp	.+132    	; 0x88 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	50 d0       	rcall	.+160    	; 0xfa <main>
  5a:	69 c0       	rjmp	.+210    	; 0x12e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <getstartbit>:
-----------------------------------------------------------------*/



void getstartbit(void)
{
  5e:	12 be       	out	0x32, r1	; 50
	unsigned char count;
	TCNT0 = 0;
	while(bit_is_clear(PIND,2));
  60:	82 9b       	sbis	0x10, 2	; 16
  62:	fe cf       	rjmp	.-4      	; 0x60 <getstartbit+0x2>
	while(!bit_is_clear(PIND,2));
  64:	82 99       	sbic	0x10, 2	; 16
  66:	fe cf       	rjmp	.-4      	; 0x64 <getstartbit+0x6>
	count=TCNT0;
  68:	82 b7       	in	r24, 0x32	; 50
	if(count>25)
  6a:	8a 31       	cpi	r24, 0x1A	; 26
  6c:	40 f0       	brcs	.+16     	; 0x7e <getstartbit+0x20>
	{
		a=1;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 63 00 	sts	0x0063, r25
  76:	80 93 62 00 	sts	0x0062, r24
		sbi(PORTB,2);
  7a:	c2 9a       	sbi	0x18, 2	; 24
  7c:	08 95       	ret
	}
	else
	{
	a=0;
  7e:	10 92 63 00 	sts	0x0063, r1
  82:	10 92 62 00 	sts	0x0062, r1
  86:	08 95       	ret

00000088 <__vector_1>:




SIGNAL(SIG_INTERRUPT0)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
 unsigned char count;
unsigned int IR_input=0;

TCNT0 = 0;
  aa:	12 be       	out	0x32, r1	; 50
while((PIND & 0x04));
  ac:	82 99       	sbic	0x10, 2	; 16
  ae:	fe cf       	rjmp	.-4      	; 0xac <__vector_1+0x24>
count = TCNT0;
  b0:	82 b7       	in	r24, 0x32	; 50

if(count < 69) //to verify silence (4.4 ms long)
  b2:	85 34       	cpi	r24, 0x45	; 69
  b4:	28 f4       	brcc	.+10     	; 0xc0 <__vector_1+0x38>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	97 e2       	ldi	r25, 0x27	; 39
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__vector_1+0x32>
  be:	0c c0       	rjmp	.+24     	; 0xd8 <__vector_1+0x50>
	 
	_delay_ms(40);
	return;
}

getstartbit();
  c0:	ce df       	rcall	.-100    	; 0x5e <getstartbit>
if(a==1)
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	90 91 63 00 	lds	r25, 0x0063
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	21 f4       	brne	.+8      	; 0xd6 <__vector_1+0x4e>
{
	
	TCNT0=0;
  ce:	12 be       	out	0x32, r1	; 50
	while(TCNT0<43);	//Removal of control bit
  d0:	82 b7       	in	r24, 0x32	; 50
  d2:	8b 32       	cpi	r24, 0x2B	; 43
  d4:	e8 f3       	brcs	.-6      	; 0xd0 <__vector_1+0x48>
	return;
	
}
else
{
	cbi(PORTB,2);
  d6:	c2 98       	cbi	0x18, 2	; 24
}


	
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	87 bb       	out	0x17, r24	; 23
	
	
	DDRB=0x04;
	DDRD=0x00;
  fe:	11 ba       	out	0x11, r1	; 17
	
	DDRC=0x3F;				//Set Port C 0-5 pins as output port all bits.
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = TMC8_CK8;               	
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	83 bf       	out	0x33, r24	; 51
    
	
    TIMSK  = 0x00;         	// enable TCNT1 overflow
 108:	19 be       	out	0x39, r1	; 57
	
    GIMSK=_BV(INT0);
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = _BV(ISC01);          	// falling egde: int0
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	85 bf       	out	0x35, r24	; 53

	
    sei();                       	// enable interrupts
 112:	78 94       	sei
	
	for(;;)
	{
		a=0;
 114:	10 92 63 00 	sts	0x0063, r1
 118:	10 92 62 00 	sts	0x0062, r1
		b=0;
 11c:	10 92 65 00 	sts	0x0065, r1
 120:	10 92 64 00 	sts	0x0064, r1
		flag=0;
 124:	10 92 67 00 	sts	0x0067, r1
 128:	10 92 66 00 	sts	0x0066, r1
 12c:	f3 cf       	rjmp	.-26     	; 0x114 <main+0x1a>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
