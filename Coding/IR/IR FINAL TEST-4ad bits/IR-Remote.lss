
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  0000039a  0000040e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000094  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f0  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000150  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000446  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f8  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ee  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	79 c1       	rjmp	.+754    	; 0x2fc <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e9       	ldi	r30, 0x9A	; 154
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8c d1       	rcall	.+792    	; 0x372 <main>
  5a:	9d c1       	rjmp	.+826    	; 0x396 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motormove>:

/*----------------------------------------------------------------
-----------------MOTOR FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/
void motormove(char motor, char state)
{
  5e:	81 33       	cpi	r24, 0x31	; 49
  60:	29 f4       	brne	.+10     	; 0x6c <motormove+0xe>
  62:	a7 e0       	ldi	r26, 0x07	; 7
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	0b c0       	rjmp	.+22     	; 0x82 <motormove+0x24>
	if(motor=='1')
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  6c:	82 33       	cpi	r24, 0x32	; 50
  6e:	29 f4       	brne	.+10     	; 0x7a <motormove+0x1c>
  70:	a0 e0       	ldi	r26, 0x00	; 0
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e1 e0       	ldi	r30, 0x01	; 1
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	04 c0       	rjmp	.+8      	; 0x82 <motormove+0x24>
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	switch (state)
  82:	66 34       	cpi	r22, 0x46	; 70
  84:	61 f0       	breq	.+24     	; 0x9e <motormove+0x40>
  86:	67 34       	cpi	r22, 0x47	; 71
  88:	20 f4       	brcc	.+8      	; 0x92 <motormove+0x34>
  8a:	62 34       	cpi	r22, 0x42	; 66
  8c:	09 f0       	breq	.+2      	; 0x90 <motormove+0x32>
  8e:	59 c0       	rjmp	.+178    	; 0x142 <motormove+0xe4>
  90:	18 c0       	rjmp	.+48     	; 0xc2 <motormove+0x64>
  92:	63 35       	cpi	r22, 0x53	; 83
  94:	59 f1       	breq	.+86     	; 0xec <motormove+0x8e>
  96:	63 37       	cpi	r22, 0x73	; 115
  98:	09 f0       	breq	.+2      	; 0x9c <motormove+0x3e>
  9a:	53 c0       	rjmp	.+166    	; 0x142 <motormove+0xe4>
  9c:	3d c0       	rjmp	.+122    	; 0x118 <motormove+0xba>
	{
	 case 'F':
			sbi(PORTB,n1);
  9e:	48 b3       	in	r20, 0x18	; 24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9c 01       	movw	r18, r24
  a6:	02 c0       	rjmp	.+4      	; 0xac <motormove+0x4e>
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	aa 95       	dec	r26
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <motormove+0x4a>
  b0:	42 2b       	or	r20, r18
  b2:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <motormove+0x5e>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	ea 95       	dec	r30
  be:	e2 f7       	brpl	.-8      	; 0xb8 <motormove+0x5a>
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <motormove+0x86>
			break;

	case 'B':
			sbi(PORTB,n2);
  c2:	48 b3       	in	r20, 0x18	; 24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	9c 01       	movw	r18, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <motormove+0x72>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	ea 95       	dec	r30
  d2:	e2 f7       	brpl	.-8      	; 0xcc <motormove+0x6e>
  d4:	42 2b       	or	r20, r18
  d6:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
  d8:	28 b3       	in	r18, 0x18	; 24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <motormove+0x82>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	aa 95       	dec	r26
  e2:	e2 f7       	brpl	.-8      	; 0xdc <motormove+0x7e>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	c9 01       	movw	r24, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <motormove+0x9c>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	ea 95       	dec	r30
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <motormove+0x98>
  fe:	80 95       	com	r24
 100:	84 23       	and	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
 104:	88 b3       	in	r24, 0x18	; 24
 106:	02 c0       	rjmp	.+4      	; 0x10c <motormove+0xae>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	aa 95       	dec	r26
 10e:	e2 f7       	brpl	.-8      	; 0x108 <motormove+0xaa>
 110:	20 95       	com	r18
 112:	28 23       	and	r18, r24
 114:	28 bb       	out	0x18, r18	; 24
 116:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 118:	48 b3       	in	r20, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <motormove+0xc8>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 95       	dec	r26
 128:	e2 f7       	brpl	.-8      	; 0x122 <motormove+0xc4>
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	02 c0       	rjmp	.+4      	; 0x138 <motormove+0xda>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	ea 95       	dec	r30
 13a:	e2 f7       	brpl	.-8      	; 0x134 <motormove+0xd6>
 13c:	20 95       	com	r18
 13e:	28 23       	and	r18, r24
 140:	28 bb       	out	0x18, r18	; 24
 142:	08 95       	ret

00000144 <robotmove>:
			break;
	}	
}
//***************************************
void robotmove(char mode)
{
 144:	82 35       	cpi	r24, 0x52	; 82
 146:	c9 f0       	breq	.+50     	; 0x17a <robotmove+0x36>
 148:	83 35       	cpi	r24, 0x53	; 83
 14a:	38 f4       	brcc	.+14     	; 0x15a <robotmove+0x16>
 14c:	86 34       	cpi	r24, 0x46	; 70
 14e:	89 f0       	breq	.+34     	; 0x172 <robotmove+0x2e>
 150:	8c 34       	cpi	r24, 0x4C	; 76
 152:	a9 f0       	breq	.+42     	; 0x17e <robotmove+0x3a>
 154:	82 34       	cpi	r24, 0x42	; 66
 156:	61 f5       	brne	.+88     	; 0x1b0 <robotmove+0x6c>
 158:	0e c0       	rjmp	.+28     	; 0x176 <robotmove+0x32>
 15a:	8c 36       	cpi	r24, 0x6C	; 108
 15c:	b9 f0       	breq	.+46     	; 0x18c <robotmove+0x48>
 15e:	8d 36       	cpi	r24, 0x6D	; 109
 160:	18 f4       	brcc	.+6      	; 0x168 <robotmove+0x24>
 162:	83 35       	cpi	r24, 0x53	; 83
 164:	29 f5       	brne	.+74     	; 0x1b0 <robotmove+0x6c>
 166:	1e c0       	rjmp	.+60     	; 0x1a4 <robotmove+0x60>
 168:	82 37       	cpi	r24, 0x72	; 114
 16a:	59 f0       	breq	.+22     	; 0x182 <robotmove+0x3e>
 16c:	83 37       	cpi	r24, 0x73	; 115
 16e:	01 f5       	brne	.+64     	; 0x1b0 <robotmove+0x6c>
 170:	12 c0       	rjmp	.+36     	; 0x196 <robotmove+0x52>

	switch(mode)
	{
		case 'F':
		 motormove('1','F');
 172:	66 e4       	ldi	r22, 0x46	; 70
 174:	07 c0       	rjmp	.+14     	; 0x184 <robotmove+0x40>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 176:	62 e4       	ldi	r22, 0x42	; 66
 178:	0a c0       	rjmp	.+20     	; 0x18e <robotmove+0x4a>
		 motormove('2','B');
		break;
		
		case 'R':
		 motormove('1','B');
 17a:	62 e4       	ldi	r22, 0x42	; 66
 17c:	0d c0       	rjmp	.+26     	; 0x198 <robotmove+0x54>
		 motormove('2','s');
		break;
		
		case 'L':
		 motormove('1','s');
 17e:	63 e7       	ldi	r22, 0x73	; 115
 180:	06 c0       	rjmp	.+12     	; 0x18e <robotmove+0x4a>
		 motormove('2','B');
		break;
		
		case 'r':
		 motormove('1','B');
 182:	62 e4       	ldi	r22, 0x42	; 66
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	6b df       	rcall	.-298    	; 0x5e <motormove>
		 motormove('2','F');
 188:	66 e4       	ldi	r22, 0x46	; 70
 18a:	09 c0       	rjmp	.+18     	; 0x19e <robotmove+0x5a>
		break;
		
		case 'l':
		 motormove('1','F');
 18c:	66 e4       	ldi	r22, 0x46	; 70
 18e:	81 e3       	ldi	r24, 0x31	; 49
 190:	66 df       	rcall	.-308    	; 0x5e <motormove>
		 motormove('2','B');
 192:	62 e4       	ldi	r22, 0x42	; 66
 194:	04 c0       	rjmp	.+8      	; 0x19e <robotmove+0x5a>
		break;
		
		case 's':
		 motormove('1','s');
 196:	63 e7       	ldi	r22, 0x73	; 115
 198:	81 e3       	ldi	r24, 0x31	; 49
 19a:	61 df       	rcall	.-318    	; 0x5e <motormove>
		 motormove('2','s');
 19c:	63 e7       	ldi	r22, 0x73	; 115
 19e:	82 e3       	ldi	r24, 0x32	; 50
 1a0:	5e df       	rcall	.-324    	; 0x5e <motormove>
 1a2:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','S');
 1a4:	63 e5       	ldi	r22, 0x53	; 83
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	5a df       	rcall	.-332    	; 0x5e <motormove>
		 motormove('2','S');
 1aa:	63 e5       	ldi	r22, 0x53	; 83
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	57 df       	rcall	.-338    	; 0x5e <motormove>
 1b0:	08 95       	ret

000001b2 <call_motor>:

/*----------------------------------------------------------------
-----------------REMOTE MOTOR INTERFACE FUNCTION------------------
-----------------------------------------------------------------*/
void call_motor(void)
{
 1b2:	85 b3       	in	r24, 0x15	; 21
	unsigned int code=0;
	code=PORTC;
	switch(PORTC)
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	84 32       	cpi	r24, 0x24	; 36
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <call_motor+0x14>
 1ba:	86 32       	cpi	r24, 0x26	; 38
 1bc:	39 f4       	brne	.+14     	; 0x1cc <call_motor+0x1a>
	{
		case 0x26:
			sbi(PORTD,1);
 1be:	91 9a       	sbi	0x12, 1	; 18
			robotmove('F');
 1c0:	86 e4       	ldi	r24, 0x46	; 70
 1c2:	c0 df       	rcall	.-128    	; 0x144 <robotmove>
 1c4:	08 95       	ret
		break;
		
		case 0x24:
			cbi(PORTD,1);
 1c6:	91 98       	cbi	0x12, 1	; 18
			robotmove('B');
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	bc df       	rcall	.-136    	; 0x144 <robotmove>
 1cc:	08 95       	ret

000001ce <detect_start>:

/*----------------------------------------------------------------
-----------------REMOTE FUNCTIONS-------------------------------------
-----------------------------------------------------------------*/	
void detect_start(void)
{
 1ce:	1d bc       	out	0x2d, r1	; 45
 1d0:	1c bc       	out	0x2c, r1	; 44
		TCNT0=0;
		while(PIND & 0x04);
		count=TCNT0;
		if(count<55)
		{
			flag=1;
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	1e c0       	rjmp	.+60     	; 0x214 <detect_start+0x46>
	
	TCNT1=0;
	
	while(TCNT1<2047)
	{
		TCNT0=0;
 1d8:	12 be       	out	0x32, r1	; 50
		while(PIND & 0x04);
 1da:	82 99       	sbic	0x10, 2	; 16
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <detect_start+0xc>
		count=TCNT0;
 1de:	82 b7       	in	r24, 0x32	; 50
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 65 00 	sts	0x0065, r25
 1e6:	80 93 64 00 	sts	0x0064, r24
		if(count<55)
 1ea:	80 91 64 00 	lds	r24, 0x0064
 1ee:	90 91 65 00 	lds	r25, 0x0065
 1f2:	c7 97       	sbiw	r24, 0x37	; 55
 1f4:	2c f4       	brge	.+10     	; 0x200 <detect_start+0x32>
		{
			flag=1;
 1f6:	30 93 63 00 	sts	0x0063, r19
 1fa:	20 93 62 00 	sts	0x0062, r18
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <detect_start+0x3a>
		}
		else
		{
			flag=0;
 200:	10 92 63 00 	sts	0x0063, r1
 204:	10 92 62 00 	sts	0x0062, r1
		}
			
		
		if(flag==0)
 208:	80 91 62 00 	lds	r24, 0x0062
 20c:	90 91 63 00 	lds	r25, 0x0063
 210:	89 2b       	or	r24, r25
 212:	29 f0       	breq	.+10     	; 0x21e <detect_start+0x50>
void detect_start(void)
{
	
	TCNT1=0;
	
	while(TCNT1<2047)
 214:	8c b5       	in	r24, 0x2c	; 44
 216:	9d b5       	in	r25, 0x2d	; 45
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	97 40       	sbci	r25, 0x07	; 7
 21c:	e8 f2       	brcs	.-70     	; 0x1d8 <detect_start+0xa>
		{
			break;
		}
	}

	if(flag==1)
 21e:	80 91 62 00 	lds	r24, 0x0062
 222:	90 91 63 00 	lds	r25, 0x0063
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	39 f1       	breq	.+78     	; 0x278 <detect_start+0xaa>
		
		return;
	}
	else
	{
		TCNT1=0;
 22a:	1d bc       	out	0x2d, r1	; 45
 22c:	1c bc       	out	0x2c, r1	; 44
		TCNT0=0;
 22e:	12 be       	out	0x32, r1	; 50
		
		
			if(bit_is_clear(PIND,2))
 230:	82 99       	sbic	0x10, 2	; 16
 232:	05 c0       	rjmp	.+10     	; 0x23e <detect_start+0x70>
			{	
				flag=0;
 234:	10 92 63 00 	sts	0x0063, r1
 238:	10 92 62 00 	sts	0x0062, r1
 23c:	06 c0       	rjmp	.+12     	; 0x24a <detect_start+0x7c>
				
			}
			else
			{
				flag=1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 63 00 	sts	0x0063, r25
 246:	80 93 62 00 	sts	0x0062, r24
				
				
			}
	
		if(flag==0)
 24a:	80 91 62 00 	lds	r24, 0x0062
 24e:	90 91 63 00 	lds	r25, 0x0063
 252:	89 2b       	or	r24, r25
 254:	89 f4       	brne	.+34     	; 0x278 <detect_start+0xaa>
		{
			TCNT0=0;
 256:	12 be       	out	0x32, r1	; 50
			while(TCNT0<30);
 258:	82 b7       	in	r24, 0x32	; 50
 25a:	8e 31       	cpi	r24, 0x1E	; 30
 25c:	e8 f3       	brcs	.-6      	; 0x258 <detect_start+0x8a>
			if(bit_is_clear(PIND,2))
 25e:	82 99       	sbic	0x10, 2	; 16
 260:	05 c0       	rjmp	.+10     	; 0x26c <detect_start+0x9e>
			{
				
				flag=0;
 262:	10 92 63 00 	sts	0x0063, r1
 266:	10 92 62 00 	sts	0x0062, r1
 26a:	08 95       	ret
				
			}
			else
			{
				flag=1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 63 00 	sts	0x0063, r25
 274:	80 93 62 00 	sts	0x0062, r24
 278:	08 95       	ret

0000027a <detect_control>:
		
	}
	
}
void detect_control(void)
{
 27a:	12 be       	out	0x32, r1	; 50
	TCNT0=0;
	while(TCNT0<30);
 27c:	82 b7       	in	r24, 0x32	; 50
 27e:	8e 31       	cpi	r24, 0x1E	; 30
 280:	e8 f3       	brcs	.-6      	; 0x27c <detect_control+0x2>
	if(bit_is_clear(PIND,2))
 282:	82 99       	sbic	0x10, 2	; 16
 284:	02 c0       	rjmp	.+4      	; 0x28a <detect_control+0x10>
	{
		sbi(PORTB,2);
 286:	c2 9a       	sbi	0x18, 2	; 24
 288:	08 95       	ret
		
	}
	else
	{
		cbi(PORTB,2);
 28a:	c2 98       	cbi	0x18, 2	; 24
 28c:	08 95       	ret

0000028e <detect_data>:
	}
}
void detect_data(void)
{
 28e:	12 be       	out	0x32, r1	; 50
	TCNT0=0;
	while(TCNT0<30);
 290:	82 b7       	in	r24, 0x32	; 50
 292:	8e 31       	cpi	r24, 0x1E	; 30
 294:	e8 f3       	brcs	.-6      	; 0x290 <detect_data+0x2>
	
	if(bit_is_clear(PIND,2))
 296:	82 99       	sbic	0x10, 2	; 16
 298:	02 c0       	rjmp	.+4      	; 0x29e <detect_data+0x10>
	{
		PORTC|=0x20;
 29a:	ad 9a       	sbi	0x15, 5	; 21
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <detect_data+0x12>
	}
	else
	{
		PORTC&= 0xdf;
 29e:	ad 98       	cbi	0x15, 5	; 21
	}
	
	TCNT0=0;
 2a0:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 2a2:	82 b7       	in	r24, 0x32	; 50
 2a4:	8e 31       	cpi	r24, 0x1E	; 30
 2a6:	e8 f3       	brcs	.-6      	; 0x2a2 <detect_data+0x14>
	
	if(bit_is_clear(PIND,2))
 2a8:	82 99       	sbic	0x10, 2	; 16
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <detect_data+0x22>
	{
		PORTC|=0x10;
 2ac:	ac 9a       	sbi	0x15, 4	; 21
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <detect_data+0x24>
	}
	else
	{
		PORTC&= 0xef;
 2b0:	ac 98       	cbi	0x15, 4	; 21
	}
	
	TCNT0=0;
 2b2:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 2b4:	82 b7       	in	r24, 0x32	; 50
 2b6:	8e 31       	cpi	r24, 0x1E	; 30
 2b8:	e8 f3       	brcs	.-6      	; 0x2b4 <detect_data+0x26>
	
	if(bit_is_clear(PIND,2))
 2ba:	82 99       	sbic	0x10, 2	; 16
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <detect_data+0x34>
	{
		
		PORTC|=0x08;
 2be:	ab 9a       	sbi	0x15, 3	; 21
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <detect_data+0x36>
	}
	else
	{
		
		PORTC&= 0xf7;
 2c2:	ab 98       	cbi	0x15, 3	; 21
	}
	
	TCNT0=0;
 2c4:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 2c6:	82 b7       	in	r24, 0x32	; 50
 2c8:	8e 31       	cpi	r24, 0x1E	; 30
 2ca:	e8 f3       	brcs	.-6      	; 0x2c6 <detect_data+0x38>
	
	if(bit_is_clear(PIND,2))
 2cc:	82 99       	sbic	0x10, 2	; 16
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <detect_data+0x46>
	{
		
		PORTC|=0x04;
 2d0:	aa 9a       	sbi	0x15, 2	; 21
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <detect_data+0x48>
	}
	else
	{
		
		PORTC&= 0xfb;
 2d4:	aa 98       	cbi	0x15, 2	; 21
	}
	
	
	
	TCNT0=0;
 2d6:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 2d8:	82 b7       	in	r24, 0x32	; 50
 2da:	8e 31       	cpi	r24, 0x1E	; 30
 2dc:	e8 f3       	brcs	.-6      	; 0x2d8 <detect_data+0x4a>
	
	if(bit_is_clear(PIND,2))
 2de:	82 99       	sbic	0x10, 2	; 16
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <detect_data+0x58>
	{
		PORTC|=0x02;
 2e2:	a9 9a       	sbi	0x15, 1	; 21
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <detect_data+0x5a>
	}
	else
	{
		PORTC&= 0xfd;
 2e6:	a9 98       	cbi	0x15, 1	; 21
	}
	
	TCNT0=0;
 2e8:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 2ea:	82 b7       	in	r24, 0x32	; 50
 2ec:	8e 31       	cpi	r24, 0x1E	; 30
 2ee:	e8 f3       	brcs	.-6      	; 0x2ea <detect_data+0x5c>
	
	if(bit_is_clear(PIND,2))
 2f0:	82 99       	sbic	0x10, 2	; 16
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <detect_data+0x6a>
	{
		
		PORTC|=0x01;
 2f4:	a8 9a       	sbi	0x15, 0	; 21
 2f6:	08 95       	ret
		
	}
	else
	{	
		
		PORTC&= 0xfe;
 2f8:	a8 98       	cbi	0x15, 0	; 21
 2fa:	08 95       	ret

000002fc <__vector_4>:
	}
	
}

SIGNAL(SIG_OVERFLOW2)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	
	detect_start();
 31e:	57 df       	rcall	.-338    	; 0x1ce <detect_start>
	if(flag!=1)
 320:	80 91 62 00 	lds	r24, 0x0062
 324:	90 91 63 00 	lds	r25, 0x0063
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	81 f0       	breq	.+32     	; 0x34c <__vector_4+0x50>
	}
	
}
void detect_control(void)
{
	TCNT0=0;
 32c:	12 be       	out	0x32, r1	; 50
	while(TCNT0<30);
 32e:	82 b7       	in	r24, 0x32	; 50
 330:	8e 31       	cpi	r24, 0x1E	; 30
 332:	e8 f3       	brcs	.-6      	; 0x32e <__vector_4+0x32>
	if(bit_is_clear(PIND,2))
 334:	82 99       	sbic	0x10, 2	; 16
 336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_4+0x40>
	{
		sbi(PORTB,2);
 338:	c2 9a       	sbi	0x18, 2	; 24
 33a:	01 c0       	rjmp	.+2      	; 0x33e <__vector_4+0x42>
		
	}
	else
	{
		cbi(PORTB,2);
 33c:	c2 98       	cbi	0x18, 2	; 24
	
	detect_start();
	if(flag!=1)
	{
		detect_control();
		TCNT0=0;
 33e:	12 be       	out	0x32, r1	; 50
		PORTC=0x00;
 340:	15 ba       	out	0x15, r1	; 21
		while(TCNT0<114);
 342:	82 b7       	in	r24, 0x32	; 50
 344:	82 37       	cpi	r24, 0x72	; 114
 346:	e8 f3       	brcs	.-6      	; 0x342 <__vector_4+0x46>
		detect_data();
 348:	a2 df       	rcall	.-188    	; 0x28e <detect_data>
		call_motor();
 34a:	33 df       	rcall	.-410    	; 0x1b2 <call_motor>
		TCNT2=TIMER_2_CNT;
	}	
	else
	{
		TCNT2=TIMER_2_CNT;
 34c:	86 e7       	ldi	r24, 0x76	; 118
 34e:	84 bd       	out	0x24, r24	; 36
		return;
	}
	
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 372:	87 ec       	ldi	r24, 0xC7	; 199
 374:	87 bb       	out	0x17, r24	; 23
	DDRB=0xC7;
	DDRC=0x3F;
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	84 bb       	out	0x14, r24	; 20
	DDRD=0x02;
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	81 bb       	out	0x11, r24	; 17
	
	
	TCCR0 = TMC8_CK8;               	
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	83 bf       	out	0x33, r24	; 51
    TCCR1A=0x00;
 382:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=TMC16_CK64;
 384:	8e bd       	out	0x2e, r24	; 46
	TCCR2=TMC8_CK1024;
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	85 bd       	out	0x25, r24	; 37
    TIMSK  = _BV(TOIE2);         	// disable TCNT2 overflow
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	89 bf       	out	0x39, r24	; 57
	TCNT2=TIMER_2_CNT;
 38e:	86 e7       	ldi	r24, 0x76	; 118
 390:	84 bd       	out	0x24, r24	; 36
	

	
    sei();                       	// enable interrupts
 392:	78 94       	sei
 394:	ff cf       	rjmp	.-2      	; 0x394 <main+0x22>

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
