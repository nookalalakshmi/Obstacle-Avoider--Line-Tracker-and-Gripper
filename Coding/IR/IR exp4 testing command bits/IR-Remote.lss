
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  0000021c  00000290  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000054  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024d  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015d  00000000  00000000  00000551  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000305  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000114  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	96 c0       	rjmp	.+300    	; 0x130 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c5 d0       	rcall	.+394    	; 0x1e4 <main>
  5a:	de c0       	rjmp	.+444    	; 0x218 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <getstartbit>:
-----------------------------------------------------------------*/



void getstartbit(void)
{
  5e:	12 be       	out	0x32, r1	; 50
	unsigned char count;
	TCNT0 = 0;
	while(bit_is_clear(PIND,2));
  60:	82 9b       	sbis	0x10, 2	; 16
  62:	fe cf       	rjmp	.-4      	; 0x60 <getstartbit+0x2>
	while(!bit_is_clear(PIND,2));
  64:	82 99       	sbic	0x10, 2	; 16
  66:	fe cf       	rjmp	.-4      	; 0x64 <getstartbit+0x6>
	count=TCNT0;
  68:	82 b7       	in	r24, 0x32	; 50
	if(count>25)
  6a:	8a 31       	cpi	r24, 0x1A	; 26
  6c:	38 f0       	brcs	.+14     	; 0x7c <getstartbit+0x1e>
	{
		a=1;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 63 00 	sts	0x0063, r25
  76:	80 93 62 00 	sts	0x0062, r24
  7a:	08 95       	ret
		
	}
	else
	{
	a=0;
  7c:	10 92 63 00 	sts	0x0063, r1
  80:	10 92 62 00 	sts	0x0062, r1
  84:	08 95       	ret

00000086 <getdatabit>:
	
	
}

unsigned char getdatabit(void)
{
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	51 e0       	ldi	r21, 0x01	; 1
			{
				
				TCNT0=0;
				while(TCNT0<16);
				pulseCount++;
				code = code & ~(1 << (pulseCount-1));
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	70 e0       	ldi	r23, 0x00	; 0
pulseCount = 0;


	while(pulseCount < 6)
	{
		TCNT0=0;
  92:	12 be       	out	0x32, r1	; 50
		if(bit_is_clear(PIND,2))
  94:	82 99       	sbic	0x10, 2	; 16
  96:	1b c0       	rjmp	.+54     	; 0xce <getdatabit+0x48>
		{
			while(bit_is_clear(PIND,2));
  98:	82 9b       	sbis	0x10, 2	; 16
  9a:	fe cf       	rjmp	.-4      	; 0x98 <getdatabit+0x12>
			count=TCNT0;
  9c:	82 b7       	in	r24, 0x32	; 50
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 69 00 	sts	0x0069, r25
  a4:	80 93 68 00 	sts	0x0068, r24
			if(count>16)
  a8:	80 91 68 00 	lds	r24, 0x0068
  ac:	90 91 69 00 	lds	r25, 0x0069
  b0:	41 97       	sbiw	r24, 0x11	; 17
  b2:	dc f4       	brge	.+54     	; 0xea <getdatabit+0x64>
				break;
			}
			else
			{
				
				TCNT0=0;
  b4:	12 be       	out	0x32, r1	; 50
				while(TCNT0<16);
  b6:	82 b7       	in	r24, 0x32	; 50
  b8:	80 31       	cpi	r24, 0x10	; 16
  ba:	e8 f3       	brcs	.-6      	; 0xb6 <getdatabit+0x30>
				pulseCount++;
				code = code | (1 << (pulseCount-1));
  bc:	cb 01       	movw	r24, r22
  be:	02 2e       	mov	r0, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <getdatabit+0x40>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <getdatabit+0x3c>
  ca:	48 2b       	or	r20, r24
  cc:	22 c0       	rjmp	.+68     	; 0x112 <getdatabit+0x8c>
			}
		}
		else
		{
			while(!bit_is_clear(PIND,2));
  ce:	82 99       	sbic	0x10, 2	; 16
  d0:	fe cf       	rjmp	.-4      	; 0xce <getdatabit+0x48>
			count=TCNT0;
  d2:	82 b7       	in	r24, 0x32	; 50
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 69 00 	sts	0x0069, r25
  da:	80 93 68 00 	sts	0x0068, r24
			if(count>16)
  de:	80 91 68 00 	lds	r24, 0x0068
  e2:	90 91 69 00 	lds	r25, 0x0069
  e6:	41 97       	sbiw	r24, 0x11	; 17
  e8:	3c f0       	brlt	.+14     	; 0xf8 <getdatabit+0x72>
			{
				
				flag=1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 67 00 	sts	0x0067, r25
  f2:	80 93 66 00 	sts	0x0066, r24
  f6:	13 c0       	rjmp	.+38     	; 0x11e <getdatabit+0x98>
				break;
			}
			else
			{
				
				TCNT0=0;
  f8:	12 be       	out	0x32, r1	; 50
				while(TCNT0<16);
  fa:	82 b7       	in	r24, 0x32	; 50
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	e8 f3       	brcs	.-6      	; 0xfa <getdatabit+0x74>
				pulseCount++;
				code = code & ~(1 << (pulseCount-1));
 100:	cb 01       	movw	r24, r22
 102:	02 2e       	mov	r0, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <getdatabit+0x84>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <getdatabit+0x80>
 10e:	80 95       	com	r24
 110:	48 23       	and	r20, r24
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	5f 5f       	subi	r21, 0xFF	; 255
{
unsigned char pulseCount=0, code = 0;
pulseCount = 0;


	while(pulseCount < 6)
 118:	57 30       	cpi	r21, 0x07	; 7
 11a:	09 f0       	breq	.+2      	; 0x11e <getdatabit+0x98>
 11c:	ba cf       	rjmp	.-140    	; 0x92 <getdatabit+0xc>
				pulseCount++;
				code = code & ~(1 << (pulseCount-1));
			}
		}
	}
	if(flag!=1)
 11e:	80 91 66 00 	lds	r24, 0x0066
 122:	90 91 67 00 	lds	r25, 0x0067
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	09 f4       	brne	.+2      	; 0x12c <getdatabit+0xa6>
 12a:	40 e0       	ldi	r20, 0x00	; 0
	else
	{
		return(0);
	}

}
 12c:	84 2f       	mov	r24, r20
 12e:	08 95       	ret

00000130 <__vector_1>:




SIGNAL(SIG_INTERRUPT0)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
 unsigned char count,code;
unsigned int IR_input=0;

TCNT0 = 0;
 152:	12 be       	out	0x32, r1	; 50
while((PIND & 0x04));
 154:	82 99       	sbic	0x10, 2	; 16
 156:	fe cf       	rjmp	.-4      	; 0x154 <__vector_1+0x24>
count = TCNT0;
 158:	82 b7       	in	r24, 0x32	; 50

if(count < 55) //to verify silence (3.5 ms long)
 15a:	87 33       	cpi	r24, 0x37	; 55
 15c:	28 f4       	brcc	.+10     	; 0x168 <__vector_1+0x38>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	80 e1       	ldi	r24, 0x10	; 16
 160:	97 e2       	ldi	r25, 0x27	; 39
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <__vector_1+0x32>
 166:	2d c0       	rjmp	.+90     	; 0x1c2 <__vector_1+0x92>


void getstartbit(void)
{
	unsigned char count;
	TCNT0 = 0;
 168:	12 be       	out	0x32, r1	; 50
	while(bit_is_clear(PIND,2));
 16a:	82 9b       	sbis	0x10, 2	; 16
 16c:	fe cf       	rjmp	.-4      	; 0x16a <__vector_1+0x3a>
	while(!bit_is_clear(PIND,2));
 16e:	82 99       	sbic	0x10, 2	; 16
 170:	fe cf       	rjmp	.-4      	; 0x16e <__vector_1+0x3e>
	count=TCNT0;
 172:	82 b7       	in	r24, 0x32	; 50
	if(count>25)
 174:	8a 31       	cpi	r24, 0x1A	; 26
 176:	38 f0       	brcs	.+14     	; 0x186 <__vector_1+0x56>
	{
		a=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 63 00 	sts	0x0063, r25
 180:	80 93 62 00 	sts	0x0062, r24
 184:	04 c0       	rjmp	.+8      	; 0x18e <__vector_1+0x5e>
		
	}
	else
	{
	a=0;
 186:	10 92 63 00 	sts	0x0063, r1
 18a:	10 92 62 00 	sts	0x0062, r1
	_delay_ms(40);
	return;
}

getstartbit();
if(a==1)
 18e:	80 91 62 00 	lds	r24, 0x0062
 192:	90 91 63 00 	lds	r25, 0x0063
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_1+0x90>
{
	
	TCNT0=0;
 19a:	12 be       	out	0x32, r1	; 50
	
	while(TCNT0<43);	//not to consider control bit
 19c:	82 b7       	in	r24, 0x32	; 50
 19e:	8b 32       	cpi	r24, 0x2B	; 43
 1a0:	e8 f3       	brcs	.-6      	; 0x19c <__vector_1+0x6c>
	TCNT0=0;
 1a2:	12 be       	out	0x32, r1	; 50
	while(TCNT0<141);	//not to consider address bits
 1a4:	82 b7       	in	r24, 0x32	; 50
 1a6:	8d 38       	cpi	r24, 0x8D	; 141
 1a8:	e8 f3       	brcs	.-6      	; 0x1a4 <__vector_1+0x74>
	TCNT0=0;
 1aa:	12 be       	out	0x32, r1	; 50
	//while(TCNT0<141);	//not consideing first 5.5 command bits
	PORTC=0x00;
 1ac:	15 ba       	out	0x15, r1	; 21
	
	code=getdatabit();
 1ae:	6b df       	rcall	.-298    	; 0x86 <getdatabit>
 1b0:	98 2f       	mov	r25, r24

	if(code!=0)
 1b2:	88 23       	and	r24, r24
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <__vector_1+0x92>
	{
		IR_input = ((unsigned int)code);
		sbi(PORTB,2);
 1b6:	c2 9a       	sbi	0x18, 2	; 24
		PORTC|=IR_input;
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	89 2b       	or	r24, r25
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_1+0x92>
	return;
	
}
else
{
	cbi(PORTB,2);
 1c0:	c2 98       	cbi	0x18, 2	; 24
}


	
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	87 bb       	out	0x17, r24	; 23
	
	
	DDRB=0x04;
	DDRD=0x00;
 1e8:	11 ba       	out	0x11, r1	; 17
	
	DDRC=0x3F;				//Set Port C 0-5 pins as output port all bits.
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = TMC8_CK8;               	
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	83 bf       	out	0x33, r24	; 51
    
	
    TIMSK  = 0x00;         	// enable TCNT1 overflow
 1f2:	19 be       	out	0x39, r1	; 57
	
    GIMSK=_BV(INT0);
 1f4:	80 e4       	ldi	r24, 0x40	; 64
 1f6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = _BV(ISC01);          	// falling egde: int0
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	85 bf       	out	0x35, r24	; 53

	
    sei();                       	// enable interrupts
 1fc:	78 94       	sei
	
	for(;;)
	{
		a=0;
 1fe:	10 92 63 00 	sts	0x0063, r1
 202:	10 92 62 00 	sts	0x0062, r1
		b=0;
 206:	10 92 65 00 	sts	0x0065, r1
 20a:	10 92 64 00 	sts	0x0064, r1
		flag=0;
 20e:	10 92 67 00 	sts	0x0067, r1
 212:	10 92 66 00 	sts	0x0066, r1
 216:	f3 cf       	rjmp	.-26     	; 0x1fe <main+0x1a>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
