
motorIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000046  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000210  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015c  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000247  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e4  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000109  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  8a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
-----------------------------------------------------------------*/


SIGNAL(SIG_INTERRUPT0)     
/* signal handler for external interrupt int0 */
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
			sbi(PORTB,2);			//LED ON
  9c:	c2 9a       	sbi	0x18, 2	; 24
}
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <motormove>:
	if(motor=='1')
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  a8:	82 33       	cpi	r24, 0x32	; 50
  aa:	29 f4       	brne	.+10     	; 0xb6 <motormove+0xe>
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	04 c0       	rjmp	.+8      	; 0xbe <motormove+0x16>
  b6:	a7 e0       	ldi	r26, 0x07	; 7
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e6 e0       	ldi	r30, 0x06	; 6
  bc:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
	switch (state)
  be:	66 34       	cpi	r22, 0x46	; 70
  c0:	61 f0       	breq	.+24     	; 0xda <motormove+0x32>
  c2:	67 34       	cpi	r22, 0x47	; 71
  c4:	20 f4       	brcc	.+8      	; 0xce <motormove+0x26>
  c6:	62 34       	cpi	r22, 0x42	; 66
  c8:	09 f0       	breq	.+2      	; 0xcc <motormove+0x24>
  ca:	59 c0       	rjmp	.+178    	; 0x17e <motormove+0xd6>
  cc:	18 c0       	rjmp	.+48     	; 0xfe <motormove+0x56>
  ce:	63 35       	cpi	r22, 0x53	; 83
  d0:	59 f1       	breq	.+86     	; 0x128 <motormove+0x80>
  d2:	63 37       	cpi	r22, 0x73	; 115
  d4:	09 f0       	breq	.+2      	; 0xd8 <motormove+0x30>
  d6:	53 c0       	rjmp	.+166    	; 0x17e <motormove+0xd6>
  d8:	3d c0       	rjmp	.+122    	; 0x154 <motormove+0xac>
	{
	 case 'F':
			sbi(PORTB,n1);
  da:	48 b3       	in	r20, 0x18	; 24
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9c 01       	movw	r18, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <motormove+0x40>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	aa 95       	dec	r26
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <motormove+0x3c>
  ec:	42 2b       	or	r20, r18
  ee:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  f0:	28 b3       	in	r18, 0x18	; 24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <motormove+0x50>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	ea 95       	dec	r30
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <motormove+0x4c>
  fc:	11 c0       	rjmp	.+34     	; 0x120 <motormove+0x78>
			break;

	case 'B':
			sbi(PORTB,n2);
  fe:	48 b3       	in	r20, 0x18	; 24
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9c 01       	movw	r18, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <motormove+0x64>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	ea 95       	dec	r30
 10e:	e2 f7       	brpl	.-8      	; 0x108 <motormove+0x60>
 110:	42 2b       	or	r20, r18
 112:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
 114:	28 b3       	in	r18, 0x18	; 24
 116:	02 c0       	rjmp	.+4      	; 0x11c <motormove+0x74>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	aa 95       	dec	r26
 11e:	e2 f7       	brpl	.-8      	; 0x118 <motormove+0x70>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	88 bb       	out	0x18, r24	; 24
 126:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
 128:	48 b3       	in	r20, 0x18	; 24
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	c9 01       	movw	r24, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <motormove+0x8e>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	ea 95       	dec	r30
 138:	e2 f7       	brpl	.-8      	; 0x132 <motormove+0x8a>
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
 140:	88 b3       	in	r24, 0x18	; 24
 142:	02 c0       	rjmp	.+4      	; 0x148 <motormove+0xa0>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	aa 95       	dec	r26
 14a:	e2 f7       	brpl	.-8      	; 0x144 <motormove+0x9c>
 14c:	20 95       	com	r18
 14e:	28 23       	and	r18, r24
 150:	28 bb       	out	0x18, r18	; 24
 152:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 154:	48 b3       	in	r20, 0x18	; 24
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	c9 01       	movw	r24, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <motormove+0xba>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	aa 95       	dec	r26
 164:	e2 f7       	brpl	.-8      	; 0x15e <motormove+0xb6>
 166:	80 95       	com	r24
 168:	84 23       	and	r24, r20
 16a:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <motormove+0xcc>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	ea 95       	dec	r30
 176:	e2 f7       	brpl	.-8      	; 0x170 <motormove+0xc8>
 178:	20 95       	com	r18
 17a:	28 23       	and	r18, r24
 17c:	28 bb       	out	0x18, r18	; 24
 17e:	08 95       	ret

00000180 <robotmove>:
}

void robotmove(char mode)
{

	switch(mode)
 180:	8c 34       	cpi	r24, 0x4C	; 76
 182:	91 f0       	breq	.+36     	; 0x1a8 <robotmove+0x28>
 184:	8d 34       	cpi	r24, 0x4D	; 77
 186:	28 f4       	brcc	.+10     	; 0x192 <robotmove+0x12>
 188:	82 34       	cpi	r24, 0x42	; 66
 18a:	59 f0       	breq	.+22     	; 0x1a2 <robotmove+0x22>
 18c:	86 34       	cpi	r24, 0x46	; 70
 18e:	21 f5       	brne	.+72     	; 0x1d8 <robotmove+0x58>
 190:	05 c0       	rjmp	.+10     	; 0x19c <robotmove+0x1c>
 192:	82 35       	cpi	r24, 0x52	; 82
 194:	81 f0       	breq	.+32     	; 0x1b6 <robotmove+0x36>
 196:	83 35       	cpi	r24, 0x53	; 83
 198:	f9 f4       	brne	.+62     	; 0x1d8 <robotmove+0x58>
 19a:	16 c0       	rjmp	.+44     	; 0x1c8 <robotmove+0x48>
	{
		case 'F':
		 motormove('1','F');
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	66 e4       	ldi	r22, 0x46	; 70
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <robotmove+0x2c>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 1a2:	81 e3       	ldi	r24, 0x31	; 49
 1a4:	62 e4       	ldi	r22, 0x42	; 66
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <robotmove+0x3a>
		 motormove('2','B');
		break;
		
		case 'L':
		 motormove('1','B');
 1a8:	81 e3       	ldi	r24, 0x31	; 49
 1aa:	62 e4       	ldi	r22, 0x42	; 66
 1ac:	0e 94 54 00 	call	0xa8	; 0xa8 <motormove>
		 motormove('2','F');
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	66 e4       	ldi	r22, 0x46	; 70
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <robotmove+0x42>
		break;
		
		case 'R':
		 motormove('1','F');
 1b6:	81 e3       	ldi	r24, 0x31	; 49
 1b8:	66 e4       	ldi	r22, 0x46	; 70
 1ba:	0e 94 54 00 	call	0xa8	; 0xa8 <motormove>
		 motormove('2','B');
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	62 e4       	ldi	r22, 0x42	; 66
 1c2:	0e 94 54 00 	call	0xa8	; 0xa8 <motormove>
 1c6:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','s');
 1c8:	81 e3       	ldi	r24, 0x31	; 49
 1ca:	63 e7       	ldi	r22, 0x73	; 115
 1cc:	0e 94 54 00 	call	0xa8	; 0xa8 <motormove>
		 motormove('2','s');
 1d0:	82 e3       	ldi	r24, 0x32	; 50
 1d2:	63 e7       	ldi	r22, 0x73	; 115
 1d4:	0e 94 54 00 	call	0xa8	; 0xa8 <motormove>
 1d8:	08 95       	ret

000001da <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
	DDRB=0XC7;						//SET DATA DIRECTION REGISTER
 1da:	87 ec       	ldi	r24, 0xC7	; 199
 1dc:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 1de:	81 ef       	ldi	r24, 0xF1	; 241
 1e0:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
		sbi(PORTB,2);			//LED ON
 1e2:	c2 9a       	sbi	0x18, 2	; 24
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	29 e1       	ldi	r18, 0x19	; 25
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	f9 01       	movw	r30, r18
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f4:	d9 f7       	brne	.-10     	; 0x1ec <main+0x12>
		_delay_ms(2000);
		cbi(PORTB,2);			//LED OFF
 1f6:	c2 98       	cbi	0x18, 2	; 24

	
	
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 1f8:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 1fa:	93 9a       	sbi	0x12, 3	; 18
	
    
    GICR = _BV(INT0);           	// enable external int0
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC01);          	// falling egde: int0
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	85 bf       	out	0x35, r24	; 53
    
    sei();                       	// enable interrupts 
 204:	78 94       	sei
 206:	29 e1       	ldi	r18, 0x19	; 25
 208:	30 e0       	ldi	r19, 0x00	; 0
    
    for (;;) 					 	//BLINK LED2
	{	
		cbi(PORTB,2);			//LED OFF
 20a:	c2 98       	cbi	0x18, 2	; 24
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	9e e4       	ldi	r25, 0x4E	; 78
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	d9 f7       	brne	.-10     	; 0x210 <main+0x36>
 21a:	f7 cf       	rjmp	.-18     	; 0x20a <main+0x30>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
