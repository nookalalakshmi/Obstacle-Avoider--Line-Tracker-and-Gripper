
motorIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024e  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000133  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000249  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f3  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000183  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  8a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motormove>:
            
        
//}

void motormove(char motor,char state)
{
  92:	82 33       	cpi	r24, 0x32	; 50
  94:	29 f4       	brne	.+10     	; 0xa0 <motormove+0xe>
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e1 e0       	ldi	r30, 0x01	; 1
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <motormove+0x16>
  a0:	a7 e0       	ldi	r26, 0x07	; 7
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e0       	ldi	r30, 0x06	; 6
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
	switch (state)
  a8:	66 34       	cpi	r22, 0x46	; 70
  aa:	61 f0       	breq	.+24     	; 0xc4 <motormove+0x32>
  ac:	67 34       	cpi	r22, 0x47	; 71
  ae:	20 f4       	brcc	.+8      	; 0xb8 <motormove+0x26>
  b0:	62 34       	cpi	r22, 0x42	; 66
  b2:	09 f0       	breq	.+2      	; 0xb6 <motormove+0x24>
  b4:	59 c0       	rjmp	.+178    	; 0x168 <motormove+0xd6>
  b6:	18 c0       	rjmp	.+48     	; 0xe8 <motormove+0x56>
  b8:	63 35       	cpi	r22, 0x53	; 83
  ba:	59 f1       	breq	.+86     	; 0x112 <motormove+0x80>
  bc:	63 37       	cpi	r22, 0x73	; 115
  be:	09 f0       	breq	.+2      	; 0xc2 <motormove+0x30>
  c0:	53 c0       	rjmp	.+166    	; 0x168 <motormove+0xd6>
  c2:	3d c0       	rjmp	.+122    	; 0x13e <motormove+0xac>
	{
	 case 'F':
			sbi(PORTB,n1);
  c4:	48 b3       	in	r20, 0x18	; 24
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9c 01       	movw	r18, r24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <motormove+0x40>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	aa 95       	dec	r26
  d4:	e2 f7       	brpl	.-8      	; 0xce <motormove+0x3c>
  d6:	42 2b       	or	r20, r18
  d8:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  da:	28 b3       	in	r18, 0x18	; 24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <motormove+0x50>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	ea 95       	dec	r30
  e4:	e2 f7       	brpl	.-8      	; 0xde <motormove+0x4c>
  e6:	11 c0       	rjmp	.+34     	; 0x10a <motormove+0x78>
			break;

	case 'B':
			sbi(PORTB,n2);
  e8:	48 b3       	in	r20, 0x18	; 24
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9c 01       	movw	r18, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <motormove+0x64>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	ea 95       	dec	r30
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <motormove+0x60>
  fa:	42 2b       	or	r20, r18
  fc:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
  fe:	28 b3       	in	r18, 0x18	; 24
 100:	02 c0       	rjmp	.+4      	; 0x106 <motormove+0x74>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 95       	dec	r26
 108:	e2 f7       	brpl	.-8      	; 0x102 <motormove+0x70>
 10a:	80 95       	com	r24
 10c:	82 23       	and	r24, r18
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
 112:	48 b3       	in	r20, 0x18	; 24
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	c9 01       	movw	r24, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <motormove+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	ea 95       	dec	r30
 122:	e2 f7       	brpl	.-8      	; 0x11c <motormove+0x8a>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <motormove+0xa0>
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	aa 95       	dec	r26
 134:	e2 f7       	brpl	.-8      	; 0x12e <motormove+0x9c>
 136:	20 95       	com	r18
 138:	28 23       	and	r18, r24
 13a:	28 bb       	out	0x18, r18	; 24
 13c:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 13e:	48 b3       	in	r20, 0x18	; 24
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	c9 01       	movw	r24, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <motormove+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	aa 95       	dec	r26
 14e:	e2 f7       	brpl	.-8      	; 0x148 <motormove+0xb6>
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 156:	88 b3       	in	r24, 0x18	; 24
 158:	02 c0       	rjmp	.+4      	; 0x15e <motormove+0xcc>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	ea 95       	dec	r30
 160:	e2 f7       	brpl	.-8      	; 0x15a <motormove+0xc8>
 162:	20 95       	com	r18
 164:	28 23       	and	r18, r24
 166:	28 bb       	out	0x18, r18	; 24
 168:	08 95       	ret

0000016a <robotmove>:
			break;
	}	
}

void robotmove(char mode)
{
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16e:	49 e1       	ldi	r20, 0x19	; 25
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	fa 01       	movw	r30, r20
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <robotmove+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	d1 f7       	brne	.-12     	; 0x172 <robotmove+0x8>
	_delay_ms(1000);
	cbi(PORTB,2);
 17e:	c2 98       	cbi	0x18, 2	; 24
	
	switch (mode)
 180:	8c 34       	cpi	r24, 0x4C	; 76
 182:	81 f0       	breq	.+32     	; 0x1a4 <robotmove+0x3a>
 184:	8d 34       	cpi	r24, 0x4D	; 77
 186:	28 f4       	brcc	.+10     	; 0x192 <robotmove+0x28>
 188:	82 34       	cpi	r24, 0x42	; 66
 18a:	51 f0       	breq	.+20     	; 0x1a0 <robotmove+0x36>
 18c:	86 34       	cpi	r24, 0x46	; 70
 18e:	09 f5       	brne	.+66     	; 0x1d2 <robotmove+0x68>
 190:	05 c0       	rjmp	.+10     	; 0x19c <robotmove+0x32>
 192:	82 35       	cpi	r24, 0x52	; 82
 194:	69 f0       	breq	.+26     	; 0x1b0 <robotmove+0x46>
 196:	83 35       	cpi	r24, 0x53	; 83
 198:	e1 f4       	brne	.+56     	; 0x1d2 <robotmove+0x68>
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <robotmove+0x58>
	{
		case 'F':
		 motormove('1','F');
 19c:	66 e4       	ldi	r22, 0x46	; 70
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <robotmove+0x3c>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 1a0:	62 e4       	ldi	r22, 0x42	; 66
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <robotmove+0x48>
		 motormove('2','B');
		break;
		
		case 'L':
		 motormove('1','B');
 1a4:	62 e4       	ldi	r22, 0x42	; 66
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','F');
 1ac:	66 e4       	ldi	r22, 0x46	; 70
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <robotmove+0x50>
		break;
		
		case 'R':
		 motormove('1','F');
 1b0:	66 e4       	ldi	r22, 0x46	; 70
 1b2:	81 e3       	ldi	r24, 0x31	; 49
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','B');
 1b8:	62 e4       	ldi	r22, 0x42	; 66
 1ba:	82 e3       	ldi	r24, 0x32	; 50
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
 1c0:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','s');
 1c2:	63 e7       	ldi	r22, 0x73	; 115
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','s');
 1ca:	63 e7       	ldi	r22, 0x73	; 115
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
 1d2:	08 95       	ret

000001d4 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
 1d4:	87 ec       	ldi	r24, 0xC7	; 199
 1d6:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 1d8:	81 ef       	ldi	r24, 0xF1	; 241
 1da:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 1dc:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 1de:	93 9a       	sbi	0x12, 3	; 18
    /*GICR = _BV(INT0);           	// enable external int0
    MCUCR = _BV(ISC01);          	// falling egde: int0*/
    sei();                       	// enable interrupts 
 1e0:	78 94       	sei
		sbi(PORTB,2);
 1e2:	c2 9a       	sbi	0x18, 2	; 24
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	29 e1       	ldi	r18, 0x19	; 25
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	f9 01       	movw	r30, r18
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f4:	d9 f7       	brne	.-10     	; 0x1ec <main+0x18>
			//motormove('1','s');
		//	motormove('2','s');
			
		//cbi(PORTB,2);			//LED ON
		_delay_ms(2000);
		cbi(PORTB,2);			//LED OFF
 1f6:	c2 98       	cbi	0x18, 2	; 24
        //robotmove('F');
		motormove('1','F');
 1f8:	66 e4       	ldi	r22, 0x46	; 70
 1fa:	81 e3       	ldi	r24, 0x31	; 49
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','F');
 200:	66 e4       	ldi	r22, 0x46	; 70
 202:	82 e3       	ldi	r24, 0x32	; 50
 204:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
 208:	80 e5       	ldi	r24, 0x50	; 80
 20a:	93 ec       	ldi	r25, 0xC3	; 195
 20c:	29 e1       	ldi	r18, 0x19	; 25
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	d9 f7       	brne	.-10     	; 0x210 <main+0x3c>
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x46>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
