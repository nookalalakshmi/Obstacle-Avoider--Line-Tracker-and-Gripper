
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003a8  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b6  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ea       	ldi	r30, 0xAC	; 172
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	26 c0       	rjmp	.+76     	; 0xa8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------/
-----------------------------------------------------------------*/
int main(void)
{
	DDRB=0x04;						//SET DATA DIRECTION REGISTER
  5e:	84 e0       	ldi	r24, 0x04	; 4
  60:	87 bb       	out	0x17, r24	; 23
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	
	DDRD=0x01;						//SET DATA DIRECTION REGISTER
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  66:	24 e2       	ldi	r18, 0x24	; 36
  68:	34 ef       	ldi	r19, 0xF4	; 244
		 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS
		PORTB=0x04;						//ALL LED'S ON
  6a:	54 e0       	ldi	r21, 0x04	; 4
		PORTD=0X01;
  6c:	41 e0       	ldi	r20, 0x01	; 1
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE	

	while(1)						//INFINITE LOOP
	{
		PORTB=0X00;						//ALL LED'S OFF
  6e:	18 ba       	out	0x18, r1	; 24
		PORTD=0X00;
  70:	12 ba       	out	0x12, r1	; 18
  72:	c9 01       	movw	r24, r18
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x16>
  78:	c9 01       	movw	r24, r18
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0x1c>
  7e:	c9 01       	movw	r24, r18
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x22>
  84:	c9 01       	movw	r24, r18
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x28>
		 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS 
		_delay_ms(250);					//DELAY IN MILLISECONDS
		PORTB=0x04;						//ALL LED'S ON
  8a:	58 bb       	out	0x18, r21	; 24
		PORTD=0X01;
  8c:	42 bb       	out	0x12, r20	; 18
  8e:	c9 01       	movw	r24, r18
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x32>
  94:	c9 01       	movw	r24, r18
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x38>
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x3e>
  a0:	c9 01       	movw	r24, r18
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x44>
  a6:	e3 cf       	rjmp	.-58     	; 0x6e <main+0x10>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
