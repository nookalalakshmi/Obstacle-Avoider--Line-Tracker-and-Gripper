   1               		.file	"robokits.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  71               	.global	__vector_9
  73               	__vector_9:
   1:robokits.c    **** /*  
   2:robokits.c    ****  Since _delay_ms() function will be affected by the interrupt generation 
   3:robokits.c    ****  and gives more delay. So, after sometime the led timing will be mismached.
   4:robokits.c    ****  
   5:robokits.c    ****  Even the timer delay is not perfectly mached to 1s. Use smaller presclar
   6:robokits.c    ****  for better operation.
   7:robokits.c    ****  
   8:robokits.c    ****   _delay_ms() function parameter passed should not exeed
   9:robokits.c    ****  262.14ms / F_CPU in mhz.
  10:robokits.c    ****  
  11:robokits.c    ****  so for 16MHz the maximum paramer should be 16ms.
  12:robokits.c    ****  
  13:robokits.c    ****  For 1MHz it can be upto 262ms (250 is used for this example).
  14:robokits.c    ****   
  15:robokits.c    ****  Must be changed to get accurate delay at higher MHz.
  16:robokits.c    ****  
  17:robokits.c    ****  The timing will differ if the operating frequency is changed.
  18:robokits.c    **** ---------------------------------------------------------------------*/
  19:robokits.c    **** 
  20:robokits.c    **** /*----------------------------------------------------------------
  21:robokits.c    **** -----------------HEADER FILES-------------------------------------
  22:robokits.c    **** -----------------------------------------------------------------*/
  23:robokits.c    **** #include <avr/io.h>
  24:robokits.c    **** #include <avr/interrupt.h>
  25:robokits.c    **** #include <util/delay.h>
  26:robokits.c    **** #include <compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  27:robokits.c    **** 
  28:robokits.c    **** /*----------------------------------------------------------------
  29:robokits.c    **** -----------------GLOBAL VARIABLES-------------------------------------
  30:robokits.c    **** -----------------------------------------------------------------*/
  31:robokits.c    **** 
  32:robokits.c    **** static volatile uint8_t led;     // use volatile when variable is accessed from interrupts
  33:robokits.c    **** int volatile flag=33,f1=0,c=1,a=0;
  34:robokits.c    **** int volatile count=0;
  35:robokits.c    **** int volatile count1=0,count2=0,count3=0,count4;
  36:robokits.c    **** /*----------------------------------------------------------------
  37:robokits.c    **** -----------------FUNCTION-----------------------------------------
  38:robokits.c    **** -----------------------------------------------------------------*/
  39:robokits.c    **** #define TIMER_1_CNT     0xd48d  // 3 sec, use AVRcalc to calculate these values
  40:robokits.c    ****                                 // ((TCNT1H=0xf4, TCNT1L=0x8d)
  41:robokits.c    **** 								// DECIMAL VALUE = 62605
  42:robokits.c    **** 								// MAX VALUE = 65535
  43:robokits.c    **** 								// TIMER OVERFLOW ON 65535-62605 = 2930 COUNTS
  44:robokits.c    **** #define TIMER_0_CNT		0x54	//175 ms
  45:robokits.c    **** 								//dec value=84
  46:robokits.c    **** 								//max value=255
  47:robokits.c    **** 								// timer overflow on 255-84=171 counts
  48:robokits.c    **** 
  49:robokits.c    **** #define TIMER_0_CNT2	0x9d	//100ms
  50:robokits.c    **** 								//dec value=157
  51:robokits.c    **** 								//timer overflow on 255-157=98 counts
  52:robokits.c    **** #define CNT				0xffff
  53:robokits.c    **** #define TMC16_CK1024	(_BV(CS12)+_BV(CS10))	// 16 BIT TIMER1 AT 1024 PRESCALAR
  54:robokits.c    **** 												// GIVES 1024*2930 = 3000320 CYCLES
  55:robokits.c    **** 												// AT 1MHZ FREQUENCY DELAY OF 3.000320 SECONDS
  56:robokits.c    **** #define TMC0_CK1024		(_BV(CS02)+_BV(CS00))				//8bit Timer 0 at 1024 prescaler
  57:robokits.c    **** 												//gives 1024*171= 175104 cycles
  58:robokits.c    **** 												//175.104 milliseconds
  59:robokits.c    **** #define CNT0			0xfc
  60:robokits.c    **** 
  61:robokits.c    **** 
  62:robokits.c    **** SIGNAL(SIG_OVERFLOW0)
  63:robokits.c    **** {
  74               	 r0,__SREG__
  75               		push r0
  76               		clr __zero_reg__
  77 0000 1F92      		push r24
  78 0002 0F92      		push r25
  79 0004 0FB6      	/* prologue: Signal */
  80 0006 0F92      	/* frame size = 0 */
  82 000a 8F93      	.LM1:
  83 000c 9F93      		lds r24,count1
  84               		lds r25,(count1)+1
  85               		or r24,r25
  64:robokits.c    **** 	if(count1!=0)
  86               	stabn	68,0,66,.LM2-.LFBB1
  87               	.LM2:
  88 000e 8091 0000 		lds r24,count1
  89 0012 9091 0000 		lds r25,(count1)+1
  90 0016 892B      		sbiw r24,1
  91 0018 01F0      		brne .L3
  65:robokits.c    **** 	{
  66:robokits.c    **** 		if(count1==1)
  92               	n	68,0,68,.LM3-.LFBB1
  93               	.LM3:
  94 001a 8091 0000 		ldi r24,lo8(84)
  95 001e 9091 0000 		rjmp .L21
  96 0022 0197      	.L3:
  67:robokits.c    **** 		{
  68:robokits.c    **** 			TCNT0=TIMER_0_CNT;
  98               		lds r24,count1
  99               		lds r25,(count1)+1
 100 0026 84E5      		sbiw r24,2
 101 0028 00C0      		breq .+2
 102               		rjmp .L14
  69:robokits.c    **** 			if(bit_is_clear(PIND,6))
  70:robokits.c    **** 				sbi(PORTD,6);
  71:robokits.c    **** 			else
  72:robokits.c    **** 				cbi(PORTD,6);
  73:robokits.c    **** 		}
  74:robokits.c    **** 		else if(count1==2)
 103               	bn	68,0,76,.LM5-.LFBB1
 104               	.LM5:
 105 002a 8091 0000 		ldi r24,lo8(-99)
 106 002e 9091 0000 	.L21:
 107 0032 0297      		out 82-32,r24
 109 0036 00C0      	.LM6:
  75:robokits.c    **** 		{
  76:robokits.c    **** 			TCNT0=TIMER_0_CNT2;
 110               	8-32,6
 111               		rjmp .L16
 112 0038 8DE9      		rjmp .L15
 113               	.L2:
  77:robokits.c    **** 			if(bit_is_clear(PIND,6))
 115               	
 116               		lds r24,count2
 117 003c 8699      		lds r25,(count2)+1
 118 003e 00C0      		or r24,r25
 119 0040 00C0      		breq .L7
  78:robokits.c    **** 				sbi(PORTD,6);
  79:robokits.c    **** 			else
  80:robokits.c    **** 				cbi(PORTD,6);
  81:robokits.c    **** 
  82:robokits.c    **** 		}
  83:robokits.c    **** 	}
  84:robokits.c    **** 	else if (count2!=0)
 121               	
 122               		lds r24,count2
 123 0042 8091 0000 		lds r25,(count2)+1
 124 0046 9091 0000 		sbiw r24,1
 125 004a 892B      		brne .L8
  85:robokits.c    **** 	{
  86:robokits.c    **** 		if(count2==1)
 127               	
 128               		ldi r24,lo8(84)
 129 004e 8091 0000 		rjmp .L19
 130 0052 9091 0000 	.L8:
 132 0058 01F4      	.LM10:
  87:robokits.c    **** 		{
  88:robokits.c    **** 			TCNT0=TIMER_0_CNT;
 133               	r24,count2
 134               		lds r25,(count2)+1
 135 005a 84E5      		sbiw r24,2
 136 005c 00C0      		brne .L14
  89:robokits.c    **** 			if(bit_is_clear(PIND,7))
  90:robokits.c    **** 				sbi(PORTD,7);
  91:robokits.c    **** 			else
  92:robokits.c    **** 				cbi(PORTD,7);
  93:robokits.c    **** 		}
  94:robokits.c    **** 		else if(count2==2)
 138               	:
 139               		ldi r24,lo8(-99)
 140 005e 8091 0000 	.L19:
 141 0062 9091 0000 		out 82-32,r24
 143 0068 01F4      	.LM12:
  95:robokits.c    **** 		{
  96:robokits.c    **** 			TCNT0=TIMER_0_CNT2;
 144               	48-32,7
 145               		rjmp .L10
 147               	.LM13:
 148 006c 82BF      		sbi 50-32,7
  97:robokits.c    **** 			if(bit_is_clear(PIND,7))
 149               	 .L14
 150               	.L10:
 152 0070 00C0      	.LM14:
  98:robokits.c    **** 				sbi(PORTD,7);
 153               	 50-32,7
 154               		rjmp .L14
 155 0072 979A      	.L7:
 157               	.LM15:
  99:robokits.c    **** 			else
 100:robokits.c    **** 				cbi(PORTD,7);
 158               	r24,count3
 159               		lds r25,(count3)+1
 160 0076 9798      		or r24,r25
 161 0078 00C0      		breq .L14
 101:robokits.c    **** 
 102:robokits.c    **** 		}
 103:robokits.c    **** 	}
 104:robokits.c    **** 	else if (count3!=0)
 163               	:
 164               		lds r24,count3
 165 007a 8091 0000 		lds r25,(count3)+1
 166 007e 9091 0000 		sbiw r24,1
 167 0082 892B      		brne .L11
 105:robokits.c    **** 	{
 106:robokits.c    **** 		if(count3==1)
 169               	
 170               		ldi r24,lo8(84)
 171 0086 8091 0000 		rjmp .L24
 172 008a 9091 0000 	.L11:
 174 0090 01F4      	.LM18:
 107:robokits.c    **** 		{
 108:robokits.c    **** 			TCNT0=TIMER_0_CNT;
 175               	r24,count3
 176               		lds r25,(count3)+1
 177 0092 84E5      		sbiw r24,2
 178 0094 00C0      		brne .L14
 109:robokits.c    **** 			if(bit_is_clear(PIND,7) && bit_is_clear(PIND,6))
 110:robokits.c    **** 				{	
 111:robokits.c    **** 					sbi(PORTD,7);
 112:robokits.c    **** 					sbi(PORTD,6);
 113:robokits.c    **** 				}
 114:robokits.c    **** 			else
 115:robokits.c    **** 				{
 116:robokits.c    **** 					cbi(PORTD,7);
 117:robokits.c    **** 					cbi(PORTD,6);
 118:robokits.c    **** 				}
 119:robokits.c    **** 		}
 120:robokits.c    **** 		else if(count3==2)
 180               	:
 181               		ldi r24,lo8(-99)
 182 0096 8091 0000 	.L24:
 183 009a 9091 0000 		out 82-32,r24
 185 00a0 01F4      	.LM20:
 121:robokits.c    **** 		{
 122:robokits.c    **** 			TCNT0=TIMER_0_CNT2;
 186               	48-32,7
 187               		rjmp .L13
 188 00a2 8DE9      		sbic 48-32,6
 189               		rjmp .L13
 123:robokits.c    **** 			if(bit_is_clear(PIND,7) && bit_is_clear(PIND,6))
 191               	:
 192               		sbi 50-32,7
 193 00a6 8799      	.L15:
 195 00aa 8699      	.LM22:
 196 00ac 00C0      		sbi 50-32,6
 124:robokits.c    **** 				{
 125:robokits.c    **** 					sbi(PORTD,7);
 197               	.L14
 198               	.L13:
 200               	.LM23:
 126:robokits.c    **** 					sbi(PORTD,6);
 201               	 50-32,7
 202               	.L16:
 204 00b2 00C0      	.LM24:
 205               		cbi 50-32,6
 127:robokits.c    **** 				}
 128:robokits.c    **** 			else
 129:robokits.c    **** 				{
 130:robokits.c    **** 					cbi(PORTD,7);
 206               	
 207               	/* epilogue start */
 209               	.LM25:
 131:robokits.c    **** 					cbi(PORTD,6);
 210               	p r25
 211               		pop r24
 212 00b6 9698      		pop r0
 213               		out __SREG__,r0
 214               		pop r0
 132:robokits.c    **** 				}
 133:robokits.c    **** 
 134:robokits.c    **** 		}
 135:robokits.c    **** 		
 136:robokits.c    **** 	}
 137:robokits.c    **** 	
 138:robokits.c    **** }
 215               	__zero_reg__
 216               		reti
 218 00ba 8F91      	.Lscope1:
 220 00be 0FBE      	.global	__vector_8
 222 00c2 1F90      	__vector_8:
 224               	.LM26:
 225               	.LFBB2:
 226               		push __zero_reg__
 227               		push r0
 228               		in r0,__SREG__
 229               		push r0
 139:robokits.c    **** SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
 140:robokits.c    **** {
 230               	__
 231               		push r18
 232               		push r19
 233 00c6 1F92      		push r20
 234 00c8 0F92      		push r21
 235 00ca 0FB6      		push r22
 236 00cc 0F92      		push r24
 237 00ce 1124      		push r25
 238 00d0 2F93      	/* prologue: Signal */
 239 00d2 3F93      	/* frame size = 0 */
 241 00d6 5F93      	.LM27:
 242 00d8 6F93      		ldi r24,lo8(-11123)
 243 00da 8F93      		ldi r25,hi8(-11123)
 244 00dc 9F93      		out (76)+1-32,r25
 245               		out 76-32,r24
 141:robokits.c    **** 	TCNT1 = TIMER_1_CNT;
 247               	,__zero_reg__
 248               		sts a,__zero_reg__
 249 00de 8DE8      	.LBB66:
 250 00e0 94ED      	.LBB67:
 251 00e2 9DBD      	.LBB68:
 252 00e4 8CBD      	.LBB69:
 142:robokits.c    **** 	a=0;
 253               	s	"c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 254               	.Ltext1:
 256 00ea 1092 0000 	.LM29:
 257               		ldi r18,lo8(-3036)
 258               		ldi r19,hi8(-3036)
 259               	.LBE69:
 260               	.LBE68:
 261               	.LBE67:
 262               	.LBE66:
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 263               	obokits.c",132,0,0,.Ltext2
 264               	.Ltext2:
 266 00f0 34EF      	.LM30:
 267               		ldi r20,lo8(1)
 268               		ldi r21,hi8(1)
 269               		rjmp .L26
 270               	.L29:
 272               	.LM31:
 143:robokits.c    **** 	while(a<=2930)
 144:robokits.c    **** 	{
 145:robokits.c    **** 	if(bit_is_clear(PIND,3))
 146:robokits.c    **** 	{
 147:robokits.c    **** 				sbi(PORTD,6);
 148:robokits.c    **** 				sbi(PORTD,7);
 149:robokits.c    **** 				_delay_ms(250);
 150:robokits.c    **** 				cbi(PORTD,6);
 151:robokits.c    **** 				cbi(PORTD,7);
 152:robokits.c    **** 				_delay_ms(250);
 153:robokits.c    **** 				
 154:robokits.c    **** 		
 155:robokits.c    **** 				f1=1;
 273               	2,3
 274               		rjmp .L27
 276 00f4 50E0      	.LM32:
 277 00f6 00C0      		sbi 50-32,6
 279               	.LM33:
 280               		sbi 50-32,7
 281 00f8 8399      	.LBB73:
 282 00fa 00C0      	.LBB74:
 283               	.LBB75:
 284               	.LBB76:
 286               	.Ltext3:
 288 00fe 979A      	.LM34:
 289               		movw r24,r18
 290               	/* #APP */
 291               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 292               		1: sbiw r24,1
 293               		brne 1b
 294               	 ;  0 "" 2
 295               	/* #NOAPP */
 296               	.LBE76:
 297 0100 C901      	.LBE75:
 298               	.LBE74:
 299               	.LBE73:
 301 0104 01F4      	.Ltext4:
 303               	.LM35:
 304               		cbi 50-32,6
 306               	.LM36:
 307               		cbi 50-32,7
 308               	.LBB77:
 309               	.LBB78:
 310               	.LBB79:
 311               	.LBB80:
 313               	.Ltext5:
 315 0108 9798      	.LM37:
 316               		movw r24,r18
 317               	/* #APP */
 318               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 319               		1: sbiw r24,1
 320               		brne 1b
 321               	 ;  0 "" 2
 322               	/* #NOAPP */
 323               	.LBE80:
 324 010a C901      	.LBE79:
 325               	.LBE78:
 326               	.LBE77:
 328 010e 01F4      	.Ltext6:
 330               	.LM38:
 331               		sts (f1)+1,r21
 332               		sts f1,r20
 333               		rjmp .L28
 334               	.L27:
 336               	.LM39:
 337               		sbi 50-32,6
 339 0110 5093 0000 	.LM40:
 340 0114 4093 0000 		sbi 50-32,7
 341 0118 00C0      	.LBB81:
 342               	.LBB72:
 156:robokits.c    **** 		
 157:robokits.c    **** 	}
 158:robokits.c    **** 	
 159:robokits.c    **** 
 160:robokits.c    **** 	else
 161:robokits.c    **** 	{
 162:robokits.c    **** 				sbi(PORTD,6);
 343               	util/delay_basic.h",132,0,0,.Ltext7
 344               	.Ltext7:
 163:robokits.c    **** 				sbi(PORTD,7);
 346               	41:
 347               		movw r24,r18
 348 011c 979A      	/* #APP */
 349               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 350               		1: sbiw r24,1
 351               		brne 1b
 352               	 ;  0 "" 2
 353               	/* #NOAPP */
 354               	.LBE70:
 355               	.LBE71:
 356               	.LBE72:
 357 011e C901      	.LBE81:
 359               	.Ltext8:
 361 0122 01F4      	.LM42:
 362               		cbi 50-32,6
 364               	.LM43:
 365               		cbi 50-32,7
 366               	.LBB82:
 367               	.LBB83:
 368               	.LBB84:
 369               	.LBB85:
 164:robokits.c    **** 				_delay_ms(250);
 165:robokits.c    **** 				cbi(PORTD,6);
 370               	610/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext9
 371               	.Ltext9:
 166:robokits.c    **** 				cbi(PORTD,7);
 373               	44:
 374               		movw r24,r18
 375 0126 9798      	/* #APP */
 376               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 377               		1: sbiw r24,1
 378               		brne 1b
 379               	 ;  0 "" 2
 380               	/* #NOAPP */
 381               	.LBE85:
 382               	.LBE84:
 383               	.LBE83:
 384 0128 C901      	.LBE82:
 386               	.Ltext10:
 388 012c 01F4      	.LM45:
 389               		sts (f1)+1,__zero_reg__
 390               		sts f1,__zero_reg__
 392               	.LM46:
 393               		sts (c)+1,__zero_reg__
 394               		sts c,__zero_reg__
 395               	.L28:
 167:robokits.c    **** 				_delay_ms(250);
 168:robokits.c    **** 		f1=0;
 397               	25,(a)+1
 398               		subi r24,lo8(-(506))
 399 012e 1092 0000 		sbci r25,hi8(-(506))
 400 0132 1092 0000 		sts (a)+1,r25
 169:robokits.c    **** 		c=0;
 401               	 a,r24
 402               	.L26:
 404 013a 1092 0000 	.LM48:
 405               		lds r24,a
 170:robokits.c    **** 	}
 171:robokits.c    **** 	a=a+506;
 406               	r25,(a)+1
 407               		subi r24,lo8(2931)
 408 013e 8091 0000 		sbci r25,hi8(2931)
 409 0142 9091 0000 		brlt .L29
 410 0146 8650      	/* epilogue start */
 412 014a 9093 0000 	.LM49:
 413 014e 8093 0000 		pop r25
 414               		pop r24
 415               		pop r22
 416               		pop r21
 417 0152 8091 0000 		pop r20
 418 0156 9091 0000 		pop r19
 419 015a 8357      		pop r18
 420 015c 9B40      		pop r0
 421 015e 04F0      		out __SREG__,r0
 422               		pop r0
 172:robokits.c    **** 	}
 173:robokits.c    **** 	
 174:robokits.c    ****     
 175:robokits.c    **** }
 423               	
 424               		reti
 426 0162 8F91      	.Lscope2:
 428 0166 5F91      	.global	__vector_1
 430 016a 3F91      	__vector_1:
 432 016e 0F90      	.LM50:
 433 0170 0FBE      	.LFBB3:
 434 0172 0F90      		push __zero_reg__
 435 0174 1F90      		push r0
 436 0176 1895      		in r0,__SREG__
 437               		push r0
 438               		clr __zero_reg__
 439               		push r24
 440               		push r25
 441               		push r30
 442               		push r31
 176:robokits.c    **** 
 177:robokits.c    **** SIGNAL(SIG_INTERRUPT0)     
 178:robokits.c    **** /* s  tignal handler for external interrupt int0 */
 179:robokits.c    **** {
 443               	 */
 444               	/* frame size = 0 */
 446 0178 1F92      	.LM51:
 447 017a 0F92      		lds r24,count
 448 017c 0FB6      		lds r25,(count)+1
 449 017e 0F92      		adiw r24,1
 450 0180 1124      		sts (count)+1,r25
 451 0182 8F93      		sts count,r24
 453 0186 EF93      	.LM52:
 454 0188 FF93      		lds r24,count
 455               		lds r25,(count)+1
 456               		sbiw r24,4
 180:robokits.c    **** 
 181:robokits.c    **** 	count++;
 457               	tabn	68,0,184,.LM53-.LFBB3
 458               	.LM53:
 459 018a 8091 0000 		sts (count)+1,__zero_reg__
 460 018e 9091 0000 		sts count,__zero_reg__
 461 0192 0196      	.L32:
 462 0194 9093 0000 	.LBB86:
 463 0198 8093 0000 	.LBB87:
 182:robokits.c    **** 	if(count==4)
 464               	
 465               	.LBB89:
 467 01a0 9091 0000 	.Ltext11:
 469 01a6 01F4      	.LM54:
 183:robokits.c    **** 	{
 184:robokits.c    **** 		count=0;
 470               	r24,lo8(-3036)
 471               		ldi r25,hi8(-3036)
 472 01a8 1092 0000 		movw r30,r24
 473 01ac 1092 0000 	/* #APP */
 474               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 475               		1: sbiw r30,1
 476               		brne 1b
 477               	 ;  0 "" 2
 478               	/* #NOAPP */
 479               	.LBE89:
 480               	.LBE88:
 481               	.LBE87:
 482               	.LBE86:
 483 01b0 84E2      	.LBB90:
 484 01b2 94EF      	.LBB91:
 485 01b4 FC01      	.LBB92:
 486               	.LBB93:
 487               	/* #APP */
 488 01b6 3197      	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 489 01b8 01F4      		1: sbiw r24,1
 490               		brne 1b
 491               	 ;  0 "" 2
 492               	/* epilogue start */
 493               	/* #NOAPP */
 494               	.LBE93:
 495               	.LBE92:
 496               	.LBE91:
 497               	.LBE90:
 499               	.Ltext12:
 501               	.LM55:
 502 01ba 0197      		pop r31
 503 01bc 01F4      		pop r30
 504               		pop r25
 505               		pop r24
 506               		pop r0
 507               		out __SREG__,r0
 508               		pop r0
 509               		pop __zero_reg__
 510               		reti
 512               	.Lscope3:
 185:robokits.c    **** 	}
 186:robokits.c    **** 	_delay_ms(250);
 187:robokits.c    **** 	_delay_ms(250);
 188:robokits.c    **** 
 189:robokits.c    **** }
 513               	stabs	"f:P(0,1)",64,0,0,18
 514               	.global	flagcal
 516 01c0 EF91      	flagcal:
 518 01c4 8F91      	.LM56:
 519 01c6 0F90      	.LFBB4:
 520 01c8 0FBE      	/* prologue: function */
 521 01ca 0F90      	/* frame size = 0 */
 522 01cc 1F90      		movw r18,r24
 524               	.LM57:
 525               		ldi r24,lo8(1)
 526               		out 89-32,r24
 528               	.LM58:
 529               		ldi r24,lo8(5)
 530               		out 83-32,r24
 190:robokits.c    **** void flagcal(int f)
 191:robokits.c    **** {
 531               	LM59-.LFBB4
 532               	.LM59:
 533               		ldi r24,lo8(-4)
 534               		out 82-32,r24
 536 01d0 9C01      	.LM60:
 192:robokits.c    **** 	
 193:robokits.c    **** 	TIMSK  = _BV(TOIE0);
 537               	24,flag
 538               		lds r25,(flag)+1
 539 01d2 81E0      		sbiw r24,11
 540 01d4 89BF      		brne .L46
 194:robokits.c    ****     TCCR0 = TMC0_CK1024;       	// use CLK/1024 prescale value
 541               	p .L50
 542               	.L37:
 544 01d8 83BF      	.LM61:
 195:robokits.c    ****     TCNT0  = CNT0;        	// reset TCNT0
 545               	 50-32,7
 546               	.LBB94:
 547 01da 8CEF      	.LBB95:
 548 01dc 82BF      	.LBB96:
 196:robokits.c    **** 	
 197:robokits.c    **** 	
 198:robokits.c    **** 	if(flag==11)
 549               	97:
 551 01de 8091 0000 	.Ltext13:
 553 01e6 0B97      	.LM62:
 554 01e8 01F4      		movw r30,r18
 555 01ea 00C0      	/* #APP */
 556               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 199:robokits.c    **** 	{
 200:robokits.c    **** 		while(f==1 || f==2)
 201:robokits.c    **** 		{
 202:robokits.c    **** 			sbi(PORTD,7);
 557               	 r30,1
 558               		brne 1b
 559 01ec 979A      	 ;  0 "" 2
 560               	/* #NOAPP */
 561               	.LBE97:
 562               	.LBE96:
 563               	.LBE95:
 564               	.LBE94:
 566               	.Ltext14:
 568 01ee F901      	.LM63:
 569               		cbi 50-32,7
 570               		rjmp .L47
 571 01f0 3197      	.L50:
 573               	.LM64:
 574               		movw r24,r18
 575               		sbiw r24,1
 576               	.LBB101:
 577               	.LBB100:
 578               	.LBB99:
 579               	.LBB98:
 203:robokits.c    **** 				_delay_ms(250);
 204:robokits.c    **** 			cbi(PORTD,7);
 581               	05,.LM65-.LFBB4
 582               	.LM65:
 583 01f4 9798      		ldi r18,lo8(-3036)
 584 01f6 00C0      		ldi r19,hi8(-3036)
 585               	.L47:
 586               	.LBE98:
 587               	.LBE99:
 588 01f8 C901      	.LBE100:
 589 01fa 0197      	.LBE101:
 591               	.Ltext16:
 593               	.LM66:
 594               		cpi r24,2
 595               		cpc r25,__zero_reg__
 596               		brlo .L37
 597               		rjmp .L38
 598 01fc 24E2      	.L46:
 600               	.LM67:
 601               		lds r24,flag
 602               		lds r25,(flag)+1
 603               		sbiw r24,12
 604               		brne .L48
 605               		rjmp .L51
 606               	.L41:
 608               	.LM68:
 609 0200 8230      		sbi 50-32,6
 610 0202 9105      	.LBB102:
 611 0204 00F0      	.LBB103:
 612 0206 00C0      	.LBB104:
 613               	.LBB105:
 205:robokits.c    **** 		}
 206:robokits.c    **** 	}
 207:robokits.c    **** 	else if(flag==12)
 614               	cc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext17
 615               	.Ltext17:
 617 020c 9091 0000 	.LM69:
 618 0210 0C97      		movw r30,r18
 619 0212 01F4      	/* #APP */
 620 0214 00C0      	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 621               		1: sbiw r30,1
 208:robokits.c    **** 	{
 209:robokits.c    **** 		while(f==1 || f==2)
 210:robokits.c    **** 		{
 211:robokits.c    **** 			sbi(PORTD,6);
 622               	
 623               	 ;  0 "" 2
 624 0216 969A      	/* #NOAPP */
 625               	.LBE105:
 626               	.LBE104:
 627               	.LBE103:
 628               	.LBE102:
 630               	.Ltext18:
 632               	.LM70:
 633 0218 F901      		cbi 50-32,6
 634               		rjmp .L49
 635               	.L51:
 637 021c 01F4      	.LM71:
 638               		movw r24,r18
 639               		sbiw r24,1
 640               	.LBB109:
 641               	.LBB108:
 642               	.LBB107:
 643               	.LBB106:
 645               	.Ltext19:
 212:robokits.c    **** 				_delay_ms(250);
 213:robokits.c    **** 			cbi(PORTD,6);
 646               	.LFBB4
 647               	.LM72:
 648 021e 9698      		ldi r18,lo8(-3036)
 649 0220 00C0      		ldi r19,hi8(-3036)
 650               	.L49:
 651               	.LBE106:
 652               	.LBE107:
 653 0222 C901      	.LBE108:
 654 0224 0197      	.LBE109:
 656               	.Ltext20:
 658               	.LM73:
 659               		cpi r24,2
 660               		cpc r25,__zero_reg__
 661               		brlo .L41
 662               		rjmp .L38
 663 0226 24E2      	.L48:
 665               	.LM74:
 666               		lds r24,flag
 667               		lds r25,(flag)+1
 668               		sbiw r24,13
 669               		brne .L38
 671               	.LM75:
 672               		movw r24,r18
 673               		sbiw r24,1
 674 022a 8230      	.L44:
 675 022c 9105      		cpi r24,2
 676 022e 00F0      		cpc r25,__zero_reg__
 677 0230 00C0      		brlo .L44
 678               	.L38:
 214:robokits.c    **** 		}
 215:robokits.c    **** 	}
 216:robokits.c    **** 	else if(flag==13)
 679               	76:
 680               		out 89-32,__zero_reg__
 681 0232 8091 0000 	/* epilogue start */
 683 023a 0D97      	.LM77:
 684 023c 01F4      		ret
 217:robokits.c    **** 	{
 218:robokits.c    **** 		while(f==1 || f==2)
 685               		flagcal, .-flagcal
 686               	.Lscope4:
 688 0240 0197      	.global	__vector_2
 690 0242 8230      	__vector_2:
 692 0246 00F0      	.LM78:
 693               	.LFBB5:
 219:robokits.c    **** 		{
 220:robokits.c    **** 		}
 221:robokits.c    **** 	}
 222:robokits.c    **** 	TIMSK  = 0x00;
 694               	ero_reg__
 695               		push r0
 696 0248 19BE      		in r0,__SREG__
 697               		push r0
 223:robokits.c    **** 	
 224:robokits.c    **** }
 698               	 __zero_reg__
 699               		push r18
 700 024a 0895      		push r19
 701               		push r20
 702               		push r21
 703               		push r22
 704               		push r23
 705               		push r24
 706               		push r25
 225:robokits.c    **** 
 226:robokits.c    **** SIGNAL(SIG_INTERRUPT1)     
 227:robokits.c    **** /* signal handler for external interrupt int0 */
 228:robokits.c    **** {
 707               	
 708               		push r27
 709               		push r30
 710 024c 1F92      		push r31
 711 024e 0F92      	/* prologue: Signal */
 712 0250 0FB6      	/* frame size = 0 */
 714 0254 1124      	.LM79:
 715 0256 2F93      		ldi r24,lo8(4)
 716 0258 3F93      		out 89-32,r24
 718 025c 5F93      	.LM80:
 719 025e 6F93      		out 79-32,__zero_reg__
 721 0262 8F93      	.LM81:
 722 0264 9F93      		ldi r24,lo8(5)
 723 0266 AF93      		out 78-32,r24
 725 026a EF93      	.LM82:
 726 026c FF93      		ldi r24,lo8(-1)
 727               		ldi r25,hi8(-1)
 728               		out (76)+1-32,r25
 229:robokits.c    **** 	
 230:robokits.c    **** 	TIMSK  = _BV(TOIE1);
 729               	n	68,0,235,.LM83-.LFBB5
 730               	.LM83:
 731 026e 84E0      		lds r24,flag
 732 0270 89BF      		lds r25,(flag)+1
 231:robokits.c    **** 	TCCR1A = 0x00;               	// disable PWM and Compare Output Mode
 733               	w r24,11
 734               		breq .L53
 735 0272 1FBC      		lds r24,flag
 232:robokits.c    ****     TCCR1B = TMC16_CK1024;       	// use CLK/1024 prescale value
 736               	s r25,(flag)+1
 737               		sbiw r24,12
 738 0274 85E0      		breq .L53
 739 0276 8EBD      		lds r24,flag
 233:robokits.c    ****     TCNT1  = CNT;        	// reset TCNT1
 740               	 r25,(flag)+1
 741               		sbiw r24,13
 742 0278 8FEF      		breq .+2
 743 027a 9FEF      		rjmp .L60
 744 027c 9DBD      	.L53:
 234:robokits.c    **** 	
 235:robokits.c    **** 	if(flag==11 || flag==12 || flag==13)
 746               	
 747               		lds r24,flag
 748 0280 8091 0000 		lds r25,(flag)+1
 749 0284 9091 0000 		sbiw r24,11
 750 0288 0B97      		brne .L55
 752 028c 8091 0000 	.LM85:
 753 0290 9091 0000 		lds r24,count1
 754 0294 0C97      		lds r25,(count1)+1
 755 0296 01F0      		adiw r24,1
 756 0298 8091 0000 		sts (count1)+1,r25
 757 029c 9091 0000 		sts count1,r24
 759 02a2 01F0      	.LM86:
 760 02a4 00C0      		sts (count2)+1,__zero_reg__
 761               		sts count2,__zero_reg__
 236:robokits.c    **** 	{
 237:robokits.c    **** 		if(flag==11)
 762               	1,.LM87-.LFBB5
 763               	.LM87:
 764 02a6 8091 0000 		sts (count3)+1,__zero_reg__
 765 02aa 9091 0000 		sts count3,__zero_reg__
 767 02b0 01F4      	.LM88:
 238:robokits.c    **** 		{
 239:robokits.c    **** 			count1++;
 768               	24,count1
 769               		lds r25,(count1)+1
 770 02b2 8091 0000 		sbiw r24,3
 771 02b6 9091 0000 		brne .L56
 773 02bc 9093 0000 	.LM89:
 774 02c0 8093 0000 		ldi r24,lo8(1)
 240:robokits.c    **** 			count2=0;
 775               	5,hi8(1)
 776               		sts (count1)+1,r25
 777 02c4 1092 0000 		sts count1,r24
 778 02c8 1092 0000 	.L56:
 241:robokits.c    **** 			count3=0;
 779               	abn	68,0,246,.LM90-.LFBB5
 780               	.LM90:
 781 02cc 1092 0000 		lds r24,count1
 782 02d0 1092 0000 		lds r25,(count1)+1
 242:robokits.c    **** 			if(count1==3)
 783               	p .L61
 784               	.L55:
 786 02d8 9091 0000 	.LM91:
 787 02dc 0397      		lds r24,flag
 788 02de 01F4      		lds r25,(flag)+1
 243:robokits.c    **** 			{
 244:robokits.c    **** 				count1=1;
 789               	r24,12
 790               		brne .L57
 792 02e2 90E0      	.LM92:
 793 02e4 9093 0000 		sts (count1)+1,__zero_reg__
 794 02e8 8093 0000 		sts count1,__zero_reg__
 245:robokits.c    **** 			}
 246:robokits.c    **** 			flagcal(count1);
 796               		lds r24,count2
 797               		lds r25,(count2)+1
 798 02ec 8091 0000 		adiw r24,1
 799 02f0 9091 0000 		sts (count2)+1,r25
 800 02f4 00C0      		sts count2,r24
 247:robokits.c    **** 		}
 248:robokits.c    **** 		else if(flag==12)
 802               	
 803               		sts (count3)+1,__zero_reg__
 804 02f6 8091 0000 		sts count3,__zero_reg__
 806 02fe 0C97      	.LM95:
 807 0300 01F4      		lds r24,count2
 249:robokits.c    **** 		{
 250:robokits.c    **** 			count1=0;
 808               	r25,(count2)+1
 809               		sbiw r24,3
 810 0302 1092 0000 		brne .L58
 251:robokits.c    **** 			count2++;
 812               	6:
 813               		ldi r24,lo8(1)
 814 030a 8091 0000 		ldi r25,hi8(1)
 815 030e 9091 0000 		sts (count2)+1,r25
 816 0312 0196      		sts count2,r24
 817 0314 9093 0000 	.L58:
 252:robokits.c    **** 			count3=0;
 819               		lds r24,count2
 820               		lds r25,(count2)+1
 821 031c 1092 0000 		rjmp .L61
 822 0320 1092 0000 	.L57:
 253:robokits.c    **** 			if(count2==3)
 823               	abn	68,0,259,.LM98-.LFBB5
 824               	.LM98:
 825 0324 8091 0000 		lds r24,flag
 826 0328 9091 0000 		lds r25,(flag)+1
 827 032c 0397      		sbiw r24,13
 828 032e 01F4      		brne .L60
 254:robokits.c    **** 			{
 255:robokits.c    **** 				count2=1;
 829               	n	68,0,261,.LM99-.LFBB5
 830               	.LM99:
 831 0330 81E0      		sts (count1)+1,__zero_reg__
 832 0332 90E0      		sts count1,__zero_reg__
 834 0338 8093 0000 	.LM100:
 835               		sts (count2)+1,__zero_reg__
 256:robokits.c    **** 			}
 257:robokits.c    **** 			flagcal(count2);
 836               	unt2,__zero_reg__
 838 033c 8091 0000 	.LM101:
 839 0340 9091 0000 		lds r24,count3
 840 0344 00C0      		lds r25,(count3)+1
 841               		adiw r24,1
 258:robokits.c    **** 		}
 259:robokits.c    **** 		else if(flag==13)
 842               	count3)+1,r25
 843               		sts count3,r24
 845 034a 9091 0000 	.LM102:
 846 034e 0D97      		lds r24,count3
 847 0350 01F4      		lds r25,(count3)+1
 260:robokits.c    **** 		{
 261:robokits.c    **** 			count1=0;
 848               	r24,3
 849               		brne .L59
 851 0356 1092 0000 	.LM103:
 262:robokits.c    **** 			count2=0;
 852               	 r24,lo8(1)
 853               		ldi r25,hi8(1)
 854 035a 1092 0000 		sts (count3)+1,r25
 855 035e 1092 0000 		sts count3,r24
 263:robokits.c    **** 			count3++;
 856               	:
 858 0362 8091 0000 	.LM104:
 859 0366 9091 0000 		lds r24,count3
 860 036a 0196      		lds r25,(count3)+1
 861 036c 9093 0000 	.L61:
 862 0370 8093 0000 		rcall flagcal
 264:robokits.c    **** 			if(count3==3)
 863               	* epilogue start */
 865 0374 8091 0000 	.LM105:
 866 0378 9091 0000 		pop r31
 867 037c 0397      		pop r30
 868 037e 01F4      		pop r27
 265:robokits.c    **** 			{
 266:robokits.c    **** 				count3=1;
 869               	26
 870               		pop r25
 871 0380 81E0      		pop r24
 872 0382 90E0      		pop r23
 873 0384 9093 0000 		pop r22
 874 0388 8093 0000 		pop r21
 875               		pop r20
 267:robokits.c    **** 			}
 268:robokits.c    **** 			flagcal(count3);
 876               	9
 877               		pop r18
 878 038c 8091 0000 		pop r0
 879 0390 9091 0000 		out __SREG__,r0
 880               		pop r0
 881 0394 00D0      		pop __zero_reg__
 882               		reti
 269:robokits.c    **** 		}
 270:robokits.c    **** 		
 271:robokits.c    **** 	}
 272:robokits.c    **** 
 273:robokits.c    **** //	TIMSK  = 0x00;
 274:robokits.c    **** 
 275:robokits.c    **** 		
 276:robokits.c    **** 
 277:robokits.c    **** }
 884               	:
 886 0396 FF91      	.global	main
 888 039a BF91      	main:
 890 039e 9F91      	.LM106:
 891 03a0 8F91      	.LFBB6:
 892 03a2 7F91      		push r14
 893 03a4 6F91      		push r15
 894 03a6 5F91      		push r16
 895 03a8 4F91      		push r17
 896 03aa 3F91      	/* prologue: function */
 897 03ac 2F91      	/* frame size = 0 */
 899 03b0 0FBE      	.LM107:
 900 03b2 0F90      		ldi r24,lo8(1)
 901 03b4 1F90      		out 55-32,r24
 903               	.LM108:
 904               		ldi r24,lo8(-64)
 905               		out 49-32,r24
 907               	.LM109:
 908               		sbi 56-32,0
 278:robokits.c    **** 	
 279:robokits.c    **** 
 280:robokits.c    **** 
 281:robokits.c    **** 
 282:robokits.c    **** /*-----------------MAIN PROGRAM-------------------------------------
 283:robokits.c    **** ----------------------------------------------------------------
 284:robokits.c    **** -----------------------------------------------------------------*/
 285:robokits.c    **** 
 286:robokits.c    **** int main(void)
 287:robokits.c    **** {    
 909               	LFBB6
 910               	.LM110:
 911               		sbi 50-32,2
 913 03ba FF92      	.LM111:
 914 03bc 0F93      		sbi 50-32,3
 916               	.LM112:
 917               		ldi r24,lo8(-128)
 288:robokits.c    **** 	DDRB=0x01;						//SET DATA DIRECTION REGISTER
 918               	2,r24
 920 03c0 81E0      	.LM113:
 921 03c2 87BB      		ldi r24,lo8(8)
 289:robokits.c    **** 									//SET 1 for OUTPUT PORT
 290:robokits.c    **** 									//SET 0 FOR INPUT PORT
 291:robokits.c    **** 									//ONLY PORTB.0 IS OUTPUT
 292:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
 293:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
 294:robokits.c    **** 									//CHANGE ACCORDING TO USE
 295:robokits.c    **** 	
 296:robokits.c    **** 	DDRD=0xC0;						//SET DATA DIRECTION REGISTER
 922               	 85-32,r24
 924 03c4 80EC      	.LM114:
 925 03c6 81BB      	/* #APP */
 297:robokits.c    **** 									//SET 1 for OUTPUT PORT
 298:robokits.c    **** 									//SET 0 FOR INPUT PORT
 299:robokits.c    **** 									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
 300:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
 301:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
 302:robokits.c    **** 									//CHANGE ACCORDING TO USE
 303:robokits.c    **** 	
 304:robokits.c    **** 	sbi(PORTB,0);					//LED1 ON (INDICATION FOR READY TO USE)
 926               	314 "robokits.c" 1
 927               		sei
 928 03c8 C09A      	 ;  0 "" 2
 305:robokits.c    **** 	
 306:robokits.c    **** 	sbi(PORTD,2);					//ENABLE PULL UP FOR SW1
 929               	#NOAPP */
 930               	.LBB110:
 931 03ca 929A      	.LBB111:
 307:robokits.c    **** 	sbi(PORTD,3);					//ENABLE PULL UP FOR SW2
 932               	B112:
 933               	.LBB113:
 308:robokits.c    ****     
 309:robokits.c    ****     GIMSK = _BV(INT1);
 935               	ext21:
 937 03ce 80E8      	.LM115:
 938 03d0 8BBF      		ldi r18,lo8(-3036)
 310:robokits.c    ****     MCUCR = _BV(ISC11);
 939               	 r19,hi8(-3036)
 940               	.LBE113:
 941 03d2 88E0      	.LBE112:
 942 03d4 85BF      	.LBE111:
 311:robokits.c    ****   // MCUCR=0x00;
 312:robokits.c    **** 	
 313:robokits.c    ****     
 314:robokits.c    **** 	sei();                       	// enable interrupts 
 943               	110:
 945               	.Ltext22:
 947 03d6 7894      	.LM116:
 948               		ldi r25,lo8(64)
 949               		mov r14,r25
 951               	.LM117:
 952               		ldi r24,lo8(2)
 953               		mov r15,r24
 955               	.LM118:
 956               		ldi r26,lo8(10)
 957               		ldi r27,hi8(10)
 959 03da 34EF      	.LM119:
 960               		ldi r30,lo8(13)
 961               		ldi r31,hi8(13)
 963               	.LM120:
 964               		ldi r22,lo8(12)
 965               		ldi r23,hi8(12)
 315:robokits.c    ****     
 316:robokits.c    **** 	
 317:robokits.c    ****     for (;;) 					 	//BLINK LED2
 318:robokits.c    **** 	{	
 319:robokits.c    **** 		sbi(PORTD,6);
 320:robokits.c    **** 		sbi(PORTD,7);
 321:robokits.c    **** 		_delay_ms(250);
 322:robokits.c    **** 		cbi(PORTD,6);
 323:robokits.c    **** 		cbi(PORTD,7);
 324:robokits.c    **** 		_delay_ms(250);
 325:robokits.c    **** 		if(f1==1 && c!=0)
 326:robokits.c    **** 		{
 327:robokits.c    **** 			cbi(PORTD,6);
 328:robokits.c    **** 			cbi(PORTD,7);
 329:robokits.c    **** 			while(bit_is_clear(PIND,3))
 330:robokits.c    **** 			{
 331:robokits.c    **** 				GIMSK = _BV(INT0);
 966               	-.LFBB6
 967               	.LM121:
 968 03dc 90E4      		ldi r20,lo8(11)
 969 03de E92E      		ldi r21,hi8(11)
 332:robokits.c    **** 				MCUCR = 0x02;
 970               	10)
 972 03e0 82E0      	.LM119:
 973 03e2 F82E      		ldi r30,lo8(13)
 333:robokits.c    **** 				
 334:robokits.c    **** 
 335:robokits.c    **** 				if(count==1)
 336:robokits.c    **** 				{
 337:robokits.c    **** 					flag=11;
 338:robokits.c    **** 					sbi(PORTD,6);
 339:robokits.c    **** 					cbi(PORTD,7);
 340:robokits.c    **** 					//f1=0;
 341:robokits.c    **** 				}
 342:robokits.c    **** 				
 343:robokits.c    **** 				else if(count==2)
 344:robokits.c    **** 				{
 345:robokits.c    **** 					flag=12;
 346:robokits.c    **** 					sbi(PORTD,7);
 347:robokits.c    **** 					cbi(PORTD,6);
 348:robokits.c    **** 					
 349:robokits.c    **** 				}
 350:robokits.c    **** 				else if(count==3)
 351:robokits.c    **** 				{
 352:robokits.c    **** 					flag=13;
 353:robokits.c    **** 					sbi(PORTD,6);
 354:robokits.c    **** 					sbi(PORTD,7);
 355:robokits.c    **** 					
 356:robokits.c    **** 				}
 357:robokits.c    **** 				
 358:robokits.c    **** 				  else
 359:robokits.c    **** 				{
 360:robokits.c    **** 					flag=10;
 974               	116:
 975               		ldi r25,lo8(64)
 976 03e4 AAE0      		mov r14,r25
 978               	.LM117:
 979               		ldi r24,lo8(2)
 980 03e8 EDE0      		mov r15,r24
 982               	.LM118:
 983               		ldi r26,lo8(10)
 984 03ec 6CE0      		ldi r27,hi8(10)
 986               	.LM119:
 987               		ldi r30,lo8(13)
 988 03f0 4BE0      		ldi r31,hi8(13)
 361:robokits.c    **** 					cbi(PORTD,6);
 362:robokits.c    **** 					cbi(PORTD,7);
 363:robokits.c    **** 					
 364:robokits.c    **** 				}
 365:robokits.c    **** 
 366:robokits.c    **** 			}				
 367:robokits.c    **** 		}
 368:robokits.c    **** 		TIMSK=0x00;
 369:robokits.c    **** 	GIMSK = _BV(INT1);
 990               	2,.LM117-.LFBB6
 991               	.LM117:
 992 03f4 00E8      		ldi r24,lo8(2)
 370:robokits.c    **** 	MCUCR = _BV(ISC11);
 993               	,lo8(-3036)
 994               		ldi r19,hi8(-3036)
 995 03f6 18E0      	.LBE113:
 996               	.LBE112:
 997               	.LBE111:
 998               	.LBE110:
 1000               	.Ltext22:
 1002 03fa 979A      	.LM116:
 1003               		ldi r25,lo8(64)
 1004               		mov r14,r25
 1006               	.LM117:
 1007               		ldi r24,lo8(2)
 1008               		mov r15,r24
 1010               	.LM118:
 1011 03fc C901      		ldi r26,lo8(10)
 1012               		ldi r27,hi8(10)
 1014 03fe 0197      	.LM119:
 1015 0400 01F4      		ldi r30,lo8(13)
 1016               		ldi r31,hi8(13)
 1018               	.LM120:
 1019               		ldi r22,lo8(12)
 1020               		ldi r23,hi8(12)
 1022               	.LM121:
 1023               		ldi r20,lo8(11)
 1024               		ldi r21,hi8(11)
 1026 0402 9698      	.LM122:
 1027               		ldi r16,lo8(-128)
 1029 0404 9798      	.LM123:
 1030               		ldi r17,lo8(8)
 1031               	.L69:
 1033               	.LM124:
 1034               		sbi 50-32,6
 1036               	.LM125:
 1037               		sbi 50-32,7
 1038 0406 C901      	.LBB117:
 1039               	.LBB116:
 1040               	.LBB115:
 1041 0408 0197      	.LBB114:
 1043               	.Ltext23:
 1045               	.LM126:
 1046               		movw r24,r18
 1047               	/* #APP */
 1048               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 1049               		1: sbiw r24,1
 1050               		brne 1b
 1051               	 ;  0 "" 2
 1052               	/* #NOAPP */
 1053 040c 8091 0000 	.LBE114:
 1054 0410 9091 0000 	.LBE115:
 1055 0414 0197      	.LBE116:
 1056 0416 01F4      	.LBE117:
 1058 041c 9091 0000 	.Ltext24:
 1060 0422 01F0      	.LM127:
 1061 0424 00C0      		cbi 50-32,6
 1063               	.LM128:
 1064               		cbi 50-32,7
 1065 0426 EBBE      	.LBB118:
 1066               	.LBB119:
 1067               	.LBB120:
 1068 0428 F5BE      	.LBB121:
 1070               	.Ltext25:
 1072 042e 9091 0000 	.LM129:
 1073 0432 0197      		movw r24,r18
 1074 0434 01F4      	/* #APP */
 1075               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 1076               		1: sbiw r24,1
 1077 0436 5093 0000 		brne 1b
 1078 043a 4093 0000 	 ;  0 "" 2
 1079               	/* #NOAPP */
 1080               	.LBE121:
 1081 043e 969A      	.LBE120:
 1082 0440 00C0      	.LBE119:
 1083               	.LBE118:
 1085               	.Ltext26:
 1087 0446 9091 0000 	.LM130:
 1088 044a 0297      		lds r24,f1
 1089 044c 01F4      		lds r25,(f1)+1
 1090               		sbiw r24,1
 1091               		brne .L63
 1092 044e 7093 0000 		lds r24,c
 1093 0452 6093 0000 		lds r25,(c)+1
 1094               		or r24,r25
 1095               		breq .L63
 1096 0456 979A      		rjmp .L72
 1097               	.L68:
 1099 0458 9698      	.LM131:
 1100 045a 00C0      		out 91-32,r14
 1102               	.LM132:
 1103               		out 85-32,r15
 1105 0460 9091 0000 	.LM133:
 1106 0464 0397      		lds r24,count
 1107 0466 01F4      		lds r25,(count)+1
 1108               		sbiw r24,1
 1109               		brne .L65
 1111 046c E093 0000 	.LM134:
 1112               		sts (flag)+1,r21
 1113               		sts flag,r20
 1115               	.LM135:
 1116               		sbi 50-32,6
 1117 0472 979A      		rjmp .L73
 1118 0474 00C0      	.L65:
 1120               	.LM136:
 1121               		lds r24,count
 1122 0476 B093 0000 		lds r25,(count)+1
 1123 047a A093 0000 		sbiw r24,2
 1124               		brne .L66
 1126               	.LM137:
 1127 047e 9698      		sts (flag)+1,r23
 1128               		sts flag,r22
 1130               	.LM138:
 1131 0480 9798      		sbi 50-32,7
 1133               	.LM139:
 1134               		cbi 50-32,6
 1135 0482 839B      		rjmp .L71
 1136 0484 00C0      	.L66:
 1138               	.LM140:
 1139               		lds r24,count
 1140 0486 19BE      		lds r25,(count)+1
 1141               		sbiw r24,3
 1142               		brne .L67
 1144               	.LM141:
 1145               		sts (flag)+1,r31
 1146 048a 15BF      		sts flag,r30
 1148               	.LM142:
 1149               		sbi 50-32,6
 1151               	.LM143:
 1152               		sbi 50-32,7
 1153               		rjmp .L71
 1154               	.L67:
 1156               	.LM144:
 1157               		sts (flag)+1,r27
 1158               		sts flag,r26
 1159               	.L72:
 1161               	.LM145:
 1162 0000 0000      		cbi 50-32,6
 1163               	.L73:
 1165               	.LM146:
 1166               		cbi 50-32,7
 1167               	.L71:
 1169               	.LM147:
 1170               		sbis 48-32,3
 1171               		rjmp .L68
 1172               	.L63:
 1174               	.LM148:
 1175 0002 0000      		out 89-32,__zero_reg__
 1177               	.LM149:
 1178               		out 91-32,r16
 1180               	.LM150:
 1181 0004 0000      		out 85-32,r17
 1182               		rjmp .L69
 1184               	.Lscope6:
 1185               	.global	flag
 1186               		.data
 1189               	flag:
 1190               		.word	33
 1191               	.global	f1
 1192               	.global	f1
 1193 0008 0000      		.section .bss
 1196               	f1:
 1197               		.skip 2,0
 1198               	.global	c
 1199 000a 0000      		.data
 1202               	c:
 1203               		.word	1
 1204               	.global	a
 1205               	.global	a
 1206               		.section .bss
 1209               	a:
 1210               		.skip 2,0
 1211               	.global	count
 1212               	.global	count
DEFINED SYMBOLS
                            *ABS*:00000000 robokits.c
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:2      *ABS*:0000003f __SREG__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:3      *ABS*:0000003e __SP_H__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:4      *ABS*:0000003d __SP_L__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:5      *ABS*:00000034 __CCP__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:7      *ABS*:00000001 __zero_reg__
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:73     .text:00000000 __vector_9
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1186   .bss:00000006 count1
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1192   .bss:00000008 count2
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1198   .bss:0000000a count3
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:229    .text:000000c6 __vector_8
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1174   .bss:00000002 a
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1161   .bss:00000000 f1
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1167   .data:00000002 c
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:442    .text:00000178 __vector_1
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1180   .bss:00000004 count
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:530    .text:000001d0 flagcal
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:1154   .data:00000000 flag
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:706    .text:0000024c __vector_2
C:\Users\ankit\AppData\Local\Temp/ccRO4Pg8.s:908    .text:000003b8 main
                            *COM*:00000002 count4

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
