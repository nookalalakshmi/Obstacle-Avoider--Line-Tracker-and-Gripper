
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800060  00800060  000004a2  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000095  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000056c  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000252  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f6  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d9  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_13>
  38:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_14>
  3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000054 <__c.1486>:
  54:	20 20 00                                              .

00000057 <__c.1483>:
  57:	0d 0a 20 45 45 50 52 4f 4d 20 77 72 69 74 74 65     .. EEPROM writte
  67:	6e 2e 20 4e 6f 77 20 72 65 61 64 20 63 6f 6e 74     n. Now read cont
  77:	65 6e 74 20 66 72 6f 6d 20 45 45 50 52 4f 4d 0a     ent from EEPROM.
  87:	0d 00                                               ..

00000089 <__c.1477>:
  89:	0d 0a 0a 53 61 6d 70 6c 65 20 63 6f 64 65 20 66     ...Sample code f
  99:	6f 72 20 65 65 70 72 6f 6d 20 77 72 69 74 69 6e     or eeprom writin
  a9:	67 20 61 6e 64 20 72 65 61 64 69 6e 67 2e 00        g and reading..

000000b8 <__c.1475>:
  b8:	0d 0a 0a 56 69 73 69 74 20 55 73 20 61 74 20 77     ...Visit Us at w
  c8:	77 77 2e 72 6f 62 6f 6b 69 74 73 2e 6f 72 67 2e     ww.robokits.org.
  d8:	20 00                                                .

000000da <__c.1473>:
  da:	0d 0a 0a 53 61 6d 70 6c 65 20 63 6f 64 65 20 6d     ...Sample code m
  ea:	61 64 65 20 62 79 20 52 6f 62 6f 6b 69 74 73 20     ade by Robokits 
  fa:	49 6e 64 69 61 20 66 6f 72 20 52 4f 42 4f 47 52     India for ROBOGR
 10a:	49 44 2e 20 00 00                                   ID. ..

00000110 <__ctors_end>:
 110:	11 24       	eor	r1, r1
 112:	1f be       	out	0x3f, r1	; 63
 114:	cf e5       	ldi	r28, 0x5F	; 95
 116:	d8 e0       	ldi	r29, 0x08	; 8
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	a0 e6       	ldi	r26, 0x60	; 96
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	ee e2       	ldi	r30, 0x2E	; 46
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	02 c0       	rjmp	.+4      	; 0x12c <.do_copy_data_start>

00000128 <.do_copy_data_loop>:
 128:	05 90       	lpm	r0, Z+
 12a:	0d 92       	st	X+, r0

0000012c <.do_copy_data_start>:
 12c:	a0 36       	cpi	r26, 0x60	; 96
 12e:	b1 07       	cpc	r27, r17
 130:	d9 f7       	brne	.-10     	; 0x128 <.do_copy_data_loop>

00000132 <__do_clear_bss>:
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	a0 e6       	ldi	r26, 0x60	; 96
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
 13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
 13c:	a5 3a       	cpi	r26, 0xA5	; 165
 13e:	b1 07       	cpc	r27, r17
 140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
 142:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
 146:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

0000014a <__bad_interrupt>:
 14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <main>:



int main(void)
{
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	27 97       	sbiw	r28, 0x07	; 7
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
 16c:	80 ef       	ldi	r24, 0xF0	; 240
 16e:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
 170:	8b ef       	ldi	r24, 0xFB	; 251
 172:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 174:	81 ef       	ldi	r24, 0xF1	; 241
 176:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTA,4);					//LED1 ON (INDICATION FOR READY TO USE)
 178:	dc 9a       	sbi	0x1b, 4	; 27
	
	
	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
 17a:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
 17c:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 17e:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 180:	93 9a       	sbi	0x12, 3	; 18
	
    /*
     *  Initialize UART library, pass baudrate and AVR cpu clock
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 182:	8c e0       	ldi	r24, 0x0C	; 12
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 18a:	78 94       	sei
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("\r\n\nSample code made by Robokits India for ROBOGRID. ");
 18c:	8a ed       	ldi	r24, 0xDA	; 218
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 af 01 	call	0x35e	; 0x35e <uart_puts_p>
	uart_puts_P("\r\n\nVisit Us at www.robokits.org. ");
 194:	88 eb       	ldi	r24, 0xB8	; 184
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 af 01 	call	0x35e	; 0x35e <uart_puts_p>
	uart_puts_P("\r\n\nSample code for eeprom writing and reading.");
 19c:	89 e8       	ldi	r24, 0x89	; 137
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 af 01 	call	0x35e	; 0x35e <uart_puts_p>
 1a4:	a0 e0       	ldi	r26, 0x00	; 0
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
	
	uint8_t num;
	uint8_t *ead;

	num=0;
	ead = 0;

	do
	{                   
		eeprom_write_byte(ead++, num);  
 1a8:	cd 01       	movw	r24, r26
 1aa:	01 96       	adiw	r24, 0x01	; 1

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 1ac:	0a 2e       	mov	r0, r26
 1ae:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__eeprom_write_byte_1C1D1E>
		num++; 		
	} while (num != 255);
 1b2:	8f 3f       	cpi	r24, 0xFF	; 255
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f0       	breq	.+4      	; 0x1bc <main+0x6e>
 1b8:	dc 01       	movw	r26, r24
 1ba:	f6 cf       	rjmp	.-20     	; 0x1a8 <main+0x5a>
		
	uart_puts_P("\r\n EEPROM written. Now read content from EEPROM\n\r");  		
 1bc:	87 e5       	ldi	r24, 0x57	; 87
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 af 01 	call	0x35e	; 0x35e <uart_puts_p>
 1c4:	cc 24       	eor	r12, r12
 1c6:	dd 24       	eor	r13, r13
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
 1c8:	d6 01       	movw	r26, r12
 1ca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__eeprom_read_byte_1C1D1E>
 1ce:	10 2d       	mov	r17, r0
		
	num = 0;
		
	for (ead = 0; num != 255; ead++)
	{
		num = eeprom_read_byte(ead);     
		itoa(num, buffer, 10);   // convert interger into string (decimal format)    
 1d0:	4a e0       	ldi	r20, 0x0A	; 10
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	7e 01       	movw	r14, r28
 1d6:	08 94       	sec
 1d8:	e1 1c       	adc	r14, r1
 1da:	f1 1c       	adc	r15, r1
 1dc:	b7 01       	movw	r22, r14
 1de:	81 2f       	mov	r24, r17
 1e0:	99 27       	eor	r25, r25
 1e2:	0e 94 bd 01 	call	0x37a	; 0x37a <itoa>
		uart_puts(buffer);        // and transmit string to UART
 1e6:	c7 01       	movw	r24, r14
 1e8:	0e 94 a2 01 	call	0x344	; 0x344 <uart_puts>
		uart_puts_P("  ");  	  
 1ec:	84 e5       	ldi	r24, 0x54	; 84
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 af 01 	call	0x35e	; 0x35e <uart_puts_p>
 1f4:	08 94       	sec
 1f6:	c1 1c       	adc	r12, r1
 1f8:	d1 1c       	adc	r13, r1
 1fa:	1f 3f       	cpi	r17, 0xFF	; 255
 1fc:	29 f7       	brne	.-54     	; 0x1c8 <main+0x7a>
	}
	return(0);
}
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	27 96       	adiw	r28, 0x07	; 7
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	08 95       	ret

0000021e <__vector_13>:
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
    unsigned char tmphead;
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 232:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 234:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 236:	e0 91 a2 00 	lds	r30, 0x00A2
 23a:	ef 5f       	subi	r30, 0xFF	; 255
 23c:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 23e:	80 91 a3 00 	lds	r24, 0x00A3
 242:	e8 17       	cp	r30, r24
 244:	11 f4       	brne	.+4      	; 0x24a <__vector_13+0x2c>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	08 c0       	rjmp	.+16     	; 0x25a <__vector_13+0x3c>
 24a:	89 2f       	mov	r24, r25
 24c:	88 71       	andi	r24, 0x18	; 24
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 24e:	e0 93 a2 00 	sts	0x00A2, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 252:	ff 27       	eor	r31, r31
 254:	e0 58       	subi	r30, 0x80	; 128
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 25a:	80 93 a4 00 	sts	0x00A4, r24
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_14>:
}


SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 284:	90 91 a0 00 	lds	r25, 0x00A0
 288:	80 91 a1 00 	lds	r24, 0x00A1
 28c:	98 17       	cp	r25, r24
 28e:	61 f0       	breq	.+24     	; 0x2a8 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 290:	e0 91 a1 00 	lds	r30, 0x00A1
 294:	ef 5f       	subi	r30, 0xFF	; 255
 296:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 298:	e0 93 a1 00 	sts	0x00A1, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 29c:	ff 27       	eor	r31, r31
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	80 81       	ld	r24, Z
 2a4:	8c b9       	out	0x0c, r24	; 12
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 2a8:	55 98       	cbi	0x0a, 5	; 10
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <uart_init>:
    }
}


/*************************************************************************
Function: uart_init()
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 2bc:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 2be:	10 92 a0 00 	sts	0x00A0, r1
    UART_TxTail = 0;
 2c2:	10 92 a1 00 	sts	0x00A1, r1
    UART_RxHead = 0;
 2c6:	10 92 a2 00 	sts	0x00A2, r1
    UART_RxTail = 0;
 2ca:	10 92 a3 00 	sts	0x00A3, r1
    
#if defined( AT90_UART )
    /* set baud rate */
    UBRR = (unsigned char)baudrate; 

    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 2ce:	97 ff       	sbrs	r25, 7
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 2d6:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 2d8:	83 2f       	mov	r24, r19
 2da:	99 27       	eor	r25, r25
 2dc:	80 bd       	out	0x20, r24	; 32
    UBRRL = (unsigned char) baudrate;
 2de:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 2e0:	88 e9       	ldi	r24, 0x98	; 152
 2e2:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 2e4:	86 e8       	ldi	r24, 0x86	; 134
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	08 95       	ret

000002ea <uart_getc>:
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
   		baudrate &= ~0x8000;
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    UBRR0L = (unsigned char) baudrate;

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    #endif 

#elif defined ( ATMEGA_UART )
    /* set baud rate */
    if ( baudrate & 0x8000 ) 
    {
    	UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    	baudrate &= ~0x8000;
    }
    UBRRHI = (unsigned char)(baudrate>>8);
    UBRR   = (unsigned char) baudrate;

    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */


/*************************************************************************
Function: uart_getc()
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 2ea:	90 91 a2 00 	lds	r25, 0x00A2
 2ee:	80 91 a3 00 	lds	r24, 0x00A3
 2f2:	98 17       	cp	r25, r24
 2f4:	19 f4       	brne	.+6      	; 0x2fc <uart_getc+0x12>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2fc:	e0 91 a3 00 	lds	r30, 0x00A3
 300:	ef 5f       	subi	r30, 0xFF	; 255
 302:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 304:	e0 93 a3 00 	sts	0x00A3, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 308:	ff 27       	eor	r31, r31
 30a:	e0 58       	subi	r30, 0x80	; 128
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 310:	80 91 a4 00 	lds	r24, 0x00A4
 314:	99 27       	eor	r25, r25
 316:	98 2f       	mov	r25, r24
 318:	88 27       	eor	r24, r24
 31a:	82 0f       	add	r24, r18
 31c:	91 1d       	adc	r25, r1

}/* uart_getc */
 31e:	08 95       	ret

00000320 <uart_putc>:


/*************************************************************************
Function: uart_putc()
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 320:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 322:	90 91 a0 00 	lds	r25, 0x00A0
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 32a:	80 91 a1 00 	lds	r24, 0x00A1
 32e:	98 17       	cp	r25, r24
 330:	e1 f3       	breq	.-8      	; 0x32a <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 332:	e9 2f       	mov	r30, r25
 334:	ff 27       	eor	r31, r31
 336:	e0 5a       	subi	r30, 0xA0	; 160
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 33c:	90 93 a0 00 	sts	0x00A0, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 340:	55 9a       	sbi	0x0a, 5	; 10
 342:	08 95       	ret

00000344 <uart_puts>:

}/* uart_putc */


/*************************************************************************
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
 34a:	03 c0       	rjmp	.+6      	; 0x352 <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	0e 94 90 01 	call	0x320	; 0x320 <uart_putc>
 352:	88 81       	ld	r24, Y
 354:	88 23       	and	r24, r24
 356:	d1 f7       	brne	.-12     	; 0x34c <uart_puts+0x8>
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <uart_puts_p>:

}/* uart_puts */


/*************************************************************************
Function: uart_puts_p()
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 366:	0e 94 90 01 	call	0x320	; 0x320 <uart_putc>
 36a:	fe 01       	movw	r30, r28
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	84 91       	lpm	r24, Z
 370:	88 23       	and	r24, r24
 372:	c9 f7       	brne	.-14     	; 0x366 <uart_puts_p+0x8>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <itoa>:
 37a:	fb 01       	movw	r30, r22
 37c:	9f 01       	movw	r18, r30
 37e:	e8 94       	clt
 380:	42 30       	cpi	r20, 0x02	; 2
 382:	c4 f0       	brlt	.+48     	; 0x3b4 <itoa+0x3a>
 384:	45 32       	cpi	r20, 0x25	; 37
 386:	b4 f4       	brge	.+44     	; 0x3b4 <itoa+0x3a>
 388:	4a 30       	cpi	r20, 0x0A	; 10
 38a:	29 f4       	brne	.+10     	; 0x396 <itoa+0x1c>
 38c:	97 fb       	bst	r25, 7
 38e:	1e f4       	brtc	.+6      	; 0x396 <itoa+0x1c>
 390:	90 95       	com	r25
 392:	81 95       	neg	r24
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	64 2f       	mov	r22, r20
 398:	77 27       	eor	r23, r23
 39a:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodhi4>
 39e:	80 5d       	subi	r24, 0xD0	; 208
 3a0:	8a 33       	cpi	r24, 0x3A	; 58
 3a2:	0c f0       	brlt	.+2      	; 0x3a6 <itoa+0x2c>
 3a4:	89 5d       	subi	r24, 0xD9	; 217
 3a6:	81 93       	st	Z+, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	a1 f7       	brne	.-24     	; 0x396 <itoa+0x1c>
 3ae:	16 f4       	brtc	.+4      	; 0x3b4 <itoa+0x3a>
 3b0:	5d e2       	ldi	r21, 0x2D	; 45
 3b2:	51 93       	st	Z+, r21
 3b4:	10 82       	st	Z, r1
 3b6:	c9 01       	movw	r24, r18
 3b8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <strrev>

000003bc <strrev>:
 3bc:	dc 01       	movw	r26, r24
 3be:	fc 01       	movw	r30, r24
 3c0:	67 2f       	mov	r22, r23
 3c2:	71 91       	ld	r23, Z+
 3c4:	77 23       	and	r23, r23
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <strrev+0x4>
 3c8:	32 97       	sbiw	r30, 0x02	; 2
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <strrev+0x18>
 3cc:	7c 91       	ld	r23, X
 3ce:	6d 93       	st	X+, r22
 3d0:	70 83       	st	Z, r23
 3d2:	62 91       	ld	r22, -Z
 3d4:	ae 17       	cp	r26, r30
 3d6:	bf 07       	cpc	r27, r31
 3d8:	c8 f3       	brcs	.-14     	; 0x3cc <strrev+0x10>
 3da:	08 95       	ret

000003dc <__eeprom_read_byte_1C1D1E>:
 3dc:	e1 99       	sbic	0x1c, 1	; 28
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <__eeprom_read_byte_1C1D1E>
 3e0:	bf bb       	out	0x1f, r27	; 31
 3e2:	ae bb       	out	0x1e, r26	; 30
 3e4:	e0 9a       	sbi	0x1c, 0	; 28
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	0d b2       	in	r0, 0x1d	; 29
 3ea:	08 95       	ret

000003ec <__eeprom_write_byte_1C1D1E>:
 3ec:	e1 99       	sbic	0x1c, 1	; 28
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <__eeprom_write_byte_1C1D1E>
 3f0:	bf bb       	out	0x1f, r27	; 31
 3f2:	ae bb       	out	0x1e, r26	; 30
 3f4:	0d ba       	out	0x1d, r0	; 29
 3f6:	11 96       	adiw	r26, 0x01	; 1
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	e2 9a       	sbi	0x1c, 2	; 28
 3fe:	e1 9a       	sbi	0x1c, 1	; 28
 400:	0f be       	out	0x3f, r0	; 63
 402:	08 95       	ret

00000404 <__udivmodhi4>:
 404:	aa 1b       	sub	r26, r26
 406:	bb 1b       	sub	r27, r27
 408:	51 e1       	ldi	r21, 0x11	; 17
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__udivmodhi4_ep>

0000040c <__udivmodhi4_loop>:
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	a6 17       	cp	r26, r22
 412:	b7 07       	cpc	r27, r23
 414:	10 f0       	brcs	.+4      	; 0x41a <__udivmodhi4_ep>
 416:	a6 1b       	sub	r26, r22
 418:	b7 0b       	sbc	r27, r23

0000041a <__udivmodhi4_ep>:
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	5a 95       	dec	r21
 420:	a9 f7       	brne	.-22     	; 0x40c <__udivmodhi4_loop>
 422:	80 95       	com	r24
 424:	90 95       	com	r25
 426:	bc 01       	movw	r22, r24
 428:	cd 01       	movw	r24, r26
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <_exit>
