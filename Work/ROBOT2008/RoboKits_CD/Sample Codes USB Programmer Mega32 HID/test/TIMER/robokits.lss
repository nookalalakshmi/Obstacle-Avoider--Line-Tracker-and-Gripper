
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a5  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000077  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000218  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000af  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8a:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <__vector_9>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/

SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	sbi(PORTA,4);
  9e:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  a0:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  a2:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  a4:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  a6:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  a8:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  aa:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ac:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ae:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  b0:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  b2:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  b4:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  b6:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  b8:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ba:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  bc:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  be:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  c0:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  c2:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  c4:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  c6:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  c8:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ca:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  cc:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ce:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  d0:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  d2:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  d4:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  d6:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  d8:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  da:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  dc:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  de:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  e0:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  e2:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  e4:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  e6:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  e8:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ea:	dc 9a       	sbi	0x1b, 4	; 27
	sbi(PORTA,4);
  ec:	dc 9a       	sbi	0x1b, 4	; 27
	
    TCNT0 = TIMER_0_CNT;         	// reset counter to get this interrupt again
  ee:	82 e8       	ldi	r24, 0x82	; 130
  f0:	82 bf       	out	0x32, r24	; 50
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	8a bb       	out	0x1a, r24	; 26
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	
    TCCR0 = 0x03;               	// disable PWM and Compare Output Mode
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	83 bf       	out	0x33, r24	; 51
    
    TCNT0  = TIMER_0_CNT;        	// reset TCNT1
 106:	82 e8       	ldi	r24, 0x82	; 130
 108:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts 
 10e:	78 94       	sei
    
    for (;;) 						// loop forever
	{                      
		cbi(PORTA,4);
 110:	dc 98       	cbi	0x1b, 4	; 27
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x12>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
