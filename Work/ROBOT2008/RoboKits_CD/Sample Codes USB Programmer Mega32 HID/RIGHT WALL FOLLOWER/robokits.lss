
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b9  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000558  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002d9  00000000  00000000  000009c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006c8  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e8  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000260  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 66       	ori	r24, 0x60	; 96
  96:	81 bb       	out	0x11, r24	; 17

    OC1_DDR |= _BV(OC1A_PIN) + _BV(OC1B_PIN);    			// set OC1A and OC1B pin as output, required for output toggling 

    TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0);    	// enable 8 bit PWM, select inverted PWM
  98:	91 ef       	ldi	r25, 0xF1	; 241
  9a:	9f bd       	out	0x2f, r25	; 47
		
    // timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
    // PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
    TCCR1B = _BV(CS11) | _BV(WGM12);
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	8e bd       	out	0x2e, r24	; 46
	
    OCR1AL = 50;            			//FUll Speed Left motor
  a0:	82 e3       	ldi	r24, 0x32	; 50
  a2:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = 160;						//Lesser Speed Right motor
  a4:	80 ea       	ldi	r24, 0xA0	; 160
  a6:	88 bd       	out	0x28, r24	; 40
	
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
  a8:	80 ef       	ldi	r24, 0xF0	; 240
  aa:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  ac:	8b ef       	ldi	r24, 0xFB	; 251
  ae:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0XFF;						//SET DATA DIRECTION REGISTER
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  b4:	91 bb       	out	0x11, r25	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
									
    lcd_init(LCD_DISP_ON);				/* initialize display, cursor off */
  b6:	8c e0       	ldi	r24, 0x0C	; 12
  b8:	0e 94 32 01 	call	0x264	; 0x264 <lcd_init>
	lcd_clrscr();						/* clear display and home cursor */        
  bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
	lcd_puts("ROBOKITS NEOBOT\n");		/* put string to display (line 1) with linefeed */		
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 18 01 	call	0x230	; 0x230 <lcd_puts>
	lcd_puts("WALL HUGGER BOT");		/* cursor is now on second line, write second line */										
  c8:	81 e7       	ldi	r24, 0x71	; 113
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_puts>

	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  d0:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  d2:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  d4:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  d6:	93 9a       	sbi	0x12, 3	; 18
		if(bit_is_clear(PIND,1))				//IF Sensor(Right) senses obstacle
		{
			cbi(PORTA,4);
			cbi(PORTA,5);
			sbi(PORTA,6);
			PORTC=0X08;							//Only right motor forward
  d8:	58 e0       	ldi	r21, 0x08	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	28 e8       	ldi	r18, 0x88	; 136
  dc:	33 e1       	ldi	r19, 0x13	; 19
			_delay_ms(20);
		}
		else
		{
			PORTC=0X0A;							//Both motors Forward
  de:	4a e0       	ldi	r20, 0x0A	; 10
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1


	while(1)						//START INFINITE LOOP TO SCAN INPUT FROM PORT
	{
		if(bit_is_clear(PIND,1))				//IF Sensor(Right) senses obstacle
  e0:	81 99       	sbic	0x10, 1	; 16
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <main+0x62>
		{
			cbi(PORTA,4);
  e4:	dc 98       	cbi	0x1b, 4	; 27
			cbi(PORTA,5);
  e6:	dd 98       	cbi	0x1b, 5	; 27
			sbi(PORTA,6);
  e8:	de 9a       	sbi	0x1b, 6	; 27
			PORTC=0X08;							//Only right motor forward
  ea:	55 bb       	out	0x15, r21	; 21
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x5c>
  f2:	f6 cf       	rjmp	.-20     	; 0xe0 <main+0x4e>
			_delay_ms(20);
		}
		else
		{
			PORTC=0X0A;							//Both motors Forward
  f4:	45 bb       	out	0x15, r20	; 21
			cbi(PORTA,4);
  f6:	dc 98       	cbi	0x1b, 4	; 27
			cbi(PORTA,5);
  f8:	dd 98       	cbi	0x1b, 5	; 27
			cbi(PORTA,6);
  fa:	de 98       	cbi	0x1b, 6	; 27
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <main+0x4e>

000000fe <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  fe:	66 23       	and	r22, r22
 100:	11 f0       	breq	.+4      	; 0x106 <lcd_write+0x8>
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
 102:	c0 9a       	sbi	0x18, 0	; 24
 104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 106:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 108:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 10a:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 10c:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 10e:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 110:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 112:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 114:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 116:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 118:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 11a:	87 fd       	sbrc	r24, 7
 11c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 11e:	86 fd       	sbrc	r24, 6
 120:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 122:	85 fd       	sbrc	r24, 5
 124:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 126:	84 fd       	sbrc	r24, 4
 128:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 12a:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x30>
    lcd_e_low();
 12e:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 130:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 132:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 134:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 136:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 138:	83 fd       	sbrc	r24, 3
 13a:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 13c:	82 fd       	sbrc	r24, 2
 13e:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 140:	81 fd       	sbrc	r24, 1
 142:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 144:	80 fd       	sbrc	r24, 0
 146:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 148:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_write+0x4e>
    lcd_e_low();
 14c:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 14e:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 150:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 152:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 154:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 156:	08 95       	ret

00000158 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 158:	88 23       	and	r24, r24
 15a:	11 f0       	breq	.+4      	; 0x160 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 15c:	c0 9a       	sbi	0x18, 0	; 24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 160:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 162:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 164:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 166:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 168:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 16a:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 16c:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();        
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 170:	b4 9b       	sbis	0x16, 4	; 22
 172:	02 c0       	rjmp	.+4      	; 0x178 <lcd_read+0x20>
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	01 c0       	rjmp	.+2      	; 0x17a <lcd_read+0x22>
 178:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 17a:	b5 99       	sbic	0x16, 5	; 22
 17c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 17e:	b6 99       	sbic	0x16, 6	; 22
 180:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 182:	b7 99       	sbic	0x16, 7	; 22
 184:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 186:	c3 98       	cbi	0x18, 3	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 18a:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 18e:	b4 99       	sbic	0x16, 4	; 22
 190:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 192:	b5 99       	sbic	0x16, 5	; 22
 194:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 196:	b6 99       	sbic	0x16, 6	; 22
 198:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 19a:	b7 99       	sbic	0x16, 7	; 22
 19c:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 19e:	c3 98       	cbi	0x18, 3	; 24
    }
    return data;
}
 1a0:	08 95       	ret

000001a2 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_read>
 1a8:	87 fd       	sbrc	r24, 7
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_read>
    
}/* lcd_waitbusy */
 1b4:	08 95       	ret

000001b6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1b6:	1f 93       	push	r17
 1b8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_waitbusy>
    lcd_write(cmd,0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
}
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1ca:	1f 93       	push	r17
 1cc:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1ce:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_waitbusy>
    lcd_write(data,1);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 2f       	mov	r24, r17
 1d6:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
}
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 1de:	66 23       	and	r22, r22
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1e2:	80 58       	subi	r24, 0x80	; 128
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1e6:	80 54       	subi	r24, 0x40	; 64
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1ec:	08 95       	ret

000001ee <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 1ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_waitbusy>
    return lcd_waitbusy();
}
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_command(1<<LCD_CLR);
}
 1fc:	08 95       	ret

000001fe <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_command(1<<LCD_HOME);
}
 204:	08 95       	ret

00000206 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 206:	1f 93       	push	r17
 208:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 20a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_waitbusy>
    if (c=='\n')
 20e:	1a 30       	cpi	r17, 0x0A	; 10
 210:	49 f4       	brne	.+18     	; 0x224 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 212:	80 34       	cpi	r24, 0x40	; 64
 214:	10 f0       	brcs	.+4      	; 0x21a <lcd_putc+0x14>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	01 c0       	rjmp	.+2      	; 0x21c <lcd_putc+0x16>
 21a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 21c:	80 58       	subi	r24, 0x80	; 128
 21e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 222:	04 c0       	rjmp	.+8      	; 0x22c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 2f       	mov	r24, r17
 228:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write>
    }

}/* lcd_putc */
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 238:	0e 94 03 01 	call	0x206	; 0x206 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 23c:	89 91       	ld	r24, Y+
 23e:	88 23       	and	r24, r24
 240:	d9 f7       	brne	.-10     	; 0x238 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 250:	0e 94 03 01 	call	0x206	; 0x206 <lcd_putc>
 254:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	84 91       	lpm	r24, Z+
 25a:	88 23       	and	r24, r24
 25c:	c9 f7       	brne	.-14     	; 0x250 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 264:	1f 93       	push	r17
 266:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 268:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 26a:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 26c:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 26e:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 270:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 272:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 274:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 276:	80 ea       	ldi	r24, 0xA0	; 160
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 27e:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 280:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 282:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_init+0x22>
    lcd_e_low();
 286:	c3 98       	cbi	0x18, 3	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 288:	80 ee       	ldi	r24, 0xE0	; 224
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 290:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_init+0x30>
    lcd_e_low();
 294:	c3 98       	cbi	0x18, 3	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2a0:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x40>
    lcd_e_low();
 2a4:	c3 98       	cbi	0x18, 3	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2a6:	fc 01       	movw	r30, r24
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2ac:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2ae:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_delay();
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcd_init+0x4e>
    lcd_e_low();
 2b2:	c3 98       	cbi	0x18, 3	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2be:	88 e0       	ldi	r24, 0x08	; 8
 2c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2ce:	81 2f       	mov	r24, r17
 2d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>

}/* lcd_init */
 2d4:	1f 91       	pop	r17
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
