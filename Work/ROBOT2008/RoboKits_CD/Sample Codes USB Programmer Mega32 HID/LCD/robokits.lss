
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000049e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000378  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078b  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000341  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000774  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022d  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00001fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

00000054 <copyRightChar>:
  54:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................

00000064 <__c.1576>:
  64:	53 68 69 66 74 20 62 6f 74 68 20 6c 69 6e 65 31     Shift both line1
  74:	20 61 6e 64 20 6c 69 6e 65 32 20 6c 65 66 74 00      and line2 left.

00000084 <__c.1574>:
  84:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  94:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  a4:	0a 00                                               ..

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf e5       	ldi	r28, 0x5F	; 95
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	a0 e6       	ldi	r26, 0x60	; 96
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	ee e9       	ldi	r30, 0x9E	; 158
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <.do_copy_data_start>

000000be <.do_copy_data_loop>:
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0

000000c2 <.do_copy_data_start>:
  c2:	aa 39       	cpi	r26, 0x9A	; 154
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <.do_copy_data_loop>

000000c8 <__do_clear_bss>:
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	aa e9       	ldi	r26, 0x9A	; 154
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	aa 39       	cpi	r26, 0x9A	; 154
  d4:	b1 07       	cpc	r27, r17
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  dc:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <wait_until_key_pressed>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/
void wait_until_key_pressed(void)
{
  e4:	86 b3       	in	r24, 0x16	; 22
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PINB;                  		// read input
        for(i=0;i<65535;i++);
        temp2 = PINB;                  		// read input
  e6:	96 b3       	in	r25, 0x16	; 22
        temp1 = (temp1 & temp2);       		// debounce input
    } while ( temp1 & _BV(PINB2) );
  e8:	89 23       	and	r24, r25
  ea:	82 fd       	sbrc	r24, 2
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PINB2);     	/* wait until key is released */
  ee:	82 9b       	sbis	0x10, 2	; 16
  f0:	fe cf       	rjmp	.-4      	; 0xee <wait_until_key_pressed+0xa>
  f2:	08 95       	ret

000000f4 <main>:
}

/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	27 97       	sbiw	r28, 0x07	; 7
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
	
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
 10c:	80 ef       	ldi	r24, 0xF0	; 240
 10e:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
 110:	8b ef       	ldi	r24, 0xFB	; 251
 112:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 114:	81 ef       	ldi	r24, 0xF1	; 241
 116:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
		
	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
 11c:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
 11e:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 120:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 122:	93 9a       	sbi	0x12, 3	; 18
    
    lcd_init(LCD_DISP_ON);					/* initialize display, cursor off */
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_init>

    for (;;)								/* loop forever */ 
	{                           
        lcd_clrscr();						/* clear display and home cursor */        
 12a:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
        lcd_puts("ROBOKITS INDIA\n");		/* put string to display (line 1) with linefeed */		
 12e:	80 e6       	ldi	r24, 0x60	; 96
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        lcd_puts("    ROBOKITS.ORG");		/* cursor is now on second line, write second line */		
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
		lcd_gotoxy(0,1);  					/* move cursor to position 0 on line 2 */        
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_gotoxy>
        lcd_puts("WWW.");					/* write single char to display */                
 146:	81 e8       	ldi	r24, 0x81	; 129
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        wait_until_key_pressed();			/* wait until push button PB2 (INT2) is pressed */
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <wait_until_key_pressed>
		
		
        lcd_command(LCD_DISP_ON_CURSOR);	/* turn on cursor */
 152:	8e e0       	ldi	r24, 0x0E	; 14
 154:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
        lcd_clrscr();     					/* clear display home cursor */		
 158:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
        lcd_puts( "CurOn");
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
		wait_until_key_pressed();			/* wait until push button PB2 (INT2) is pressed */
 164:	0e 94 72 00 	call	0xe4	; 0xe4 <wait_until_key_pressed>
        
        
		lcd_clrscr();     					/* clear display home cursor */	
 168:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
		lcd_puts_P( "Line 1 longer than 14 characters\n" );	/* put string from program memory to display */
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts_p>
        lcd_puts_P( "Shift both line1 and line2 left" );		
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts_p>
 17c:	10 e0       	ldi	r17, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17e:	84 e2       	ldi	r24, 0x24	; 36
 180:	94 ef       	ldi	r25, 0xF4	; 244
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x90>
		for(i=0;i<16;i++)
		{
			_delay_ms(250);
			_delay_ms(250);
			_delay_ms(250);
			_delay_ms(250);		
			lcd_command(LCD_MOVE_DISP_LEFT);	/* move BOTH lines one position to the left */
 188:	fc 01       	movw	r30, r24
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x96>
 18e:	fc 01       	movw	r30, r24
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x9c>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xa0>
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 19e:	1f 5f       	subi	r17, 0xFF	; 255
 1a0:	10 31       	cpi	r17, 0x10	; 16
 1a2:	69 f7       	brne	.-38     	; 0x17e <main+0x8a>
		}           
        wait_until_key_pressed();				/* wait until push button PB2 (INT2) is pressed */
 1a4:	0e 94 72 00 	call	0xe4	; 0xe4 <wait_until_key_pressed>
        
        
		lcd_command(LCD_DISP_ON);				/* turn off cursor */
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
        lcd_clrscr();   						/* clear display home cursor */
 1ae:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
        itoa( num , buffer, 10);		       	/* convert interger into string */
 1b2:	4a e0       	ldi	r20, 0x0A	; 10
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	8e 01       	movw	r16, r28
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	b8 01       	movw	r22, r16
 1be:	86 e8       	ldi	r24, 0x86	; 134
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 09 02 	call	0x412	; 0x412 <itoa>
        lcd_puts(buffer);						/* put converted string to display */
 1c6:	c8 01       	movw	r24, r16
 1c8:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        wait_until_key_pressed();				/* wait until push button PB2 (INT2) is pressed */
 1cc:	0e 94 72 00 	call	0xe4	; 0xe4 <wait_until_key_pressed>
		
        
		lcd_clrscr();   						/* clear display home cursor */       
 1d0:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
		lcd_puts("Copyright    ");
 1d4:	8c e8       	ldi	r24, 0x8C	; 140
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
		lcd_gotoxy(10,0);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_gotoxy>
		lcd_putc(':');
 1e4:	8a e3       	ldi	r24, 0x3A	; 58
 1e6:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_putc>
		/* load two userdefined characters from program memoryinto LCD controller CG RAM location 0 and 1*/
		lcd_command(_BV(LCD_CGRAM)); 	 		/* set CG RAM start address 0 */
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 1f0:	04 e5       	ldi	r16, 0x54	; 84
 1f2:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0; i<16; i++)
		{
			lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 1f4:	f8 01       	movw	r30, r16
 1f6:	84 91       	lpm	r24, Z
 1f8:	0e 94 81 01 	call	0x302	; 0x302 <lcd_data>
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	04 36       	cpi	r16, 0x64	; 100
 204:	1f 07       	cpc	r17, r31
 206:	b1 f7       	brne	.-20     	; 0x1f4 <main+0x100>
		}
		/* move cursor to position 0 on line 2 */
		/* Note: this switched back to DD RAM addresses */
		lcd_gotoxy(0,1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_gotoxy>
		lcd_putc(0);							/* display user defined (c), built using two user defined chars */
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_putc>
		lcd_putc(1);     
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_putc>
		wait_until_key_pressed();				/* wait until push button PB2 (INT2) is pressed */
 21c:	0e 94 72 00 	call	0xe4	; 0xe4 <wait_until_key_pressed>
 220:	84 cf       	rjmp	.-248    	; 0x12a <main+0x36>

00000222 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 222:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_high();
    lcd_e_delay();
 224:	00 c0       	rjmp	.+0      	; 0x226 <toggle_e+0x4>
    lcd_e_low();
 226:	c3 98       	cbi	0x18, 3	; 24
 228:	08 95       	ret

0000022a <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 22e:	66 23       	and	r22, r22
 230:	11 f0       	breq	.+4      	; 0x236 <lcd_write+0xc>
       lcd_rs_high();
 232:	c0 9a       	sbi	0x18, 0	; 24
 234:	01 c0       	rjmp	.+2      	; 0x238 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 236:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 238:	c1 98       	cbi	0x18, 1	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 23a:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 23c:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 23e:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 240:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 242:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 244:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 246:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 248:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 24a:	87 fd       	sbrc	r24, 7
 24c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 24e:	c8 2f       	mov	r28, r24
 250:	dd 27       	eor	r29, r29
 252:	c6 fd       	sbrc	r28, 6
 254:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 256:	c5 fd       	sbrc	r28, 5
 258:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 25a:	c4 fd       	sbrc	r28, 4
 25c:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 25e:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 262:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 264:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 266:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 268:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 26a:	c3 fd       	sbrc	r28, 3
 26c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 26e:	c2 fd       	sbrc	r28, 2
 270:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 272:	c1 fd       	sbrc	r28, 1
 274:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 276:	c0 fd       	sbrc	r28, 0
 278:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 27a:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 27e:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 280:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 282:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 284:	c7 9a       	sbi	0x18, 7	; 24
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 28c:	88 23       	and	r24, r24
 28e:	11 f0       	breq	.+4      	; 0x294 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 290:	c0 9a       	sbi	0x18, 0	; 24
 292:	01 c0       	rjmp	.+2      	; 0x296 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 294:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 296:	c1 9a       	sbi	0x18, 1	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 298:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 29a:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 29c:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 29e:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 2a0:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();        
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 2a4:	b4 9b       	sbis	0x16, 4	; 22
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <lcd_read+0x20>
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <lcd_read+0x22>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 2ae:	b5 99       	sbic	0x16, 5	; 22
 2b0:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 2b2:	b6 99       	sbic	0x16, 6	; 22
 2b4:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 2b6:	b7 99       	sbic	0x16, 7	; 22
 2b8:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 2ba:	c3 98       	cbi	0x18, 3	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 2be:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 2c2:	b4 99       	sbic	0x16, 4	; 22
 2c4:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 2c6:	b5 99       	sbic	0x16, 5	; 22
 2c8:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 2ca:	b6 99       	sbic	0x16, 6	; 22
 2cc:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 2ce:	b7 99       	sbic	0x16, 7	; 22
 2d0:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2d2:	c3 98       	cbi	0x18, 3	; 24
    }
    return data;
}
 2d4:	99 27       	eor	r25, r25
 2d6:	08 95       	ret

000002d8 <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_read>
 2de:	87 fd       	sbrc	r24, 7
 2e0:	fb cf       	rjmp	.-10     	; 0x2d8 <lcd_waitbusy>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_waitbusy+0xc>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_read>
    
}/* lcd_waitbusy */
 2ea:	99 27       	eor	r25, r25
 2ec:	08 95       	ret

000002ee <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2ee:	1f 93       	push	r17
 2f0:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2f2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_waitbusy>
    lcd_write(cmd,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 2f       	mov	r24, r17
 2fa:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_write>
 2fe:	1f 91       	pop	r17
 300:	08 95       	ret

00000302 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 302:	1f 93       	push	r17
 304:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 306:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_waitbusy>
    lcd_write(data,1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	81 2f       	mov	r24, r17
 30e:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_write>
 312:	1f 91       	pop	r17
 314:	08 95       	ret

00000316 <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 316:	66 23       	and	r22, r22
 318:	11 f4       	brne	.+4      	; 0x31e <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 31a:	80 58       	subi	r24, 0x80	; 128
 31c:	01 c0       	rjmp	.+2      	; 0x320 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 31e:	80 54       	subi	r24, 0x40	; 64
 320:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 324:	08 95       	ret

00000326 <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 326:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_waitbusy>
    return lcd_waitbusy();
}
 32a:	99 27       	eor	r25, r25
 32c:	08 95       	ret

0000032e <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 334:	08 95       	ret

00000336 <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 33c:	08 95       	ret

0000033e <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 33e:	1f 93       	push	r17
 340:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 342:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_waitbusy>
    if (c=='\n')
 346:	1a 30       	cpi	r17, 0x0A	; 10
 348:	49 f4       	brne	.+18     	; 0x35c <lcd_putc+0x1e>
 34a:	80 34       	cpi	r24, 0x40	; 64
 34c:	10 f4       	brcc	.+4      	; 0x352 <lcd_putc+0x14>
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	01 c0       	rjmp	.+2      	; 0x354 <lcd_putc+0x16>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	80 58       	subi	r24, 0x80	; 128
 356:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 35a:	04 c0       	rjmp	.+8      	; 0x364 <lcd_putc+0x26>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	81 2f       	mov	r24, r17
 360:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_write>
 364:	1f 91       	pop	r17
 366:	08 95       	ret

00000368 <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 370:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_putc>
 374:	89 91       	ld	r24, Y+
 376:	88 23       	and	r24, r24
 378:	d9 f7       	brne	.-10     	; 0x370 <lcd_puts+0x8>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 388:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_putc>
 38c:	fe 01       	movw	r30, r28
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	84 91       	lpm	r24, Z
 392:	88 23       	and	r24, r24
 394:	c9 f7       	brne	.-14     	; 0x388 <lcd_puts_p+0x8>
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3a4:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3a6:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3a8:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3aa:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3ac:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3ae:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3b0:	bf 9a       	sbi	0x17, 7	; 23
 3b2:	80 ea       	ldi	r24, 0xA0	; 160
 3b4:	9f e0       	ldi	r25, 0x0F	; 15
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_init+0x1a>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3ba:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3bc:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 3be:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
 3c2:	80 ee       	ldi	r24, 0xE0	; 224
 3c4:	94 e0       	ldi	r25, 0x04	; 4
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_init+0x2a>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3ca:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
 3ce:	00 e1       	ldi	r16, 0x10	; 16
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	c8 01       	movw	r24, r16
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_init+0x38>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3d8:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
 3dc:	c8 01       	movw	r24, r16
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_init+0x42>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3e2:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 3e4:	0e 94 11 01 	call	0x222	; 0x222 <toggle_e>
 3e8:	c8 01       	movw	r24, r16
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_init+0x4e>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3ee:	88 e2       	ldi	r24, 0x28	; 40
 3f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3fa:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 404:	8f 2d       	mov	r24, r15
 406:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	08 95       	ret

00000412 <itoa>:
 412:	fb 01       	movw	r30, r22
 414:	9f 01       	movw	r18, r30
 416:	e8 94       	clt
 418:	42 30       	cpi	r20, 0x02	; 2
 41a:	c4 f0       	brlt	.+48     	; 0x44c <itoa+0x3a>
 41c:	45 32       	cpi	r20, 0x25	; 37
 41e:	b4 f4       	brge	.+44     	; 0x44c <itoa+0x3a>
 420:	4a 30       	cpi	r20, 0x0A	; 10
 422:	29 f4       	brne	.+10     	; 0x42e <itoa+0x1c>
 424:	97 fb       	bst	r25, 7
 426:	1e f4       	brtc	.+6      	; 0x42e <itoa+0x1c>
 428:	90 95       	com	r25
 42a:	81 95       	neg	r24
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	64 2f       	mov	r22, r20
 430:	77 27       	eor	r23, r23
 432:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodhi4>
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	8a 33       	cpi	r24, 0x3A	; 58
 43a:	0c f0       	brlt	.+2      	; 0x43e <itoa+0x2c>
 43c:	89 5d       	subi	r24, 0xD9	; 217
 43e:	81 93       	st	Z+, r24
 440:	cb 01       	movw	r24, r22
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	a1 f7       	brne	.-24     	; 0x42e <itoa+0x1c>
 446:	16 f4       	brtc	.+4      	; 0x44c <itoa+0x3a>
 448:	5d e2       	ldi	r21, 0x2D	; 45
 44a:	51 93       	st	Z+, r21
 44c:	10 82       	st	Z, r1
 44e:	c9 01       	movw	r24, r18
 450:	0c 94 2a 02 	jmp	0x454	; 0x454 <strrev>

00000454 <strrev>:
 454:	dc 01       	movw	r26, r24
 456:	fc 01       	movw	r30, r24
 458:	67 2f       	mov	r22, r23
 45a:	71 91       	ld	r23, Z+
 45c:	77 23       	and	r23, r23
 45e:	e1 f7       	brne	.-8      	; 0x458 <strrev+0x4>
 460:	32 97       	sbiw	r30, 0x02	; 2
 462:	04 c0       	rjmp	.+8      	; 0x46c <strrev+0x18>
 464:	7c 91       	ld	r23, X
 466:	6d 93       	st	X+, r22
 468:	70 83       	st	Z, r23
 46a:	62 91       	ld	r22, -Z
 46c:	ae 17       	cp	r26, r30
 46e:	bf 07       	cpc	r27, r31
 470:	c8 f3       	brcs	.-14     	; 0x464 <strrev+0x10>
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <_exit>
