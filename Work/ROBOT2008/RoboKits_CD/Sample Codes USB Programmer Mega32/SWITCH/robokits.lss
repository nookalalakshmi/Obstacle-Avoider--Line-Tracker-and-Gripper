
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000511  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000076  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000041  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000136  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ae  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  9a:	81 ef       	ldi	r24, 0xF1	; 241
  9c:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  9e:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  a0:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  a2:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  a4:	93 9a       	sbi	0x12, 3	; 18
	
	while(1)						//START INFINITE LOOP TO SCAN INPUT FROM PORT
	{
		if (bit_is_clear(PINB,2))	//IF INT2 IS PRESSED
  a6:	b2 99       	sbic	0x16, 2	; 22
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x1c>
			sbi(PORTA,4);			//LED1 ON
  aa:	dc 9a       	sbi	0x1b, 4	; 27
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x1e>
		else						//ELSE
			cbi(PORTA,4);			//LED1 OFF
  ae:	dc 98       	cbi	0x1b, 4	; 27

		if (bit_is_clear(PIND,1))	//IF SW1 IS PRESSED
  b0:	81 99       	sbic	0x10, 1	; 16
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x26>
			sbi(PORTA,5);			//LED2 ON
  b4:	dd 9a       	sbi	0x1b, 5	; 27
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x28>
		else						//ELSE
			cbi(PORTA,5);			//LED2 OFF
  b8:	dd 98       	cbi	0x1b, 5	; 27

		if (bit_is_clear(PIND,2))	//IF INT0 IS PRESSED
  ba:	82 99       	sbic	0x10, 2	; 16
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x30>
			sbi(PORTA,6);			//LED3 ON
  be:	de 9a       	sbi	0x1b, 6	; 27
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x32>
		else						//ELSE
			cbi(PORTA,6);			//LED3 OFF
  c2:	de 98       	cbi	0x1b, 6	; 27
			
		if (bit_is_clear(PIND,3))	//IF INT1 IS PRESSED
  c4:	83 99       	sbic	0x10, 3	; 16
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x3a>
			sbi(PORTA,7);			//LED4 ON
  c8:	df 9a       	sbi	0x1b, 7	; 27
  ca:	ed cf       	rjmp	.-38     	; 0xa6 <main+0x14>
		else						//ELSE
			cbi(PORTA,7);			//LED4 OFF
  cc:	df 98       	cbi	0x1b, 7	; 27
  ce:	eb cf       	rjmp	.-42     	; 0xa6 <main+0x14>

000000d0 <_exit>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <_exit>
