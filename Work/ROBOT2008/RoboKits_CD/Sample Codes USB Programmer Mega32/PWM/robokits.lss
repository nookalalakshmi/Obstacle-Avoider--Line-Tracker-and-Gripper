
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000529  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000549  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000170  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cd  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000180  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f6  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define OC1_DDR DDRD             // OC1 DDR


int main(void)
{
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26

	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  9a:	91 ef       	ldi	r25, 0xF1	; 241
  9c:	91 bb       	out	0x11, r25	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20

	sbi(PORTA,4);					//LED1 ON (INDICATION FOR READY TO USE)
  a2:	dc 9a       	sbi	0x1b, 4	; 27
		
	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  a4:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  a6:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  a8:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  aa:	93 9a       	sbi	0x12, 3	; 18
	

	
	sbi(PORTC,0);					//MOTOR1 forward
  ac:	a8 9a       	sbi	0x15, 0	; 21
	sbi(PORTC,3);					//MOTOR2 reverse
  ae:	ab 9a       	sbi	0x15, 3	; 21
	
	
    uint8_t i = 0;

    OC1_DDR |= _BV(OC1A_PIN) + _BV(OC1B_PIN);    			// set OC1A and OC1B pin as output, required for output toggling 
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	80 66       	ori	r24, 0x60	; 96
  b4:	81 bb       	out	0x11, r24	; 17

    TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0);    	// enable 8 bit PWM, select inverted PWM
  b6:	9f bd       	out	0x2f, r25	; 47
		
    // timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
    // PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
    TCCR1B = _BV(CS11) | _BV(WGM12);
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	8e bd       	out	0x2e, r24	; 46
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	aa e6       	ldi	r26, 0x6A	; 106
  c0:	b8 e1       	ldi	r27, 0x18	; 24
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <main+0x3e>
 
    for (;;)
    {   
        for (i=0; i<255; i++)								/* Decrease speed of motor */
        {
            OCR1AL = i;
  c4:	2a bd       	out	0x2a, r18	; 42
			OCR1BL = i;
  c6:	28 bd       	out	0x28, r18	; 40
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	cd 01       	movw	r24, r26
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	2f 3f       	cpi	r18, 0xFF	; 255
  d2:	c1 f7       	brne	.-16     	; 0xc4 <main+0x32>
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	f8 e1       	ldi	r31, 0x18	; 24
            _delay_ms(25);									// delay 25 ms
        }
        
        for( i=255; i>0; i--)								/* Increase speed of motor */
        {
            OCR1AL = i;            
  d8:	2a bd       	out	0x2a, r18	; 42
			OCR1BL = i;
  da:	28 bd       	out	0x28, r18	; 40
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	cf 01       	movw	r24, r30
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x4c>
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	79 f3       	breq	.-34     	; 0xc4 <main+0x32>
  e6:	f8 cf       	rjmp	.-16     	; 0xd8 <main+0x46>

000000e8 <_exit>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <_exit>
