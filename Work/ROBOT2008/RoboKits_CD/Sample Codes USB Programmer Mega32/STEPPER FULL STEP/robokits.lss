
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000005c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000005e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000535  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c9  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000105  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000280  00000000  00000000  00000fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  9a:	81 ef       	ldi	r24, 0xF1	; 241
  9c:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTA,4);					//LED1 ON (INDICATION FOR READY TO USE)
  9e:	dc 9a       	sbi	0x1b, 4	; 27
	
	
	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  a0:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  a2:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  a4:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  a6:	93 9a       	sbi	0x12, 3	; 18

	while(1)
	{
		mainloop:
		if (bit_is_clear(PINB,2))			//IF SW1 IS PRESSED STEPPER1 FORWARD
  a8:	b2 99       	sbic	0x16, 2	; 22
  aa:	19 c0       	rjmp	.+50     	; 0xde <main+0x4c>
  ac:	50 e1       	ldi	r21, 0x10	; 16
  ae:	e2 ee       	ldi	r30, 0xE2	; 226
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	40 e2       	ldi	r20, 0x20	; 32
  b4:	30 e4       	ldi	r19, 0x40	; 64
  b6:	20 e8       	ldi	r18, 0x80	; 128
		{
			while(1)
			{
				PORTC=0x10;						//COIL1 +
  b8:	55 bb       	out	0x15, r21	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	cf 01       	movw	r24, r30
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2a>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x20;						//COIL2 +
  c0:	45 bb       	out	0x15, r20	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	cf 01       	movw	r24, r30
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x32>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x40;						//COIL1 -
  c8:	35 bb       	out	0x15, r19	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	cf 01       	movw	r24, r30
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x3a>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x80;						//COIL2 -
  d0:	25 bb       	out	0x15, r18	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	cf 01       	movw	r24, r30
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x42>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				if (bit_is_set(PINB,2))		//CHECK WHETHER THE SWITCH IS STILL PRESSED
  d8:	b2 9b       	sbis	0x16, 2	; 22
  da:	ee cf       	rjmp	.-36     	; 0xb8 <main+0x26>
  dc:	50 c0       	rjmp	.+160    	; 0x17e <main+0xec>
				{
					PORTC=0x00;					//CLEAR PORTC				
					goto mainloop;				//IF NOT GOTO MAINLOOP
				}
			}
		}
		else if (bit_is_clear(PIND,1))		//IF SW2 IS PRESSED STEPPER1 BACKWARD
  de:	81 99       	sbic	0x10, 1	; 16
  e0:	19 c0       	rjmp	.+50     	; 0x114 <main+0x82>
  e2:	50 e8       	ldi	r21, 0x80	; 128
  e4:	e2 ee       	ldi	r30, 0xE2	; 226
  e6:	f4 e0       	ldi	r31, 0x04	; 4
  e8:	40 e4       	ldi	r20, 0x40	; 64
  ea:	30 e2       	ldi	r19, 0x20	; 32
  ec:	20 e1       	ldi	r18, 0x10	; 16
		{
			while(1)
			{
				PORTC=0x80;						//COIL1 +
  ee:	55 bb       	out	0x15, r21	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	cf 01       	movw	r24, r30
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x60>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x40;						//COIL2 -
  f6:	45 bb       	out	0x15, r20	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	cf 01       	movw	r24, r30
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x68>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x20;						//COIL1 -
  fe:	35 bb       	out	0x15, r19	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	cf 01       	movw	r24, r30
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x10;						//COIL2 +
 106:	25 bb       	out	0x15, r18	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	cf 01       	movw	r24, r30
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x78>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				if (bit_is_set(PIND,1))
 10e:	81 9b       	sbis	0x10, 1	; 16
 110:	ee cf       	rjmp	.-36     	; 0xee <main+0x5c>
 112:	35 c0       	rjmp	.+106    	; 0x17e <main+0xec>
				{
					PORTC=0x00;					//CLEAR PORTC			
					goto mainloop;				//IF NOT GOTO MAINLOOP
				}
			}		
		}
		else if (bit_is_clear(PIND,2))		//IF SW3 IS PRESSED STEPPER2 FORWARD
 114:	82 99       	sbic	0x10, 2	; 16
 116:	19 c0       	rjmp	.+50     	; 0x14a <main+0xb8>
 118:	51 e0       	ldi	r21, 0x01	; 1
 11a:	e2 ee       	ldi	r30, 0xE2	; 226
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	42 e0       	ldi	r20, 0x02	; 2
 120:	34 e0       	ldi	r19, 0x04	; 4
 122:	28 e0       	ldi	r18, 0x08	; 8
		{
			while(1)
			{
				PORTC=0x01;						//COIL1 +
 124:	55 bb       	out	0x15, r21	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	cf 01       	movw	r24, r30
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x96>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x02;						//COIL2 +
 12c:	45 bb       	out	0x15, r20	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12e:	cf 01       	movw	r24, r30
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x9e>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x04;						//COIL1 -
 134:	35 bb       	out	0x15, r19	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 136:	cf 01       	movw	r24, r30
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa6>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x08;						//COIL2 -
 13c:	25 bb       	out	0x15, r18	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13e:	cf 01       	movw	r24, r30
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xae>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				if (bit_is_set(PIND,2))		//CHECK WHETHER THE SWITCH IS STILL PRESSED
 144:	82 9b       	sbis	0x10, 2	; 16
 146:	ee cf       	rjmp	.-36     	; 0x124 <main+0x92>
 148:	1a c0       	rjmp	.+52     	; 0x17e <main+0xec>
				{
					PORTC=0x00;					//CLEAR PORTC				
					goto mainloop;				//IF NOT GOTO MAINLOOP
				}
			}
		}
		else if (bit_is_clear(PIND,3))			//IF SW4 IS PRESSED STEPPER2 BACKWARD
 14a:	83 99       	sbic	0x10, 3	; 16
 14c:	18 c0       	rjmp	.+48     	; 0x17e <main+0xec>
 14e:	58 e0       	ldi	r21, 0x08	; 8
 150:	e2 ee       	ldi	r30, 0xE2	; 226
 152:	f4 e0       	ldi	r31, 0x04	; 4
 154:	44 e0       	ldi	r20, 0x04	; 4
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	21 e0       	ldi	r18, 0x01	; 1
		{
			while(1)
			{
				PORTC=0x08;						//COIL1 +
 15a:	55 bb       	out	0x15, r21	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15c:	cf 01       	movw	r24, r30
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0xcc>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x04;						//COIL2 -
 162:	45 bb       	out	0x15, r20	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	cf 01       	movw	r24, r30
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xd4>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x02;						//COIL1 -
 16a:	35 bb       	out	0x15, r19	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	cf 01       	movw	r24, r30
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xdc>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				PORTC=0x01;						//COIL2 +
 172:	25 bb       	out	0x15, r18	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	cf 01       	movw	r24, r30
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xe4>
				_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				if (bit_is_set(PIND,3))
 17a:	83 9b       	sbis	0x10, 3	; 16
 17c:	ee cf       	rjmp	.-36     	; 0x15a <main+0xc8>
				{
					PORTC=0x00;					//CLEAR PORTC			
					goto mainloop;				//IF NOT GOTO MAINLOOP
				}
			}		
		}
		else
			PORTC=0x00;
 17e:	15 ba       	out	0x15, r1	; 21
 180:	93 cf       	rjmp	.-218    	; 0xa8 <main+0x16>

00000182 <_exit>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <_exit>
