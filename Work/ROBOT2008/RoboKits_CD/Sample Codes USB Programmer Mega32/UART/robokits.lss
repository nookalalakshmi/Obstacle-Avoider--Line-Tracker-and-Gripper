
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800060  00800060  0000046e  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000095  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f7  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cb  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c6  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000176  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_13>
  38:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_14>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000054 <__c.1540>:
  54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1538>:
  6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1536>:
  81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  91:	3a 20 00                                            : .

00000094 <__c.1534>:
  94:	0a 0a 50 72 65 73 73 20 61 6e 79 20 6b 65 79 20     ..Press any key 
  a4:	6f 6e 20 6b 65 79 62 6f 61 72 64 3a 20 00           on keyboard: .

000000b2 <__c.1532>:
  b2:	0d 0a 0a 57 72 69 74 69 6e 67 20 6e 75 6d 62 65     ...Writing numbe
  c2:	72 20 74 6f 20 55 41 52 54 3a 20 00                 r to UART: .

000000ce <__c.1530>:
  ce:	0d 0a 0a 56 69 73 69 74 20 55 73 20 61 74 20 77     ...Visit Us at w
  de:	77 77 2e 72 6f 62 6f 6b 69 74 73 2e 6f 72 67 2e     ww.robokits.org.
  ee:	20 00                                                .

000000f0 <__c.1528>:
  f0:	0d 0a 0a 53 61 6d 70 6c 65 20 63 6f 64 65 20 6d     ...Sample code m
 100:	61 64 65 20 62 79 20 52 6f 62 6f 6b 69 74 73 20     ade by Robokits 
 110:	49 6e 64 69 61 20 66 6f 72 20 52 4f 42 4f 47 52     India for ROBOGR
 120:	49 44 2e 20 00 00                                   ID. ..

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf e5       	ldi	r28, 0x5F	; 95
 12c:	d8 e0       	ldi	r29, 0x08	; 8
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	a0 e6       	ldi	r26, 0x60	; 96
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	ea ef       	ldi	r30, 0xFA	; 250
 13a:	f3 e0       	ldi	r31, 0x03	; 3
 13c:	02 c0       	rjmp	.+4      	; 0x142 <.do_copy_data_start>

0000013e <.do_copy_data_loop>:
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0

00000142 <.do_copy_data_start>:
 142:	a0 36       	cpi	r26, 0x60	; 96
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <.do_copy_data_loop>

00000148 <__do_clear_bss>:
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	a0 e6       	ldi	r26, 0x60	; 96
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	a5 3a       	cpi	r26, 0xA5	; 165
 154:	b1 07       	cpc	r27, r17
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	0e 94 b2 00 	call	0x164	; 0x164 <main>
 15c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <main>:
#define UART_BAUD_RATE      4800    //Change baud rate here


int main(void)
{
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	27 97       	sbiw	r28, 0x07	; 7
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
    unsigned int c;
    char buffer[7];
    int  num=134;
    
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
 180:	8b ef       	ldi	r24, 0xFB	; 251
 182:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 184:	81 ef       	ldi	r24, 0xF1	; 241
 186:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTA,4);					//LED1 ON (INDICATION FOR READY TO USE)									
 188:	dc 9a       	sbi	0x1b, 4	; 27

	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
 18a:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
 18c:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 18e:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 190:	93 9a       	sbi	0x12, 3	; 18
	
    /*
     *  Initialize UART library, pass baudrate and AVR cpu clock
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 19a:	78 94       	sei
    
    /*
     *  Transmit string to UART
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
 
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("\r\n\nSample code made by Robokits India for ROBOGRID. ");
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
	uart_puts_P("\r\n\nVisit Us at www.robokits.org. ");
 1a4:	8e ec       	ldi	r24, 0xCE	; 206
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
	uart_puts_P("\r\n\nWriting number to UART: ");
 1ac:	82 eb       	ldi	r24, 0xB2	; 178
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
 
      
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)    
 1b4:	4a e0       	ldi	r20, 0x0A	; 10
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	8e 01       	movw	r16, r28
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	b8 01       	movw	r22, r16
 1c0:	86 e8       	ldi	r24, 0x86	; 134
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b7 01 	call	0x36e	; 0x36e <itoa>
	uart_puts(buffer);        // and transmit string to UART     
 1c8:	c8 01       	movw	r24, r16
 1ca:	0e 94 9c 01 	call	0x338	; 0x338 <uart_puts>

    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	0e 94 8a 01 	call	0x314	; 0x314 <uart_putc>
	
	uart_puts_P("\n\nPress any key on keyboard: ");
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
    
    for(;;)
    {
        /*
         * Get received character from ringbuffer
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 1dc:	0e 94 6f 01 	call	0x2de	; 0x2de <uart_getc>
 1e0:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 1e2:	90 fd       	sbrc	r25, 0
 1e4:	fb cf       	rjmp	.-10     	; 0x1dc <main+0x78>
        {
            /* 
             * no data available from UART 
             */
        }
        else
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 1e6:	93 ff       	sbrs	r25, 3
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <main+0x8e>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 1ea:	81 e8       	ldi	r24, 0x81	; 129
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 1f2:	12 ff       	sbrs	r17, 2
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <main+0x9a>
            {
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 1f6:	8c e6       	ldi	r24, 0x6C	; 108
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 1fe:	11 ff       	sbrs	r17, 1
 200:	04 c0       	rjmp	.+8      	; 0x20a <main+0xa6>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 202:	84 e5       	ldi	r24, 0x54	; 84
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 a9 01 	call	0x352	; 0x352 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 20a:	80 2f       	mov	r24, r16
 20c:	0e 94 8a 01 	call	0x314	; 0x314 <uart_putc>
 210:	e5 cf       	rjmp	.-54     	; 0x1dc <main+0x78>

00000212 <__vector_13>:
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
    unsigned char tmphead;
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 226:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 228:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 22a:	e0 91 a2 00 	lds	r30, 0x00A2
 22e:	ef 5f       	subi	r30, 0xFF	; 255
 230:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 232:	80 91 a3 00 	lds	r24, 0x00A3
 236:	e8 17       	cp	r30, r24
 238:	11 f4       	brne	.+4      	; 0x23e <__vector_13+0x2c>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	08 c0       	rjmp	.+16     	; 0x24e <__vector_13+0x3c>
 23e:	89 2f       	mov	r24, r25
 240:	88 71       	andi	r24, 0x18	; 24
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 242:	e0 93 a2 00 	sts	0x00A2, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 246:	ff 27       	eor	r31, r31
 248:	e0 58       	subi	r30, 0x80	; 128
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 24e:	80 93 a4 00 	sts	0x00A4, r24
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_14>:
}


SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 278:	90 91 a0 00 	lds	r25, 0x00A0
 27c:	80 91 a1 00 	lds	r24, 0x00A1
 280:	98 17       	cp	r25, r24
 282:	61 f0       	breq	.+24     	; 0x29c <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 284:	e0 91 a1 00 	lds	r30, 0x00A1
 288:	ef 5f       	subi	r30, 0xFF	; 255
 28a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 28c:	e0 93 a1 00 	sts	0x00A1, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 290:	ff 27       	eor	r31, r31
 292:	e0 5a       	subi	r30, 0xA0	; 160
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	80 81       	ld	r24, Z
 298:	8c b9       	out	0x0c, r24	; 12
 29a:	01 c0       	rjmp	.+2      	; 0x29e <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 29c:	55 98       	cbi	0x0a, 5	; 10
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <uart_init>:
    }
}


/*************************************************************************
Function: uart_init()
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 2b0:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 2b2:	10 92 a0 00 	sts	0x00A0, r1
    UART_TxTail = 0;
 2b6:	10 92 a1 00 	sts	0x00A1, r1
    UART_RxHead = 0;
 2ba:	10 92 a2 00 	sts	0x00A2, r1
    UART_RxTail = 0;
 2be:	10 92 a3 00 	sts	0x00A3, r1
    
#if defined( AT90_UART )
    /* set baud rate */
    UBRR = (unsigned char)baudrate; 

    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 2c2:	97 ff       	sbrs	r25, 7
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 2ca:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 2cc:	83 2f       	mov	r24, r19
 2ce:	99 27       	eor	r25, r25
 2d0:	80 bd       	out	0x20, r24	; 32
    UBRRL = (unsigned char) baudrate;
 2d2:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 2d4:	88 e9       	ldi	r24, 0x98	; 152
 2d6:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 2d8:	86 e8       	ldi	r24, 0x86	; 134
 2da:	80 bd       	out	0x20, r24	; 32
 2dc:	08 95       	ret

000002de <uart_getc>:
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
   		baudrate &= ~0x8000;
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    UBRR0L = (unsigned char) baudrate;

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    #endif 

#elif defined ( ATMEGA_UART )
    /* set baud rate */
    if ( baudrate & 0x8000 ) 
    {
    	UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    	baudrate &= ~0x8000;
    }
    UBRRHI = (unsigned char)(baudrate>>8);
    UBRR   = (unsigned char) baudrate;

    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */


/*************************************************************************
Function: uart_getc()
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 2de:	90 91 a2 00 	lds	r25, 0x00A2
 2e2:	80 91 a3 00 	lds	r24, 0x00A3
 2e6:	98 17       	cp	r25, r24
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <uart_getc+0x12>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2f0:	e0 91 a3 00 	lds	r30, 0x00A3
 2f4:	ef 5f       	subi	r30, 0xFF	; 255
 2f6:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 2f8:	e0 93 a3 00 	sts	0x00A3, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2fc:	ff 27       	eor	r31, r31
 2fe:	e0 58       	subi	r30, 0x80	; 128
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 304:	80 91 a4 00 	lds	r24, 0x00A4
 308:	99 27       	eor	r25, r25
 30a:	98 2f       	mov	r25, r24
 30c:	88 27       	eor	r24, r24
 30e:	82 0f       	add	r24, r18
 310:	91 1d       	adc	r25, r1

}/* uart_getc */
 312:	08 95       	ret

00000314 <uart_putc>:


/*************************************************************************
Function: uart_putc()
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 314:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 316:	90 91 a0 00 	lds	r25, 0x00A0
 31a:	9f 5f       	subi	r25, 0xFF	; 255
 31c:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 31e:	80 91 a1 00 	lds	r24, 0x00A1
 322:	98 17       	cp	r25, r24
 324:	e1 f3       	breq	.-8      	; 0x31e <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 326:	e9 2f       	mov	r30, r25
 328:	ff 27       	eor	r31, r31
 32a:	e0 5a       	subi	r30, 0xA0	; 160
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 330:	90 93 a0 00 	sts	0x00A0, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 334:	55 9a       	sbi	0x0a, 5	; 10
 336:	08 95       	ret

00000338 <uart_puts>:

}/* uart_putc */


/*************************************************************************
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
 33e:	03 c0       	rjmp	.+6      	; 0x346 <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	0e 94 8a 01 	call	0x314	; 0x314 <uart_putc>
 346:	88 81       	ld	r24, Y
 348:	88 23       	and	r24, r24
 34a:	d1 f7       	brne	.-12     	; 0x340 <uart_puts+0x8>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <uart_puts_p>:

}/* uart_puts */


/*************************************************************************
Function: uart_puts_p()
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 35a:	0e 94 8a 01 	call	0x314	; 0x314 <uart_putc>
 35e:	fe 01       	movw	r30, r28
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	84 91       	lpm	r24, Z
 364:	88 23       	and	r24, r24
 366:	c9 f7       	brne	.-14     	; 0x35a <uart_puts_p+0x8>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <itoa>:
 36e:	fb 01       	movw	r30, r22
 370:	9f 01       	movw	r18, r30
 372:	e8 94       	clt
 374:	42 30       	cpi	r20, 0x02	; 2
 376:	c4 f0       	brlt	.+48     	; 0x3a8 <itoa+0x3a>
 378:	45 32       	cpi	r20, 0x25	; 37
 37a:	b4 f4       	brge	.+44     	; 0x3a8 <itoa+0x3a>
 37c:	4a 30       	cpi	r20, 0x0A	; 10
 37e:	29 f4       	brne	.+10     	; 0x38a <itoa+0x1c>
 380:	97 fb       	bst	r25, 7
 382:	1e f4       	brtc	.+6      	; 0x38a <itoa+0x1c>
 384:	90 95       	com	r25
 386:	81 95       	neg	r24
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	64 2f       	mov	r22, r20
 38c:	77 27       	eor	r23, r23
 38e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__udivmodhi4>
 392:	80 5d       	subi	r24, 0xD0	; 208
 394:	8a 33       	cpi	r24, 0x3A	; 58
 396:	0c f0       	brlt	.+2      	; 0x39a <itoa+0x2c>
 398:	89 5d       	subi	r24, 0xD9	; 217
 39a:	81 93       	st	Z+, r24
 39c:	cb 01       	movw	r24, r22
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	a1 f7       	brne	.-24     	; 0x38a <itoa+0x1c>
 3a2:	16 f4       	brtc	.+4      	; 0x3a8 <itoa+0x3a>
 3a4:	5d e2       	ldi	r21, 0x2D	; 45
 3a6:	51 93       	st	Z+, r21
 3a8:	10 82       	st	Z, r1
 3aa:	c9 01       	movw	r24, r18
 3ac:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <strrev>

000003b0 <strrev>:
 3b0:	dc 01       	movw	r26, r24
 3b2:	fc 01       	movw	r30, r24
 3b4:	67 2f       	mov	r22, r23
 3b6:	71 91       	ld	r23, Z+
 3b8:	77 23       	and	r23, r23
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <strrev+0x4>
 3bc:	32 97       	sbiw	r30, 0x02	; 2
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <strrev+0x18>
 3c0:	7c 91       	ld	r23, X
 3c2:	6d 93       	st	X+, r22
 3c4:	70 83       	st	Z, r23
 3c6:	62 91       	ld	r22, -Z
 3c8:	ae 17       	cp	r26, r30
 3ca:	bf 07       	cpc	r27, r31
 3cc:	c8 f3       	brcs	.-14     	; 0x3c0 <strrev+0x10>
 3ce:	08 95       	ret

000003d0 <__udivmodhi4>:
 3d0:	aa 1b       	sub	r26, r26
 3d2:	bb 1b       	sub	r27, r27
 3d4:	51 e1       	ldi	r21, 0x11	; 17
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <__udivmodhi4_ep>

000003d8 <__udivmodhi4_loop>:
 3d8:	aa 1f       	adc	r26, r26
 3da:	bb 1f       	adc	r27, r27
 3dc:	a6 17       	cp	r26, r22
 3de:	b7 07       	cpc	r27, r23
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <__udivmodhi4_ep>
 3e2:	a6 1b       	sub	r26, r22
 3e4:	b7 0b       	sbc	r27, r23

000003e6 <__udivmodhi4_ep>:
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	5a 95       	dec	r21
 3ec:	a9 f7       	brne	.-22     	; 0x3d8 <__udivmodhi4_loop>
 3ee:	80 95       	com	r24
 3f0:	90 95       	com	r25
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <_exit>
