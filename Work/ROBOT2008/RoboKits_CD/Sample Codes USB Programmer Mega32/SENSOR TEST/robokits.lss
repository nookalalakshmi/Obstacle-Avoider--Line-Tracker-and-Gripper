
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000378  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b9  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f2  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024d  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000641  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001db  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025b  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  9a:	81 ef       	ldi	r24, 0xF1	; 241
  9c:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
									
    lcd_init(LCD_DISP_ON);				/* initialize display, cursor off */
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	0e 94 28 01 	call	0x250	; 0x250 <lcd_init>
	lcd_clrscr();						/* clear display and home cursor */        
  a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_clrscr>
	lcd_puts("ROBOKITS NEOBOT\n");		/* put string to display (line 1) with linefeed */		
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts>
	lcd_puts("SENSOR TEST");		/* cursor is now on second line, write second line */										
  b0:	81 e7       	ldi	r24, 0x71	; 113
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts>

	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  b8:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  ba:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  bc:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  be:	93 9a       	sbi	0x12, 3	; 18
	
	while(1)						//START INFINITE LOOP TO SCAN INPUT FROM PORT
	{
		if (bit_is_clear(PINA,0))	//IF Sensor1 senses obstacle
  c0:	c8 99       	sbic	0x19, 0	; 25
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x36>
			sbi(PORTA,5);			//LED2 ON
  c4:	dd 9a       	sbi	0x1b, 5	; 27
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x38>
		else						//ELSE
			cbi(PORTA,5);			//LED2 OFF
  c8:	dd 98       	cbi	0x1b, 5	; 27

		if (bit_is_clear(PIND,1))	//IF Sensor2 senses obstacle
  ca:	81 99       	sbic	0x10, 1	; 16
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x40>
			sbi(PORTA,6);			//LED3 ON
  ce:	de 9a       	sbi	0x1b, 6	; 27
  d0:	f7 cf       	rjmp	.-18     	; 0xc0 <main+0x2e>
		else						//ELSE
			cbi(PORTA,6);			//LED3 OFF
  d2:	de 98       	cbi	0x1b, 6	; 27
  d4:	f5 cf       	rjmp	.-22     	; 0xc0 <main+0x2e>

000000d6 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
  d6:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_high();
    lcd_e_delay();
  d8:	00 c0       	rjmp	.+0      	; 0xda <toggle_e+0x4>
    lcd_e_low();
  da:	c3 98       	cbi	0x18, 3	; 24
  dc:	08 95       	ret

000000de <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  e2:	66 23       	and	r22, r22
  e4:	11 f0       	breq	.+4      	; 0xea <lcd_write+0xc>
       lcd_rs_high();
  e6:	c0 9a       	sbi	0x18, 0	; 24
  e8:	01 c0       	rjmp	.+2      	; 0xec <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  ea:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
  ec:	c1 98       	cbi	0x18, 1	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  ee:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  f0:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  f2:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  f4:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  f6:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  f8:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  fa:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  fc:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  fe:	87 fd       	sbrc	r24, 7
 100:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 102:	c8 2f       	mov	r28, r24
 104:	dd 27       	eor	r29, r29
 106:	c6 fd       	sbrc	r28, 6
 108:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 10a:	c5 fd       	sbrc	r28, 5
 10c:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 10e:	c4 fd       	sbrc	r28, 4
 110:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 112:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 116:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 118:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 11a:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 11c:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 11e:	c3 fd       	sbrc	r28, 3
 120:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 122:	c2 fd       	sbrc	r28, 2
 124:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 126:	c1 fd       	sbrc	r28, 1
 128:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 12a:	c0 fd       	sbrc	r28, 0
 12c:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 132:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 134:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 136:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 138:	c7 9a       	sbi	0x18, 7	; 24
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 144:	c0 9a       	sbi	0x18, 0	; 24
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 148:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 14a:	c1 9a       	sbi	0x18, 1	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 14c:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 14e:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 150:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 152:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 154:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();        
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 158:	b4 9b       	sbis	0x16, 4	; 22
 15a:	02 c0       	rjmp	.+4      	; 0x160 <lcd_read+0x20>
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_read+0x22>
 160:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 162:	b5 99       	sbic	0x16, 5	; 22
 164:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 166:	b6 99       	sbic	0x16, 6	; 22
 168:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 16a:	b7 99       	sbic	0x16, 7	; 22
 16c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 16e:	c3 98       	cbi	0x18, 3	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 172:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 176:	b4 99       	sbic	0x16, 4	; 22
 178:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 17a:	b5 99       	sbic	0x16, 5	; 22
 17c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 17e:	b6 99       	sbic	0x16, 6	; 22
 180:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 182:	b7 99       	sbic	0x16, 7	; 22
 184:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 186:	c3 98       	cbi	0x18, 3	; 24
    }
    return data;
}
 188:	99 27       	eor	r25, r25
 18a:	08 95       	ret

0000018c <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_read>
 192:	87 fd       	sbrc	r24, 7
 194:	fb cf       	rjmp	.-10     	; 0x18c <lcd_waitbusy>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_waitbusy+0xc>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_read>
    
}/* lcd_waitbusy */
 19e:	99 27       	eor	r25, r25
 1a0:	08 95       	ret

000001a2 <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1a2:	1f 93       	push	r17
 1a4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1a6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_waitbusy>
    lcd_write(cmd,0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 2f       	mov	r24, r17
 1ae:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write>
 1b2:	1f 91       	pop	r17
 1b4:	08 95       	ret

000001b6 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1b6:	1f 93       	push	r17
 1b8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1ba:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_waitbusy>
    lcd_write(data,1);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write>
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 1ca:	66 23       	and	r22, r22
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1ce:	80 58       	subi	r24, 0x80	; 128
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1d2:	80 54       	subi	r24, 0x40	; 64
 1d4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
 1d8:	08 95       	ret

000001da <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 1da:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_waitbusy>
    return lcd_waitbusy();
}
 1de:	99 27       	eor	r25, r25
 1e0:	08 95       	ret

000001e2 <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
 1e8:	08 95       	ret

000001ea <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
 1f0:	08 95       	ret

000001f2 <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1f2:	1f 93       	push	r17
 1f4:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_waitbusy>
    if (c=='\n')
 1fa:	1a 30       	cpi	r17, 0x0A	; 10
 1fc:	49 f4       	brne	.+18     	; 0x210 <lcd_putc+0x1e>
 1fe:	80 34       	cpi	r24, 0x40	; 64
 200:	10 f4       	brcc	.+4      	; 0x206 <lcd_putc+0x14>
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	01 c0       	rjmp	.+2      	; 0x208 <lcd_putc+0x16>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	80 58       	subi	r24, 0x80	; 128
 20a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
 20e:	04 c0       	rjmp	.+8      	; 0x218 <lcd_putc+0x26>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 2f       	mov	r24, r17
 214:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write>
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 224:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_putc>
 228:	89 91       	ld	r24, Y+
 22a:	88 23       	and	r24, r24
 22c:	d9 f7       	brne	.-10     	; 0x224 <lcd_puts+0x8>
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 23c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_putc>
 240:	fe 01       	movw	r30, r28
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	84 91       	lpm	r24, Z
 246:	88 23       	and	r24, r24
 248:	c9 f7       	brne	.-14     	; 0x23c <lcd_puts_p+0x8>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 258:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 25a:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 25c:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 25e:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 260:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 262:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 264:	bf 9a       	sbi	0x17, 7	; 23
 266:	80 ea       	ldi	r24, 0xA0	; 160
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x1a>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 26e:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 270:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 272:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
 276:	80 ee       	ldi	r24, 0xE0	; 224
 278:	94 e0       	ldi	r25, 0x04	; 4
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x2a>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 27e:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
 282:	00 e1       	ldi	r16, 0x10	; 16
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	c8 01       	movw	r24, r16
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x38>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 28c:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
 290:	c8 01       	movw	r24, r16
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x42>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 296:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 298:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
 29c:	c8 01       	movw	r24, r16
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x4e>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2b8:	8f 2d       	mov	r24, r15
 2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_command>
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <_exit>
