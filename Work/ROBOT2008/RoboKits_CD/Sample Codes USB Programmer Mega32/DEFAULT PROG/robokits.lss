
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  00000444  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000db  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000617  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000301  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007cd  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000228  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000029b  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  8a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:

unsigned char timer2_counter=0;

SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	cli();
  9e:	f8 94       	cli
	if(timer2_counter==3)
  a0:	80 91 80 00 	lds	r24, 0x0080
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	b9 f4       	brne	.+46     	; 0xd6 <__vector_5+0x44>
	{
		timer2_counter=0;
  a8:	10 92 80 00 	sts	0x0080, r1
		if (bit_is_clear(PINA, 4))		//BLINK LED1 ON TIMER INTERRUPT
  ac:	cc 99       	sbic	0x19, 4	; 25
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__vector_5+0x22>
			sbi(PORTA,4);				//LED1 ON
  b0:	dc 9a       	sbi	0x1b, 4	; 27
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <__vector_5+0x24>
		else							//ELSE
			cbi(PORTA,4);				//LED1 OFF	
  b4:	dc 98       	cbi	0x1b, 4	; 27
		if (bit_is_clear(PINA, 5))		//BLINK LED2 ON TIMER INTERRUPT
  b6:	cd 99       	sbic	0x19, 5	; 25
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_5+0x2c>
			sbi(PORTA,5);				//LED2 ON
  ba:	dd 9a       	sbi	0x1b, 5	; 27
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <__vector_5+0x2e>
		else							//ELSE
			cbi(PORTA,5);				//LED2 OFF			
  be:	dd 98       	cbi	0x1b, 5	; 27
		if (bit_is_clear(PINA, 6))		//BLINK LED3 ON TIMER INTERRUPT
  c0:	ce 99       	sbic	0x19, 6	; 25
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__vector_5+0x36>
			sbi(PORTA,6);				//LED3 ON
  c4:	de 9a       	sbi	0x1b, 6	; 27
  c6:	01 c0       	rjmp	.+2      	; 0xca <__vector_5+0x38>
		else							//ELSE
			cbi(PORTA,6);				//LED3 OFF	
  c8:	de 98       	cbi	0x1b, 6	; 27
		if (bit_is_clear(PINA, 7))		//BLINK LED4 ON TIMER INTERRUPT
  ca:	cf 99       	sbic	0x19, 7	; 25
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__vector_5+0x40>
			sbi(PORTA,7);				//LED4 ON
  ce:	df 9a       	sbi	0x1b, 7	; 27
  d0:	05 c0       	rjmp	.+10     	; 0xdc <__vector_5+0x4a>
		else							//ELSE
			cbi(PORTA,7);				//LED4 OFF			
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	03 c0       	rjmp	.+6      	; 0xdc <__vector_5+0x4a>
	}
	else
	{
		timer2_counter++;
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 80 00 	sts	0x0080, r24
	}
	
	if(bit_is_clear(PINB,2))
  dc:	b2 99       	sbic	0x16, 2	; 22
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_5+0x52>
		TCNT2 = 200;
  e0:	88 ec       	ldi	r24, 0xC8	; 200
  e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_5+0x58>
	else if(bit_is_clear(PIND,1))
  e4:	81 99       	sbic	0x10, 1	; 16
  e6:	03 c0       	rjmp	.+6      	; 0xee <__vector_5+0x5c>
		TCNT2 = 150;
  e8:	86 e9       	ldi	r24, 0x96	; 150
  ea:	84 bd       	out	0x24, r24	; 36
  ec:	09 c0       	rjmp	.+18     	; 0x100 <__vector_5+0x6e>
	else if(bit_is_clear(PIND,2))
  ee:	82 99       	sbic	0x10, 2	; 16
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_5+0x64>
		TCNT2 = 100;
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	fa cf       	rjmp	.-12     	; 0xea <__vector_5+0x58>
	else if(bit_is_clear(PIND,3))
  f6:	83 99       	sbic	0x10, 3	; 16
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__vector_5+0x6c>
		TCNT2 = 50;
  fa:	82 e3       	ldi	r24, 0x32	; 50
  fc:	f6 cf       	rjmp	.-20     	; 0xea <__vector_5+0x58>
	else
		TCNT2=0;
  fe:	14 bc       	out	0x24, r1	; 36
	sei();
 100:	78 94       	sei
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:
}												


/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 10e:	10 92 80 00 	sts	0x0080, r1
	int i;
	timer2_counter=0;
	
    OC1_DDR |= _BV(OC1A_PIN) + _BV(OC1B_PIN);    			// set OC1A and OC1B pin as output, required for output toggling 
 112:	81 b3       	in	r24, 0x11	; 17
 114:	80 66       	ori	r24, 0x60	; 96
 116:	81 bb       	out	0x11, r24	; 17

    TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0);    	// enable 8 bit PWM, select inverted PWM
 118:	81 ef       	ldi	r24, 0xF1	; 241
 11a:	8f bd       	out	0x2f, r24	; 47
		
    // timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
    // PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
    TCCR1B = _BV(CS11) | _BV(WGM12);	
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	8e bd       	out	0x2e, r24	; 46
	
	TCCR2 = _BV(CS22) | _BV(CS21) | _BV(CS20); 
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK,TOIE2);
 124:	89 b7       	in	r24, 0x39	; 57
 126:	80 64       	ori	r24, 0x40	; 64
 128:	89 bf       	out	0x39, r24	; 57
	TCNT2=0;
 12a:	14 bc       	out	0x24, r1	; 36
	sei();
 12c:	78 94       	sei
	
	PORTA=0XF0;		
 12e:	80 ef       	ldi	r24, 0xF0	; 240
 130:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
 132:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
 134:	8b ef       	ldi	r24, 0xFB	; 251
 136:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 138:	81 ef       	ldi	r24, 0xF1	; 241
 13a:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 bb       	out	0x14, r24	; 20
	
	PORTC=0x55;					//All motors forward	
 140:	85 e5       	ldi	r24, 0x55	; 85
 142:	85 bb       	out	0x15, r24	; 21
	
	
    lcd_init(LCD_DISP_ON);				/* initialize display, cursor off */
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_init>
	lcd_clrscr();						/* clear display and home cursor */        
 14a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_clrscr>
	lcd_puts("ROBOKITS INDIA\n");		/* put string to display (line 1) with linefeed */		
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_puts>
	lcd_puts("ROBOKITS.CO.IN");		/* cursor is now on second line, write second line */		
 156:	80 e7       	ldi	r24, 0x70	; 112
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_puts>


	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
 15e:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
 160:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 162:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 164:	93 9a       	sbi	0x12, 3	; 18
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	aa e6       	ldi	r26, 0x6A	; 106
 16c:	b8 e1       	ldi	r27, 0x18	; 24
 16e:	07 c0       	rjmp	.+14     	; 0x17e <main+0x70>

	
	for(;1;)
	{
        for (i=0; i<255; i++)								/* Decrease speed of motor */
        {
            OCR1AL = i;
 170:	2a bd       	out	0x2a, r18	; 42
			OCR1BL = i;
 172:	28 bd       	out	0x28, r18	; 40
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	cd 01       	movw	r24, r26
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x68>
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	2f 3f       	cpi	r18, 0xFF	; 255
 180:	31 05       	cpc	r19, r1
 182:	b4 f3       	brlt	.-20     	; 0x170 <main+0x62>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	ea e6       	ldi	r30, 0x6A	; 106
 18a:	f8 e1       	ldi	r31, 0x18	; 24
            _delay_ms(25);									// delay 25 ms
        }
        
        for( i=255; i>0; i--)								/* Increase speed of motor */
        {
            OCR1AL = i;            
 18c:	2a bd       	out	0x2a, r18	; 42
			OCR1BL = i;
 18e:	28 bd       	out	0x28, r18	; 40
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 190:	cf 01       	movw	r24, r30
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x84>
 196:	21 50       	subi	r18, 0x01	; 1
 198:	30 40       	sbci	r19, 0x00	; 0
 19a:	c1 f7       	brne	.-16     	; 0x18c <main+0x7e>
 19c:	f0 cf       	rjmp	.-32     	; 0x17e <main+0x70>

0000019e <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 19e:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_high();
    lcd_e_delay();
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <toggle_e+0x4>
    lcd_e_low();
 1a2:	c3 98       	cbi	0x18, 3	; 24
 1a4:	08 95       	ret

000001a6 <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 1aa:	66 23       	and	r22, r22
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <lcd_write+0xc>
       lcd_rs_high();
 1ae:	c0 9a       	sbi	0x18, 0	; 24
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1b2:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 1b4:	c1 98       	cbi	0x18, 1	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1b6:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1b8:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1ba:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1bc:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1be:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1c0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1c2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1c4:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1c6:	87 fd       	sbrc	r24, 7
 1c8:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1ca:	c8 2f       	mov	r28, r24
 1cc:	dd 27       	eor	r29, r29
 1ce:	c6 fd       	sbrc	r28, 6
 1d0:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1d2:	c5 fd       	sbrc	r28, 5
 1d4:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 1d6:	c4 fd       	sbrc	r28, 4
 1d8:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 1da:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1de:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1e0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1e2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1e4:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1e6:	c3 fd       	sbrc	r28, 3
 1e8:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1ea:	c2 fd       	sbrc	r28, 2
 1ec:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1ee:	c1 fd       	sbrc	r28, 1
 1f0:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1f2:	c0 fd       	sbrc	r28, 0
 1f4:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 1f6:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1fa:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1fc:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1fe:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 200:	c7 9a       	sbi	0x18, 7	; 24
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 208:	88 23       	and	r24, r24
 20a:	11 f0       	breq	.+4      	; 0x210 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 20c:	c0 9a       	sbi	0x18, 0	; 24
 20e:	01 c0       	rjmp	.+2      	; 0x212 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 210:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 212:	c1 9a       	sbi	0x18, 1	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 214:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 216:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 218:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 21a:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 21c:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();        
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 220:	b4 9b       	sbis	0x16, 4	; 22
 222:	02 c0       	rjmp	.+4      	; 0x228 <lcd_read+0x20>
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	01 c0       	rjmp	.+2      	; 0x22a <lcd_read+0x22>
 228:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 22a:	b5 99       	sbic	0x16, 5	; 22
 22c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 22e:	b6 99       	sbic	0x16, 6	; 22
 230:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 232:	b7 99       	sbic	0x16, 7	; 22
 234:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 236:	c3 98       	cbi	0x18, 3	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 23a:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 23e:	b4 99       	sbic	0x16, 4	; 22
 240:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 242:	b5 99       	sbic	0x16, 5	; 22
 244:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 246:	b6 99       	sbic	0x16, 6	; 22
 248:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 24a:	b7 99       	sbic	0x16, 7	; 22
 24c:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 24e:	c3 98       	cbi	0x18, 3	; 24
    }
    return data;
}
 250:	99 27       	eor	r25, r25
 252:	08 95       	ret

00000254 <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 04 01 	call	0x208	; 0x208 <lcd_read>
 25a:	87 fd       	sbrc	r24, 7
 25c:	fb cf       	rjmp	.-10     	; 0x254 <lcd_waitbusy>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_waitbusy+0xc>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 04 01 	call	0x208	; 0x208 <lcd_read>
    
}/* lcd_waitbusy */
 266:	99 27       	eor	r25, r25
 268:	08 95       	ret

0000026a <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 26a:	1f 93       	push	r17
 26c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 26e:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_waitbusy>
    lcd_write(cmd,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 2f       	mov	r24, r17
 276:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write>
 27a:	1f 91       	pop	r17
 27c:	08 95       	ret

0000027e <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 27e:	1f 93       	push	r17
 280:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 282:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_waitbusy>
    lcd_write(data,1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write>
 28e:	1f 91       	pop	r17
 290:	08 95       	ret

00000292 <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 292:	66 23       	and	r22, r22
 294:	11 f4       	brne	.+4      	; 0x29a <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 296:	80 58       	subi	r24, 0x80	; 128
 298:	01 c0       	rjmp	.+2      	; 0x29c <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 29a:	80 54       	subi	r24, 0x40	; 64
 29c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
 2a0:	08 95       	ret

000002a2 <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 2a2:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_waitbusy>
    return lcd_waitbusy();
}
 2a6:	99 27       	eor	r25, r25
 2a8:	08 95       	ret

000002aa <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
 2b0:	08 95       	ret

000002b2 <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
 2b8:	08 95       	ret

000002ba <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2ba:	1f 93       	push	r17
 2bc:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2be:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_waitbusy>
    if (c=='\n')
 2c2:	1a 30       	cpi	r17, 0x0A	; 10
 2c4:	49 f4       	brne	.+18     	; 0x2d8 <lcd_putc+0x1e>
 2c6:	80 34       	cpi	r24, 0x40	; 64
 2c8:	10 f4       	brcc	.+4      	; 0x2ce <lcd_putc+0x14>
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <lcd_putc+0x16>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	80 58       	subi	r24, 0x80	; 128
 2d2:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <lcd_putc+0x26>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	81 2f       	mov	r24, r17
 2dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write>
 2e0:	1f 91       	pop	r17
 2e2:	08 95       	ret

000002e4 <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	ec 01       	movw	r28, r24
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 2ec:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_putc>
 2f0:	89 91       	ld	r24, Y+
 2f2:	88 23       	and	r24, r24
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <lcd_puts+0x8>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 304:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_putc>
 308:	fe 01       	movw	r30, r28
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	84 91       	lpm	r24, Z
 30e:	88 23       	and	r24, r24
 310:	c9 f7       	brne	.-14     	; 0x304 <lcd_puts_p+0x8>
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 320:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 322:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 324:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 326:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 328:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 32a:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 32c:	bf 9a       	sbi	0x17, 7	; 23
 32e:	80 ea       	ldi	r24, 0xA0	; 160
 330:	9f e0       	ldi	r25, 0x0F	; 15
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcd_init+0x1a>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 336:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 338:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 33a:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
 33e:	80 ee       	ldi	r24, 0xE0	; 224
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <lcd_init+0x2a>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 346:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
 34a:	00 e1       	ldi	r16, 0x10	; 16
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	c8 01       	movw	r24, r16
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x38>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 354:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
 358:	c8 01       	movw	r24, r16
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_init+0x42>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 35e:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 360:	0e 94 cf 00 	call	0x19e	; 0x19e <toggle_e>
 364:	c8 01       	movw	r24, r16
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <lcd_init+0x4e>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 376:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 380:	8f 2d       	mov	r24, r15
 382:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_command>
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <_exit>
