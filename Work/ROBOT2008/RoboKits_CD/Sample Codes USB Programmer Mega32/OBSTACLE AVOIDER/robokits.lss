
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000324  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000378  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b9  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000662  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ca  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072d  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020d  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002eb  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 66       	ori	r24, 0x60	; 96
  96:	81 bb       	out	0x11, r24	; 17

    OC1_DDR |= _BV(OC1A_PIN) + _BV(OC1B_PIN);    			// set OC1A and OC1B pin as output, required for output toggling 

    TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0);    	// enable 8 bit PWM, select inverted PWM
  98:	91 ef       	ldi	r25, 0xF1	; 241
  9a:	9f bd       	out	0x2f, r25	; 47
		
    // timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
    // PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
    TCCR1B = _BV(CS11) | _BV(WGM12);
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	8e bd       	out	0x2e, r24	; 46
	
    OCR1AL = 0;            			//FUll Speed Left motor
  a0:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = 0;						//FUll Speed Right motor
  a2:	18 bc       	out	0x28, r1	; 40
	
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
  a4:	80 ef       	ldi	r24, 0xF0	; 240
  a6:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
  a8:	8b ef       	ldi	r24, 0xFB	; 251
  aa:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0XFF;						//SET DATA DIRECTION REGISTER
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
  b0:	91 bb       	out	0x11, r25	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
									
    lcd_init(LCD_DISP_ON);				/* initialize display, cursor off */
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_init>
	lcd_clrscr();						/* clear display and home cursor */        
  b8:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_clrscr>
	lcd_puts("ROBOKITS NEOBOT\n");		/* put string to display (line 1) with linefeed */		
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_puts>
	lcd_puts("Obstacle Avoider");		/* cursor is now on second line, write second line */										
  c4:	81 e7       	ldi	r24, 0x71	; 113
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_puts>

	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
  cc:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
  ce:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
  d0:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
  d2:	93 9a       	sbi	0x12, 3	; 18
  d4:	e6 e0       	ldi	r30, 0x06	; 6
  d6:	f9 ef       	ldi	r31, 0xF9	; 249
  d8:	29 e0       	ldi	r18, 0x09	; 9
  da:	a8 ea       	ldi	r26, 0xA8	; 168
  dc:	b1 e6       	ldi	r27, 0x61	; 97


	while(1)						//START INFINITE LOOP TO SCAN INPUT FROM PORT
	{
		if(bit_is_clear(PINA,0) && bit_is_clear(PIND,1))	//IF Both Sensors senses obstacle
  de:	c8 99       	sbic	0x19, 0	; 25
  e0:	10 c0       	rjmp	.+32     	; 0x102 <main+0x70>
  e2:	81 99       	sbic	0x10, 1	; 16
  e4:	0e c0       	rjmp	.+28     	; 0x102 <main+0x70>
		{
			sbi(PORTA,4);
  e6:	dc 9a       	sbi	0x1b, 4	; 27
			cbi(PORTA,5);
  e8:	dd 98       	cbi	0x1b, 5	; 27
			cbi(PORTA,6);
  ea:	de 98       	cbi	0x1b, 6	; 27
			PORTC=0X05;							//Go Back
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	85 bb       	out	0x15, r24	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	cf 01       	movw	r24, r30
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x60>
			_delay_ms(255);
			_delay_ms(255);
			PORTC=0x09;							//Turn Left
  f6:	cf 01       	movw	r24, r30
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x66>
  fc:	25 bb       	out	0x15, r18	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fe:	cf 01       	movw	r24, r30
 100:	08 c0       	rjmp	.+16     	; 0x112 <main+0x80>
			_delay_ms(255);
		}
		else if(bit_is_clear(PINA,0))	//IF Sensor1(Left) senses obstacle
 102:	c8 99       	sbic	0x19, 0	; 25
 104:	09 c0       	rjmp	.+18     	; 0x118 <main+0x86>
		{
			cbi(PORTA,4);
 106:	dc 98       	cbi	0x1b, 4	; 27
			sbi(PORTA,5);
 108:	dd 9a       	sbi	0x1b, 5	; 27
			cbi(PORTA,6);
 10a:	de 98       	cbi	0x1b, 6	; 27
			PORTC=0X06;							//Turn Right
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	85 bb       	out	0x15, r24	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	cd 01       	movw	r24, r26
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x80>
 116:	e3 cf       	rjmp	.-58     	; 0xde <main+0x4c>
			_delay_ms(100);
		}
		else if(bit_is_clear(PIND,1))			//IF Sensor2(Right) senses obstacle
 118:	81 99       	sbic	0x10, 1	; 16
 11a:	05 c0       	rjmp	.+10     	; 0x126 <main+0x94>
		{
			cbi(PORTA,4);
 11c:	dc 98       	cbi	0x1b, 4	; 27
			cbi(PORTA,5);
 11e:	dd 98       	cbi	0x1b, 5	; 27
			sbi(PORTA,6);
 120:	de 9a       	sbi	0x1b, 6	; 27
			PORTC=0X09;							//Turn Left
 122:	25 bb       	out	0x15, r18	; 21
 124:	f5 cf       	rjmp	.-22     	; 0x110 <main+0x7e>
			_delay_ms(100);
		}
		else
		{
			PORTC=0X0A;							//Both motors Forward
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	85 bb       	out	0x15, r24	; 21
			cbi(PORTA,4);
 12a:	dc 98       	cbi	0x1b, 4	; 27
			cbi(PORTA,5);
 12c:	dd 98       	cbi	0x1b, 5	; 27
			cbi(PORTA,6);
 12e:	de 98       	cbi	0x1b, 6	; 27
 130:	d6 cf       	rjmp	.-84     	; 0xde <main+0x4c>

00000132 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 132:	c3 9a       	sbi	0x18, 3	; 24
    lcd_e_high();
    lcd_e_delay();
 134:	00 c0       	rjmp	.+0      	; 0x136 <toggle_e+0x4>
    lcd_e_low();
 136:	c3 98       	cbi	0x18, 3	; 24
 138:	08 95       	ret

0000013a <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 13e:	66 23       	and	r22, r22
 140:	11 f0       	breq	.+4      	; 0x146 <lcd_write+0xc>
       lcd_rs_high();
 142:	c0 9a       	sbi	0x18, 0	; 24
 144:	01 c0       	rjmp	.+2      	; 0x148 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 146:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 148:	c1 98       	cbi	0x18, 1	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 14a:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 14c:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 14e:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 150:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 152:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 154:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 156:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 158:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 15a:	87 fd       	sbrc	r24, 7
 15c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 15e:	c8 2f       	mov	r28, r24
 160:	dd 27       	eor	r29, r29
 162:	c6 fd       	sbrc	r28, 6
 164:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 166:	c5 fd       	sbrc	r28, 5
 168:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 16a:	c4 fd       	sbrc	r28, 4
 16c:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 16e:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 172:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 174:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 176:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 178:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 17a:	c3 fd       	sbrc	r28, 3
 17c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 17e:	c2 fd       	sbrc	r28, 2
 180:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 182:	c1 fd       	sbrc	r28, 1
 184:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 186:	c0 fd       	sbrc	r28, 0
 188:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 18a:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 18e:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 190:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 192:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 194:	c7 9a       	sbi	0x18, 7	; 24
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 19c:	88 23       	and	r24, r24
 19e:	11 f0       	breq	.+4      	; 0x1a4 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 1a0:	c0 9a       	sbi	0x18, 0	; 24
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1a4:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 1a6:	c1 9a       	sbi	0x18, 1	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 1a8:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 1aa:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 1ac:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 1ae:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 1b0:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();        
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 1b4:	b4 9b       	sbis	0x16, 4	; 22
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <lcd_read+0x20>
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcd_read+0x22>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 1be:	b5 99       	sbic	0x16, 5	; 22
 1c0:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 1c2:	b6 99       	sbic	0x16, 6	; 22
 1c4:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 1c6:	b7 99       	sbic	0x16, 7	; 22
 1c8:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 1ca:	c3 98       	cbi	0x18, 3	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 1ce:	c3 9a       	sbi	0x18, 3	; 24
        lcd_e_delay();
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 1d2:	b4 99       	sbic	0x16, 4	; 22
 1d4:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 1d6:	b5 99       	sbic	0x16, 5	; 22
 1d8:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 1da:	b6 99       	sbic	0x16, 6	; 22
 1dc:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 1de:	b7 99       	sbic	0x16, 7	; 22
 1e0:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 1e2:	c3 98       	cbi	0x18, 3	; 24
    }
    return data;
}
 1e4:	99 27       	eor	r25, r25
 1e6:	08 95       	ret

000001e8 <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_read>
 1ee:	87 fd       	sbrc	r24, 7
 1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <lcd_waitbusy>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_waitbusy+0xc>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_read>
    
}/* lcd_waitbusy */
 1fa:	99 27       	eor	r25, r25
 1fc:	08 95       	ret

000001fe <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1fe:	1f 93       	push	r17
 200:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 202:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(cmd,0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	81 2f       	mov	r24, r17
 20a:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_write>
 20e:	1f 91       	pop	r17
 210:	08 95       	ret

00000212 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 212:	1f 93       	push	r17
 214:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 216:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(data,1);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	81 2f       	mov	r24, r17
 21e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_write>
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 226:	66 23       	and	r22, r22
 228:	11 f4       	brne	.+4      	; 0x22e <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 22a:	80 58       	subi	r24, 0x80	; 128
 22c:	01 c0       	rjmp	.+2      	; 0x230 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 22e:	80 54       	subi	r24, 0x40	; 64
 230:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
 234:	08 95       	ret

00000236 <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 236:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    return lcd_waitbusy();
}
 23a:	99 27       	eor	r25, r25
 23c:	08 95       	ret

0000023e <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
 244:	08 95       	ret

00000246 <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
 24c:	08 95       	ret

0000024e <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 24e:	1f 93       	push	r17
 250:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 252:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    if (c=='\n')
 256:	1a 30       	cpi	r17, 0x0A	; 10
 258:	49 f4       	brne	.+18     	; 0x26c <lcd_putc+0x1e>
 25a:	80 34       	cpi	r24, 0x40	; 64
 25c:	10 f4       	brcc	.+4      	; 0x262 <lcd_putc+0x14>
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_putc+0x16>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	80 58       	subi	r24, 0x80	; 128
 266:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
 26a:	04 c0       	rjmp	.+8      	; 0x274 <lcd_putc+0x26>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_write>
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 280:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_putc>
 284:	89 91       	ld	r24, Y+
 286:	88 23       	and	r24, r24
 288:	d9 f7       	brne	.-10     	; 0x280 <lcd_puts+0x8>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 298:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_putc>
 29c:	fe 01       	movw	r30, r28
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	84 91       	lpm	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	c9 f7       	brne	.-14     	; 0x298 <lcd_puts_p+0x8>
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2b4:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2b6:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2b8:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2ba:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2bc:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2be:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2c0:	bf 9a       	sbi	0x17, 7	; 23
 2c2:	80 ea       	ldi	r24, 0xA0	; 160
 2c4:	9f e0       	ldi	r25, 0x0F	; 15
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x1a>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2ca:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2cc:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 2ce:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
 2d2:	80 ee       	ldi	r24, 0xE0	; 224
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init+0x2a>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2da:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
 2de:	00 e1       	ldi	r16, 0x10	; 16
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	c8 01       	movw	r24, r16
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_init+0x38>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2e8:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
 2ec:	c8 01       	movw	r24, r16
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x42>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2f2:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 2f4:	0e 94 99 00 	call	0x132	; 0x132 <toggle_e>
 2f8:	c8 01       	movw	r24, r16
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x4e>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2fe:	88 e2       	ldi	r24, 0x28	; 40
 300:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 314:	8f 2d       	mov	r24, r15
 316:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_command>
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	08 95       	ret

00000322 <_exit>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <_exit>
