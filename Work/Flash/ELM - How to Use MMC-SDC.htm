<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0039)http://elm-chan.org/docs/mmc/mmc_e.html -->
<HTML lang=en><HEAD><TITLE>ELM - How to Use MMC/SDC</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META http-equiv=Content-Style-Type content=text/css><LINK title="Site Top" 
href="../../" rel=start><LINK title="Tech Notes" href="../../cc_e.html" 
rel=up><LINK title="Japanese version" hreflang=ja href="mmc.html" 
rel=alternate><LINK title="ELM Default" media=screen 
href="ELM - How to Use MMC-SDC_files/docs_e.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2900.3314" name=GENERATOR></HEAD>
<BODY>
<H1>How to Use MMC/SDC</H1>
<P class=hdd><BR>Update: June 11, 2008</P>
<HR class=hds>

<DIV class=abst><IMG class=rset height=276 alt="MMC and SDC" 
src="ELM - How to Use MMC-SDC_files/mmsd.jpg" width=351> 
<P>Now <EM>SD Memory Card</EM> (Secure Digital Memory Card) is the most popular 
memory card for mobile equipments. The SD Memory Card (SDC below) was developped 
as upper-compatible to <EM>Multi Media Card</EM> (MMC below) so that the SDC 
compleant equipments can also use an MMC with a few considerations. There are 
also reduced size versions, such as <EM>RS-MMC</EM>, <EM>miniSD</EM> and 
<EM>microSD</EM>, with same function. The MMC/SDC has a microcontroller in it, 
the flash memory controls (erase, read, write and error control) are completed 
at inside of the memory card. The data is transferred between memory card and 
host controller in unit of 512 bytes per block in default, so that it can be 
seen like a generic hard disk drive from view point of application programs. The 
currentry defined file system is only FAT12/16 with FDISK patitioning rule. The 
FAT32 is defined for only high capacity (&gt;= 4G) cards.</P>
<P>This page describes the basic knowledge and miscellaneous things that I 
become aware, on using MMC/SDC with small embedded system. I believe that this 
information must be a useful getting started notes for people who is going to 
begin to enjoy MMC/SDC.</P></DIV>
<DIV class=para>
<H3>Contact Surface</H3><IMG class=rset height=240 alt="contact surface" 
src="ELM - How to Use MMC-SDC_files/contact.jpg" width=368> 
<P>Right photo shows the contact surface of the SDC/MMC. The MMC has seven 
contact pads and the SDC has nine contact pads that two pads added to MMC. Three 
of the contacts for each occupy as power supply pins so that the effective 
signal numbers are four and six. Ofcourse the data transfer between the host and 
the card is done in clocked serial data transfer.</P>
<P>The working supply voltage range is indicated in OCR register and it should 
be read to comfirm the operating voltage range. However, the supply voltage can 
be fixed to a proper value because the MMC/SDC works at supply voltage of 
<EM>2.7 to 3.6 volts</EM>. The current consumption can reach up to several ten 
milliamperes, so that the host system should able to supply 100 miliamperes at 
least.</P></DIV>
<DIV class=para>
<H3>SPI Mode</H3>
<P><A href="http://elm-chan.org/docs/spi_e.html">SPI mode</A> is an alternative 
operating mode that defined to use MMC/SDC without its specific host interface. 
The communication protocol for the SPI mode is very simple compared to MMC/SDC 
native mode, the MMC/SDC can be attached via a generic SPI port or a GPIO port 
built in most microcontrollers. Therefore the SPI mode is suitable for low cost 
embedded applications. Especialy, <EM>there is no reason to use native mode for 
electronic handiwork as a hobby</EM>. For SDC, the 'SPI mode 0' is defined for 
its SPI mode. But for MMC, it is not the SPI timing, both latch and shift 
actions are defined with rising edge of SCLK, but it seems work in SPI mode 0 at 
SPI mode. Thus <EM>SPI Mode 0</EM> (CPHA=0, CPOL=0) is the proper setting for 
MMC/SDC interface, but SPI mode 3 also works as well in most case.</P>
<H4>Command and Response</H4>
<P>In SPI mode, the data direction on the signal line is fixed and the data is 
transferred in byte oriented serial communication. The command frame from host 
to card is a fixed length (six bytes) packet that shown below. When a command 
frame is transmitted to the card, a response to the command (R1, R2 or R3) will 
be sent back to the host. Because data transfer is driven by serial clock 
generated by host, the host must continue to read bytes until receive any valid 
response. The command response time (N<SMALL>CR</SMALL>) is 0 to 8 bytes for 
SDC, 1 to 8 bytes for MMC. The CS signal must be held low during a transaction 
(command, response and data transfer if exist). The CRC field is optional in SPI 
mode, but it is required as a bit field to compose a command frame. The DI 
signal must be kept high during read transfer.</P><IMG height=172 
alt="cmd frame" src="ELM - How to Use MMC-SDC_files/cmd.png" width=800><BR>
<H4>SPI Command Set</H4>
<P>Each command is expressed in abbreviation like GO_IDLE_STATE or CMD&lt;n&gt;, 
&lt;n&gt; is the number of the command index and the value can be 0 to 63. 
Following table describes only commands that to be usually used for generic 
read/write and card initialization. For details on all commands, please refer to 
spec sheets from MMCA and SDCA.</P>
<TABLE class=lst>
  <TBODY>
  <TR>
    <TH>Command<BR>Index</TH>
    <TH>Argument</TH>
    <TH>Response</TH>
    <TH>Data</TH>
    <TH>Abbreviation</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD>CMD0</TD>
    <TD>None(0)</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>GO_IDLE_STATE</TD>
    <TD>Software reset.</TD></TR>
  <TR>
    <TD>CMD1</TD>
    <TD>None(0)</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>SEND_OP_COND</TD>
    <TD>Initiate initialization process.</TD></TR>
  <TR>
    <TD>ACMD41(*1)</TD>
    <TD>*2</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>APP_SEND_OP_COND</TD>
    <TD>For only SDC. Initiate initialization process.</TD></TR>
  <TR>
    <TD>CMD8</TD>
    <TD>*3</TD>
    <TD>R7</TD>
    <TD>No</TD>
    <TD>SEND_IF_COND</TD>
    <TD>For only SDC V2. Check voltage range.</TD></TR>
  <TR>
    <TD>CMD9</TD>
    <TD>None(0)</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>SEND_CSD</TD>
    <TD>Read CSD register.</TD></TR>
  <TR>
    <TD>CMD10</TD>
    <TD>None(0)</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>SEND_CID</TD>
    <TD>Read CID register.</TD></TR>
  <TR>
    <TD>CMD12</TD>
    <TD>None(0)</TD>
    <TD>R1b</TD>
    <TD>No</TD>
    <TD>STOP_TRANSMISSION</TD>
    <TD>Stop to read data.</TD></TR>
  <TR>
    <TD>CMD16</TD>
    <TD>Block<BR>length[31:0]</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>SET_BLOCKLEN</TD>
    <TD>Change R/W block size.</TD></TR>
  <TR>
    <TD>CMD17</TD>
    <TD>Address[31:0]</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>READ_SINGLE_BLOCK</TD>
    <TD>Read a block.</TD></TR>
  <TR>
    <TD>CMD18</TD>
    <TD>Address[31:0]</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>READ_MULTIPLE_BLOCK</TD>
    <TD>Read multiple blocks.</TD></TR>
  <TR>
    <TD>CMD23</TD>
    <TD>Number of<BR>blocks[15:0]</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>SET_BLOCK_COUNT</TD>
    <TD>For only MMC. Define number of blocks to transfer<BR>with next 
      multi-block read/write command.</TD></TR>
  <TR>
    <TD>ACMD23(*1)</TD>
    <TD>Number of<BR>blocks[22:0]</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>SET_WR_BLOCK_ERASE_COUNT</TD>
    <TD>For only SDC. Define number of blocks to pre-erase<BR>with next 
      multi-block write command.</TD></TR>
  <TR>
    <TD>CMD24</TD>
    <TD>Address[31:0]</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>WRITE_BLOCK</TD>
    <TD>Write a block.</TD></TR>
  <TR>
    <TD>CMD25</TD>
    <TD>Address[31:0]</TD>
    <TD>R1</TD>
    <TD>Yes</TD>
    <TD>WRITE_MULTIPLE_BLOCK</TD>
    <TD>Write multiple blocks.</TD></TR>
  <TR>
    <TD>CMD55(*1)</TD>
    <TD>None(0)</TD>
    <TD>R1</TD>
    <TD>No</TD>
    <TD>APP_CMD</TD>
    <TD>Application specific command.</TD></TR>
  <TR>
    <TD>CMD58</TD>
    <TD>None(0)</TD>
    <TD>R3</TD>
    <TD>No</TD>
    <TD>READ_OCR</TD>
    <TD>Read OCR.</TD></TR>
  <TR>
    <TD colSpan=6><SMALL>*1:ACMD&lt;n&gt; means a command sequense of 
      CMD55-CMD&lt;n&gt;.<BR>*2: Rsv(0)[31], HCS[30], Rsv(0)[29:0]<BR>*3: 
      Rsv(0)[31:12], Supply Voltage(1)[11:8], Check 
  Pattern(0xAA)[7:0]</SMALL></TD></TR></TBODY></TABLE>
<H4>SPI Response</H4><IMG class=rset height=176 alt="MMC and SDC" 
src="ELM - How to Use MMC-SDC_files/cresp.png" width=500> 
<P>There are three command response formats, <EM>R1</EM>, <EM>R2</EM> and 
<EM>R3</EM>, depends on the command index. A byte of response R1 is returned for 
most commands. The bit field of R1 response is shown in right image, the value 
0x00 means successful. When any error occured, corresponding bit in the response 
will be set. The R3 response (R1 + OCR) is for only CMD58.</P>
<P>Some commands take a time longer than N<SMALL>CR</SMALL> and it responds 
<EM>R1b</EM>. It is an R1 response followed by busy flag (DO is held low as long 
as internal process is in progress). The host controller should wait for end of 
the process until 0xFF is received.</P></DIV>
<DIV class=para>
<H3>Initialization Procedure for SPI Mode</H3>
<P>After power on reset, MMC/SDC enters its native operating mode. To put it SPI 
mode, follwing procedure must be performed.</P>
<H4>Power ON (Insersion)</H4>
<P>After supply voltage reached 2.2 volts, wait for a millisecond at least. 
<EM>Set DI and CS high and apply more than 74 clock pulses to SCLK</EM> and the 
card will go ready to accept native commands.</P>
<H4>Software Reset</H4>
<P>Set SPI clock rate between 100kHz and 400kHz and then send a <EM>CMD0</EM> 
with CS low to reset the card. The card samples CS signal when a CMD0 is 
received. If the CS signal is low, the card enters SPI mode. Since the CMD0 must 
be sent as a native command, the CRC field must have a valid value. When once 
the card enters SPI mode, the CRC feature is disabled and the CRC is not 
checked, so that command transmission routine can be written with the hardcorded 
CRC value that valid for only CMD0 and CMD8. When the CMD0 is accepted, the card 
will enter idle state and respond R1 response with In Idle State bit (0x01). The 
CRC feature can also be switched with CMD59.</P>
<H4>Initialization</H4>
<P>In idle state, the card accepts only CMD0, CMD1 and CMD58. Any other commands 
will be rejected. In this time, check working voltage range indicated in the 
OCR. In case of the system sypply voltage is out of working voltage range, the 
card must be rejected. The card initiates initialization when a <EM>CMD1</EM> is 
detected. To poll end of the initialization, the host controller must send CMD1 
and check the response until end of the initialization. When the card is 
initialized successfuly, In Idle State bit in the R1 response is cleared (R1 
resp changes 0x01 to 0x00). The initialization process can take <EM>several 
hundred milliseconds</EM> (large cards tend to longer), so that this is a 
consideration to determin the time out value. After the card has initialized, 
generic read/write commands will able to be accepted.</P>
<P>Because <EM>ACMD41</EM> instead of CMD1 is recommended for SDC, send ACMD41 
first and when it is rejected, retry with CMD1, is ideal, to support both type 
of the card.</P>
<P>The SPI clock rate should be changed to fast as possible to optimize the 
read/write performance. The TRAN_SPEED field in the CSD indicates the maximum 
clock rate of the card. The maximum clock rate is 20MHz for MMC, 25MHz for SDC 
in most case. Note that the clock rate can also be fixed to 20/25MHz in SPI mode 
because there is no open-drain condition that restricts the clock rate.</P>
<P>The initial block length can be set larger than 512 at 2GB card, so that the 
block size should be re-initialized with CMD16 if needed.</P>
<H4>How to support SDC Ver2 and high capacity cards</H4>
<P>After the card enters idle state with a CMD0, send a <EM>CMD8</EM> with 0x1AA 
and correct CRC before initiate initialization. When the CMD8 is rejected with 
an illigal command error, the card is SDC V1 or MMC. When the CMD8 is accepted, 
R7 response (R1 + 32 bit return value) will be returned. The lower 12 bits in 
the return value 0x1AA means that the card is SDC V2 and can work at voltage 
range of 2.7 to 3.6 volts. If not the case, the card must be rejected. And then 
initiate initialization with ACMD41 with HCS bit. After the initialization 
completed, read OCR and check CCS bit in the OCR. When it is set, subsequent 
data read/write operations that described below are commanded in block address 
insted of byte address. The block size is fixed to 512 bytes.</P></DIV>
<DIV class=para>
<H3>Data Transfer</H3>
<H4>Data Packet and Data Response</H4><IMG class=rset height=300 
alt="data block" src="ELM - How to Use MMC-SDC_files/data.png" width=620> 
<P>In a transaction with data transfer, one or more data blocks will be 
sent/received after command response. The data block is transferred as a data 
packet that consist of Token, Data Block and CRC. The format of the data packet 
is showin in right image and there are three data tokens. As for Stop Tran token 
that means end of multiple block write, it is used in single byte without data 
block and CRC.</P><BR class=clr>
<H4>Single Block Read</H4><IMG height=110 alt="" 
src="ELM - How to Use MMC-SDC_files/rs.png" width=350><BR>
<P>The argument specifies the location to start to read <EM>in unit of byte or 
block</EM>. The sector address specified by upper layer must be scaled properly. 
When a CMD17 is accepted, a read operation is initiated and the read data block 
will be sent to the host. After a valid data token is detected, the host 
controller receives following data field and two byte CRC. The CRC bytes must be 
flushed even if it is not needed. If any error occured during the read 
operation, an error token will be returned instead of data packet.</P>
<H4>Multiple Block Read</H4><IMG height=110 alt="" 
src="ELM - How to Use MMC-SDC_files/rm.png" width=700><BR>
<P>The Multiple Block Read command reads multiple blocks in sequense from the 
specified address. When number of transfer blocks has not been sepecified before 
this command, the transaction will be initiated as an open-ended multiple block 
read, the read operation will continue until stopped with a CMD12. The received 
byte immediataly following CMD12 is a stuff byte, it should be discarded before 
receive the response of the CMD12.</P>
<H4>Single Block Write</H4><IMG height=110 alt="" 
src="ELM - How to Use MMC-SDC_files/ws.png" width=360><BR>
<P>When a write command is accepted, the host controller sends a data packet to 
the card after a byte space. The packet format is same as Block Read command. 
The CRC field can have any invalid value unless the CRC function is enabled. 
When a data packet has been sent, the card responds a Data Response immediataly 
following the data packet. The data response trails a busy flag to process the 
write operation. Most cards cannot change write block size and it is fixed to 
512.</P>
<P>In principle of the SPI mode, the CS signal must be asserted during a 
transaction, however there is an exception to this rule. When the card is busy, 
the host controller can deassert CS to release SPI bus for any other SPI 
devices. The card will drive DO signal low again when reselect it during 
internal process is in progress. Therefore a preceding busy check (wait ready 
immediataly before command and data packet) instead of post wait can eliminate 
waste wait time. In addition the internal process is initiated a byte after the 
data response, this means eight clocks are required to initiate internal write 
operation. The state of CS signal during the eight clocks is negligible so that 
it can done by bus release process described below.</P>
<H4>Multiple Block Write</H4><IMG height=110 alt="" 
src="ELM - How to Use MMC-SDC_files/wm.png" width=700><BR>
<P>The Multiple Block Read command writes multiple blocks in sequense from the 
specified address. When number of transfer blocks has not been sepecified before 
this command, the transaction will be initiated as an open-ended multiple block 
write, the write operation will continue until terminated with a Stop Tran 
token. The busy flag will appear a byte after the Stop Tran token. As for SDC, 
the multiple block write transaction must be terminated with a Stop Tran token 
independent of pre-defined or open-ended.</P>
<H4>Reading CSD and CID</H4>
<P>These are same as Single Block Read except for the data block length. The CSD 
and CID are sent to the host as <EM>16 byte data blocks</EM>. For details of the 
CMD, CID and OCR, please refer to the MMC/SDC specs.</P></DIV>
<DIV class=para>
<H3>Cosideration to Bus Floating and Hot Insertion</H3><IMG class=rset 
height=310 alt=dip src="ELM - How to Use MMC-SDC_files/dip.png" width=450> 
<P>Any signal that can float should be pulled low or high properly via a 
resister. This is a generic design rule on MOS devices. Because DI and DO are 
normally high, they should be pulled-up. According to SDC/MMC specs, from 50k to 
100k ohms is recommended to the value of pull-up registers. However the clock 
signal is not mentioned in the SDC/MMC specs because it is always driven by host 
controller. When there is a possibility of floating, it should be pulled to the 
normal state, low.</P>
<P>The MMC/SDC can hot insertion/removal but some considerations to the host 
circuit are needed to avoid an incorrect operation. For example, if the system 
power supply (Vcc) is tied to the card socket directly, the Vcc will dip at the 
instant of contact closed due to a charge current to the capacitor that built in 
the card. 'A' in the right image is the scope view and it shows that occureing a 
voltage dip of about 600 millivolts. This is a sufficient level to trigger a 
brown out detector. 'B' in the right image shows that an inductor is inserted to 
block the surge current, the voltage dip is reduced to 200 millivoits. A low ESR 
capacitor, such as OS-CON, can eliminate the voltage dip dratiscally like shown 
in 'C'. However the low ESR capacitor can cause an oscillation of LDO 
regulator.</P></DIV>
<DIV class=para>
<H3>Cosideration on Multi-slave Configuration</H3><IMG class=rset height=235 
alt="" src="ELM - How to Use MMC-SDC_files/do_diag.png" width=505> 
<P>In SPI, each slave device is selected with separated CS signals, and plural 
devices can be attached to an SPI bus. Generic SPI slave device drives/releases 
its DO signal by CS signal asynchronously to share an SPI bus. However MMC/SDC 
drives/releases DO signal in synchronising to SCLK. There is a posibility of bus 
conflict when attach MMC/SDC and any other SPI slaves to an SPI bus. Right image 
shows the drive/release timing of MMC/SDC (DO is pulled to 1/2 vcc to see the 
bus state). Therefore to make MMC/SDC release DO signal, the master device must 
send a byte after deasserted the CS signal.</P><BR class=clr></DIV>
<DIV class=para>
<H3>Optimization of Write Performance</H3>
<P>Most MMC/SDC employs <A href="http://elm-chan.org/docs/sm_e.html">NAND Flash 
Memory</A> as a memory array. The NAND flash memory is cost effective and it can 
read/write <EM>large</EM> data fast, but on the other hand, there is a 
disadvantage that rewriting a <EM>part</EM> of data is inefficient. Generally 
the flash memory requires to erase existing data before write a new data, and 
minimum unit of erase operation (called erase block) is larger than write block 
size. The typical NAND flash memory has a block size of 512/16K bytes for 
write/erase operation, and recent monster card employs large block chip 
(2K/128K). This means that rewriting entire data in the erase block is done in 
the card even if write only a sector (512 bytes).</P>
<H4>Benchmark</H4>
<P>I examined the read/write performance of <A 
href="http://elm-chan.org/docs/mmc/sdmm.jpeg">some MMC/SDC</A> with a cheap 8 
bit MCU (ATmega64 @9.2MHz) on the assumption that an embedded system <EM>with 
limited memory size</EM>. For reason of memory size, <TT>write()</TT> and 
<TT>read()</TT> ware performed in 2048 bytes at a time. The result is: Write: 
77kB/sec, Read: 328kB/sec on the <A 
href="http://elm-chan.org/docs/mmc/sd128.txt">128MB SDC</A>, Write: 28kB/sec, 
Read: 234kB/sec on the <A href="http://elm-chan.org/docs/mmc/sd512.txt">512MB 
SDC</A> and Write: 182kB/sec, Read: 312kB/sec on the <A 
href="http://elm-chan.org/docs/mmc/mm128.txt">128MB MMC</A>.</P>
<P>Therefor the write performance of the 512MB SDC was very poor that one third 
value of 128MB SDC. Generally the read/write performance of the mass storage 
device increases proportional to its recording density, however it sometimes 
appears a tendency of opposite on the memory card. As for the MMC, it seems to 
be several times faster than SDC, it is not bad performance. After that time, I 
examined some SDCs supplied from different makers, and I found that PQI's SDC 
was as fast as Hitachi's MMC but Panasonic's and Toshiba's one was very poor 
performances.</P>
<H4>Erase Block Size</H4>
<P>To analys detail of write operation, busy time (number of polling cycles) 
after sent a write data is typed out to console in the low level disk write 
function. Multiple numbers on a line indicates data blocks and a Stop Tran token 
that issued by a multiple block write transaction.</P>
<P>In resulut of the analysis, there is a different of internal process between 
128MB SDC and 512MB SDC. The 128MB SDC rewrites erase block at end of the 
mutiple block write transaction. The 512MB SDC seems have 4K bytes data buffer 
and it rewrites erase block every 4K bytes boundary. Therefor it cannot compared 
directly but the processing time of rewriting an erase block can be read 3800 
for 128MB SDC and the 512MB SDC taeks 30000 that 8 times longer than 128MB SDC. 
Judging from this resulut, it seems the 128MB SDC uses a small block chip and 
the 512MB SDC uses a large block or MLC chip. Ofcourse the larger block size 
decreases the performance on pertial block rewriting. In 512MB SDC, only an area 
that 512K bytes from top of the memory is relatively fast. This can be read from 
write time in <TT>close()</TT>. It might any special processing is applied to 
this area for fast FAT accsess.</P>
<H4>Improving Write Performance</H4>
<P>To avoid this bottleneck and rise write performance of SDC/MMC, writing large 
number of blocsks as possible (aligned to erase block is ideal) at a time will 
do. In other words, allocate large buffer memory and pass it to 
<TT>fwrite()</TT> will do. For low level disk write function, it must pre-inform 
number of write sectors to the card for efficient write processing. This called 
`pre-defined multiple block write'. However the pre-definition command is not 
the same between MMC (CMD23) and SDC (ACMD23).</P>
<P>Well, it might a vain efforts that to rise write performance of SDC on the 
cheap MCUs that have only several kilobytes of RAM. CompactFlash have a good 
performance that ten times faster than SDC. When you require a write performance 
to the memory card, a CompactFlash or an MMC will be suitable better than 
SDC.</P>
<P>The memory cards are initially patitioned and formatted to align the 
allocation unit to the erase block. When re-patition or re-format the memory 
card with a system that is not compliant to MMC/SDC (this is just a PC) with no 
care, the optimization will be broken and the write performance might be lost. I 
tried to re-format 512MB SDC in FAT32 with a PC, the write performance measured 
in file copy was lowerd to one several. Therefore the re-formatting the card 
should be done with MMC/SDC compliant equipments rather than PC.</P></DIV>
<DIV class=para>
<H3>Links</H3>
<UL>
  <LI><A href="http://www.mmca.org/">MMCA - Multimedia Card Association</A> 
  <LI><A href="http://www.sdcard.org/">SDA - SD Card Association</A> 
  <LI><A href="http://www.sdcard.org/developers/tech/sdcard/pls/">SDHC Physical 
  Layer Spec.</A> 
  <LI><A href="http://elm-chan.org/docs/spi_e.html">About SPI</A> 
  <LI><A href="http://elm-chan.org/fsw/ff/00index_e.html">Generic FAT file 
  system module</A> with sample code to control <EM>MMC/SDSC/SDHC</EM> 
</LI></UL></DIV>
<P class=foot><IMG alt="" 
src="ELM - How to Use MMC-SDC_files/sign.png"></P></BODY></HTML>
