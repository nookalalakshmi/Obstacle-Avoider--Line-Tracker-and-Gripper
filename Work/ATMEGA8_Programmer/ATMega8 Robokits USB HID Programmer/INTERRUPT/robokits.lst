   1               		.file	"robokits.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  70               	.global	__vector_1
  72               	__vector_1:
   1:robokits.c    **** //			MADE BY ROBOKITS INDIA.
   2:robokits.c    **** //			VISIT US AT WWW.ROBOKITS.ORG
   3:robokits.c    **** //			PROGRAM FOR INTERRUPT
   4:robokits.c    **** //			WRITTEN FOR PRODUCT ID 19
   5:robokits.c    **** 
   6:robokits.c    **** /*-------------------------------------------------------------------          
   7:robokits.c    ****  Description:
   8:robokits.c    ****  This example shows how to use external interrupts so that cpu is
   9:robokits.c    ****  free for processing other things. Here cpu is used for blinking led2.
  10:robokits.c    **** 
  11:robokits.c    ****  Note:
  12:robokits.c    ****  External interrupt is generated by pressing sw1 connected to INT0.
  13:robokits.c    ****  
  14:robokits.c    ****  Led2 is blinking with normal delay routine.
  15:robokits.c    **** 
  16:robokits.c    ****  Led3 blinks on external interrupt low edge.
  17:robokits.c    ****   
  18:robokits.c    ****  Since _delay_ms() function will be affected by the interrupt generation 
  19:robokits.c    ****  and gives more delay. So, after sometime the led timing will be mismached.
  20:robokits.c    ****  
  21:robokits.c    ****  Even the timer delay is not perfectly mached to 1s. Use smaller presclar
  22:robokits.c    ****  for better operation.
  23:robokits.c    ****  
  24:robokits.c    ****   _delay_ms() function parameter passed should not exeed
  25:robokits.c    ****  262.14ms / F_CPU in mhz.
  26:robokits.c    ****  
  27:robokits.c    ****  so for 16MHz the maximum paramer should be 16ms.
  28:robokits.c    ****  
  29:robokits.c    ****  For 1MHz it can be upto 262ms (250 is used for this example).
  30:robokits.c    ****   
  31:robokits.c    ****  Must be changed to get accurate delay at higher MHz.
  32:robokits.c    ****  
  33:robokits.c    ****  The timing will differ if the operating frequency is changed.
  34:robokits.c    **** ---------------------------------------------------------------------*/
  35:robokits.c    **** 
  36:robokits.c    **** /*----------------------------------------------------------------
  37:robokits.c    **** -----------------HEADER FILES-------------------------------------
  38:robokits.c    **** -----------------------------------------------------------------*/
  39:robokits.c    **** #include <avr/io.h>
  40:robokits.c    **** #include <avr/interrupt.h>
  41:robokits.c    **** #include <util/delay.h>
  42:robokits.c    **** #include <compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  43:robokits.c    **** 
  44:robokits.c    **** /*----------------------------------------------------------------
  45:robokits.c    **** -----------------GLOBAL VARIABLES-------------------------------------
  46:robokits.c    **** -----------------------------------------------------------------*/
  47:robokits.c    **** 
  48:robokits.c    **** static volatile uint8_t led;     // use volatile when variable is accessed from interrupts
  49:robokits.c    **** 
  50:robokits.c    **** /*----------------------------------------------------------------
  51:robokits.c    **** -----------------FUNCTION-----------------------------------------
  52:robokits.c    **** -----------------------------------------------------------------*/
  53:robokits.c    **** 
  54:robokits.c    **** 
  55:robokits.c    **** SIGNAL(SIG_INTERRUPT0)     
  56:robokits.c    **** /* signal handler for external interrupt int0 */
  57:robokits.c    **** {
  73               	push __zero_reg__
  74               		push __tmp_reg__
  75               		in __tmp_reg__,__SREG__
  76               		push __tmp_reg__
  77 0000 1F92      		clr __zero_reg__
  78 0002 0F92      	/* prologue end (size=5) */
  80 0006 0F92      	.LM1:
  81 0008 1124      		sbic 48-0x20,6
  82               		rjmp .L2
  58:robokits.c    **** 		if (bit_is_clear(PIND, 6))	//IF LED3 OFF THEN
  83               	__tmp_reg__
  84               		clr __zero_reg__
  85 000a 8699      	/* prologue end (size=5) */
  59:robokits.c    **** 			sbi(PORTD,6);			//LED3 ON
  87               	g__
  88               		in __tmp_reg__,__SREG__
  89 000e 969A      		push __tmp_reg__
  90 0010 00C0      		clr __zero_reg__
  91               	/* prologue end (size=5) */
  60:robokits.c    **** 		else						//ELSE
  61:robokits.c    **** 			cbi(PORTD,6);			//LED3 OFF
  92               	h __zero_reg__
  93               		push __tmp_reg__
  94 0012 9698      		in __tmp_reg__,__SREG__
  95               		push __tmp_reg__
  96               		clr __zero_reg__
  97 0014 0F90      	/* prologue end (size=5) */
  99 0018 0F90      	.LM1:
 100 001a 1F90      		sbic 48-0x20,6
 101 001c 1895      		rjmp .L2
 103               	.LM2:
 104               		sbi 50-0x20,6
 105               		rjmp .L5
 106               	.L2:
 108               	.LM3:
 109               		cbi 50-0x20,6
  62:robokits.c    **** }
  63:robokits.c    **** 
  64:robokits.c    **** 
  65:robokits.c    **** /*----------------------------------------------------------------
  66:robokits.c    **** -----------------MAIN PROGRAM-------------------------------------
  67:robokits.c    **** -----------------------------------------------------------------*/
  68:robokits.c    **** 
  69:robokits.c    **** int main(void)
  70:robokits.c    **** {    
 110               	tabn	68,0,59,.LM2-.LFBB1
 111               	.LM2:
 112               		sbi 50-0x20,6
 113               		rjmp .L5
 114               	.L2:
  71:robokits.c    **** 	DDRB=0x01;						//SET DATA DIRECTION REGISTER
 115               	0,58,.LM1-.LFBB1
 116               	.LM1:
 117 001e 81E0      		sbic 48-0x20,6
 118 0020 87BB      		rjmp .L2
  72:robokits.c    **** 									//SET 1 for OUTPUT PORT
  73:robokits.c    **** 									//SET 0 FOR INPUT PORT
  74:robokits.c    **** 									//ONLY PORTB.0 IS OUTPUT
  75:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
  76:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
  77:robokits.c    **** 									//CHANGE ACCORDING TO USE
  78:robokits.c    **** 	
  79:robokits.c    **** 	DDRD=0xC0;						//SET DATA DIRECTION REGISTER
 119               	__tmp_reg__
 120               		clr __zero_reg__
 121 0022 80EC      	/* prologue end (size=5) */
  80:robokits.c    **** 									//SET 1 for OUTPUT PORT
  81:robokits.c    **** 									//SET 0 FOR INPUT PORT
  82:robokits.c    **** 									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
  83:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
  84:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
  85:robokits.c    **** 									//CHANGE ACCORDING TO USE
  86:robokits.c    **** 	
  87:robokits.c    **** 	sbi(PORTB,0);					//LED1 ON (INDICATION FOR READY TO USE)
 123               	g__
 124               		in __tmp_reg__,__SREG__
 125 0026 C09A      		push __tmp_reg__
  88:robokits.c    **** 	
  89:robokits.c    **** 	sbi(PORTD,2);					//ENABLE PULL UP FOR SW1
 126               	
 127               	.LM0:
 128 0028 929A      	.LFBB1:
  90:robokits.c    **** 	sbi(PORTD,3);					//ENABLE PULL UP FOR SW2
 129               	F(0,15)",36,0,0,__vector_1
 130               	.global	__vector_1
  91:robokits.c    ****     
  92:robokits.c    ****     GIMSK = _BV(INT0);           	// enable external int0
 132               	0
  93:robokits.c    ****     MCUCR = _BV(ISC01);          	// falling egde: int0
 136               	(5,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
  94:robokits.c    ****     
  95:robokits.c    ****     sei();                       	// enable interrupts 
 140               	(5,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
 144               	.global	__vector_1
  96:robokits.c    ****     
  97:robokits.c    ****     for (;;) 					 	//BLINK LED2
  98:robokits.c    **** 	{	
  99:robokits.c    **** 		sbi(PORTD,7);
 146               	0
 150               	.global	__vector_1
 152               	__vector_1:
 154               	.LM0:
   1:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
   5:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
   8:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  11:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      distribution.
  15:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  16:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  20:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  32:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  34:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  37:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  39:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \file */
  40:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     \code
  42:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     \endcode
  44:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  45:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  53:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  60:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  62:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** */
  63:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  64:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #endif
  68:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  69:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  71:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     register.
  76:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  77:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** */
  80:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** void
  81:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** {
  83:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	);
  89:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** }
  90:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  91:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  93:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  99:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****  */
 102:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** void
 103:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** {
 105:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 155               	vector_1:F(0,15)",36,0,0,__vector_1
 156               	.global	__vector_1
 158 003a 94EF      	__vector_1:
 160               	.LM0:
 161 003e 3197      	.LFBB1:
 162 0040 01F4      	/* prologue: frame size=0 */
 163               		push __zero_reg__
 164               		push __tmp_reg__
 165               		in __tmp_reg__,__SREG__
 166               		push __tmp_reg__
 167               		clr __zero_reg__
 168               	/* prologue end (size=5) */
 100:robokits.c    **** 		_delay_ms(250);
 101:robokits.c    **** 		cbi(PORTD,7);
 170               	g__
 171               		in __tmp_reg__,__SREG__
 172 0042 9798      		push __tmp_reg__
 173               		clr __zero_reg__
 174               	/* prologue end (size=5) */
 176               	.LM1:
 177               		sbic 48-0x20,6
 178               		rjmp .L2
 180               	.LM2:
 181               		sbi 50-0x20,6
 182 0044 0197      		rjmp .L5
 183 0046 01F4      	.L2:
 185 0048 00C0      	.LM3:
 186               		cbi 50-0x20,6
 187               	.L5:
 188               	/* epilogue: frame size=0 */
 189               		pop __tmp_reg__
 190               		out __SREG__,__tmp_reg__
 191               		pop __tmp_reg__
 192               		pop __zero_reg__
 193               		reti
 194               	/* epilogue end (size=5) */
 195               	/* function __vector_1 size 15 (5) */
 197               	.Lscope1:
 199               	.global	main
 201               	main:
 203               	.LM4:
 204               	.LFBB2:
DEFINED SYMBOLS
                            *ABS*:00000000 robokits.c
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:5      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:6      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:72     .text:00000000 __vector_1
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccmnzdrQ.s:109    .text:0000001e main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
