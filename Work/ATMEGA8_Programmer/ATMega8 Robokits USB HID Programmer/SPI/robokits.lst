   1               		.file	"robokits.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  68               	.global	main
  70               	main:
   1:robokits.c    **** //			MADE BY ROBOKITS INDIA.
   2:robokits.c    **** //			VISIT US AT WWW.ROBOKITS.ORG
   3:robokits.c    **** //			PROGRAM FOR SPI
   4:robokits.c    **** //			WRITTEN FOR PRODUCT ID 19
   5:robokits.c    **** 
   6:robokits.c    **** /*-------------------------------------------------------------------          
   7:robokits.c    ****  Description:
   8:robokits.c    ****  This example shows how to use SPI bus of AVR for communication.
   9:robokits.c    **** 
  10:robokits.c    ****  Note:
  11:robokits.c    ****  When using with other AVr micro change connections of SS,MOSI,SCK pins
  12:robokits.c    ****  and definations of pins.
  13:robokits.c    ****  
  14:robokits.c    ****    _delay_ms() function parameter passed should not exeed
  15:robokits.c    ****  262.14ms / F_CPU in mhz.
  16:robokits.c    ****  
  17:robokits.c    ****  so for 16MHz the maximum paramer should be 16ms.
  18:robokits.c    ****  
  19:robokits.c    ****  For 1MHz it can be upto 262ms (100 is used for this example).
  20:robokits.c    ****   
  21:robokits.c    ****  Must be changed to get accurate delay at higher MHz.
  22:robokits.c    ****  
  23:robokits.c    ****  The timing will differ if the operating frequency is changed.
  24:robokits.c    **** ---------------------------------------------------------------------*/
  25:robokits.c    **** 
  26:robokits.c    **** /*----------------------------------------------------------------
  27:robokits.c    **** -----------------CONNECTIONS WITH MEGA8---------------------------
  28:robokits.c    **** ------------------------------------------------------------------
  29:robokits.c    ****  
  30:robokits.c    ****  AVR ATMEGA8            74HC595
  31:robokits.c    ****  SS   (16)     ->      LatchClock (12)
  32:robokits.c    ****  MOSI (17)     ->      SerialIn   (14)
  33:robokits.c    ****  SCK  (19)     ->      ShiftClock (11)
  34:robokits.c    ****  GND  (8)	   ->      GND        
  35:robokits.c    ****                        Reset      (10) -> VCC
  36:robokits.c    ****                        OE         (13) -> GND
  37:robokits.c    ****                        Q1         (1)  -> 1K Resistor -> LED -> GND
  38:robokits.c    ****    
  39:robokits.c    **** ---------------------------------------------------------------------*/
  40:robokits.c    **** 
  41:robokits.c    **** /*----------------------------------------------------------------
  42:robokits.c    **** -----------------HEADER FILES-------------------------------------
  43:robokits.c    **** -----------------------------------------------------------------*/
  44:robokits.c    **** 
  45:robokits.c    **** #include <inttypes.h>
  46:robokits.c    **** #include <avr/io.h>
  47:robokits.c    **** #include<compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  48:robokits.c    **** #include<util/delay.h>				//HEADER FILE FOR DELAY
  49:robokits.c    **** 
  50:robokits.c    **** /*----------------------------------------------------------------
  51:robokits.c    **** -----------------DEFINATION OF SPI PINS---------------------------
  52:robokits.c    **** -----------------------------------------------------------------*/
  53:robokits.c    **** 
  54:robokits.c    **** #define SPI_CHIP_SELECT PB2             // SS pin is used here, but any pin can be used
  55:robokits.c    **** #define SPI_MOSI        PB3             // SPI MOSI pin 
  56:robokits.c    **** #define SPI_SCK         PB5             // SPI SCK pin
  57:robokits.c    **** #define LED_PWR			PB0
  58:robokits.c    **** #define SPI_DDR         DDRB            // port used by SPI
  59:robokits.c    **** 
  60:robokits.c    **** /*----------------------------------------------------------------
  61:robokits.c    **** -----------------MAIN PROGRAM-------------------------------------
  62:robokits.c    **** -----------------------------------------------------------------*/
  63:robokits.c    **** 
  64:robokits.c    **** int main(void)
  65:robokits.c    **** { 	
  71               	
  72               	/* prologue end (size=0) */
  74               	.LM1:
  75               		ldi r24,lo8(45)
  66:robokits.c    ****     uint8_t led = 2;
  67:robokits.c    ****     
  68:robokits.c    ****     SPI_DDR  = _BV(SPI_CHIP_SELECT) + _BV(SPI_MOSI) + _BV(SPI_SCK) + _BV(LED_PWR);    /* SPI port i
  76               	size=0) */
  78 0000 8DE2      	.LM1:
  79 0002 87BB      		ldi r24,lo8(45)
  69:robokits.c    **** 	sbi(PORTB,0);					//LED1 ON (INDICATION FOR READY TO USE)	
  80               	size=0) */
  82 0004 C09A      	.LM1:
  70:robokits.c    ****     SPCR = _BV(SPE) +_BV(MSTR) + _BV(CPOL) + _BV(CPHA);    			/* SPI interrupt disabled, SPI port e
  83               	
  84               	/* prologue end (size=0) */
  86 0008 8DB9      	.LM1:
  87 000a 22E0      		ldi r24,lo8(45)
  88               		out 55-0x20,r24
  71:robokits.c    ****      
  72:robokits.c    ****     for(;;)
  73:robokits.c    ****     {
  74:robokits.c    ****         PORTB &= ~_BV(SPI_CHIP_SELECT);     	// enable SPI device
  89               		68,0,68,.LM1-.LFBB1
  90               	.LM1:
  91 000c C298      		ldi r24,lo8(45)
  75:robokits.c    ****         SPDR = led;                         	// send data to SPI device (turn LED on/off)
  92               	size=0) */
  94 000e 2FB9      	.LM1:
  95               		ldi r24,lo8(45)
  76:robokits.c    ****         while (!(SPSR & _BV(SPIF)));        	// wait until write complets
  96               	size=0) */
  98 0010 779B      	.LM1:
  99 0012 00C0      		ldi r24,lo8(45)
  77:robokits.c    ****         PORTB |= _BV(SPI_CHIP_SELECT);      	// disable SPI device
 100               	size=0) */
 102 0014 C29A      	.LM1:
  78:robokits.c    **** 
  79:robokits.c    ****         led ^= 2;                           	// toggle LED
 103               	
 104               	/* prologue end (size=0) */
 106 0018 2827      	.LM1:
 107               		ldi r24,lo8(45)
 108               		out 55-0x20,r24
 110               	.LM2:
 111               		sbi 56-0x20,0
   1:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
   5:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
   8:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  11:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      distribution.
  15:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  16:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  20:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  32:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  34:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  37:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  39:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \file */
  40:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     \code
  42:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     \endcode
  44:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  45:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  53:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  60:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  62:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** */
  63:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  64:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** #endif
  68:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  69:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  71:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     register.
  76:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  77:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** */
  80:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** void
  81:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** {
  83:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	);
  89:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** }
  90:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  91:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  93:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 
  99:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/program files/winavr/bin/../avr/include/util/delay_basic.h ****  */
 102:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** void
 103:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** {
 105:c:/program files/winavr/bin/../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 113               	-.LFBB1
 114               	.LM2:
 115 001a 88EA      		sbi 56-0x20,0
 117               	.LM3:
 118 001e 0197      		ldi r24,lo8(92)
 119 0020 01F4      		out 45-0x20,r24
 120               		ldi r18,lo8(2)
 121 0022 00C0      	.L2:
 123               	.LM4:
 124               		cbi 56-0x20,2
 126               	.LM5:
 127               		out 47-0x20,r18
 128               	.L3:
 130               	.LM6:
 131               		sbis 46-0x20,7
 132               		rjmp .L3
 134               	.LM7:
 135               		sbi 56-0x20,2
 137               	.LM8:
 138               		ldi r24,lo8(2)
 139               		eor r18,r24
 140               	.LBB12:
DEFINED SYMBOLS
                            *ABS*:00000000 robokits.c
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:5      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:6      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\Sandeep\LOCALS~1\Temp/ccBT45tb.s:70     .text:00000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
