
motorIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000318  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002bb  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000168  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d0  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fe  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000248  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  8a:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motormove>:
-----------------FUNCTION-----------------------------------------
-----------------------------------------------------------------*/
void motormove(char motor, char state)
{
	int n1=0,n2=0;
	if(motor=='1')
  92:	81 33       	cpi	r24, 0x31	; 49
  94:	29 f4       	brne	.+10     	; 0xa0 <motormove+0xe>
  96:	e7 e0       	ldi	r30, 0x07	; 7
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	a6 e0       	ldi	r26, 0x06	; 6
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <motormove+0x24>
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  a0:	82 33       	cpi	r24, 0x32	; 50
  a2:	29 f4       	brne	.+10     	; 0xae <motormove+0x1c>
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	a1 e0       	ldi	r26, 0x01	; 1
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <motormove+0x24>
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
		 if(state=='F'){
  b6:	66 34       	cpi	r22, 0x46	; 70
  b8:	a1 f4       	brne	.+40     	; 0xe2 <motormove+0x50>
			sbi(PORTB,n1);
  ba:	48 b3       	in	r20, 0x18	; 24
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9c 01       	movw	r18, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <motormove+0x36>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	ea 95       	dec	r30
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <motormove+0x32>
  cc:	42 2b       	or	r20, r18
  ce:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  d0:	28 b3       	in	r18, 0x18	; 24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <motormove+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 95       	dec	r26
  da:	e2 f7       	brpl	.-8      	; 0xd4 <motormove+0x42>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	23 c0       	rjmp	.+70     	; 0x128 <motormove+0x96>
			}
		 if(state=='B'){
  e2:	62 34       	cpi	r22, 0x42	; 66
  e4:	69 f4       	brne	.+26     	; 0x100 <motormove+0x6e>
			cbi(PORTB,n1);
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	c9 01       	movw	r24, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <motormove+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	ea 95       	dec	r30
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <motormove+0x5e>
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	0d c0       	rjmp	.+26     	; 0x11a <motormove+0x88>
			sbi(PORTB,n2);
			}
		 if(state=='S'){
 100:	63 35       	cpi	r22, 0x53	; 83
 102:	a1 f4       	brne	.+40     	; 0x12c <motormove+0x9a>
			sbi(PORTB,n1);
 104:	48 b3       	in	r20, 0x18	; 24
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	c9 01       	movw	r24, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <motormove+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	ea 95       	dec	r30
 114:	e2 f7       	brpl	.-8      	; 0x10e <motormove+0x7c>
 116:	48 2b       	or	r20, r24
 118:	48 bb       	out	0x18, r20	; 24
			sbi(PORTB,n2);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <motormove+0x90>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	aa 95       	dec	r26
 124:	e2 f7       	brpl	.-8      	; 0x11e <motormove+0x8c>
 126:	82 2b       	or	r24, r18
 128:	88 bb       	out	0x18, r24	; 24
 12a:	08 95       	ret
			}
		 if(state=='s'){
 12c:	63 37       	cpi	r22, 0x73	; 115
 12e:	a9 f4       	brne	.+42     	; 0x15a <motormove+0xc8>
			cbi(PORTB,n1);
 130:	48 b3       	in	r20, 0x18	; 24
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	c9 01       	movw	r24, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <motormove+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	ea 95       	dec	r30
 140:	e2 f7       	brpl	.-8      	; 0x13a <motormove+0xa8>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <motormove+0xbe>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	aa 95       	dec	r26
 152:	e2 f7       	brpl	.-8      	; 0x14c <motormove+0xba>
 154:	20 95       	com	r18
 156:	28 23       	and	r18, r24
 158:	28 bb       	out	0x18, r18	; 24
 15a:	08 95       	ret

0000015c <robotmove>:
}

void robotmove(char mode)
{

	switch(mode)
 15c:	8c 34       	cpi	r24, 0x4C	; 76
 15e:	91 f0       	breq	.+36     	; 0x184 <robotmove+0x28>
 160:	8d 34       	cpi	r24, 0x4D	; 77
 162:	28 f4       	brcc	.+10     	; 0x16e <robotmove+0x12>
 164:	82 34       	cpi	r24, 0x42	; 66
 166:	59 f0       	breq	.+22     	; 0x17e <robotmove+0x22>
 168:	86 34       	cpi	r24, 0x46	; 70
 16a:	21 f5       	brne	.+72     	; 0x1b4 <robotmove+0x58>
 16c:	05 c0       	rjmp	.+10     	; 0x178 <robotmove+0x1c>
 16e:	82 35       	cpi	r24, 0x52	; 82
 170:	81 f0       	breq	.+32     	; 0x192 <robotmove+0x36>
 172:	83 35       	cpi	r24, 0x53	; 83
 174:	f9 f4       	brne	.+62     	; 0x1b4 <robotmove+0x58>
 176:	16 c0       	rjmp	.+44     	; 0x1a4 <robotmove+0x48>
	{
		case 'F':
		 motormove('1','F');
 178:	81 e3       	ldi	r24, 0x31	; 49
 17a:	66 e4       	ldi	r22, 0x46	; 70
 17c:	05 c0       	rjmp	.+10     	; 0x188 <robotmove+0x2c>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 17e:	81 e3       	ldi	r24, 0x31	; 49
 180:	62 e4       	ldi	r22, 0x42	; 66
 182:	09 c0       	rjmp	.+18     	; 0x196 <robotmove+0x3a>
		 motormove('2','B');
		break;
		
		case 'L':
		 motormove('1','B');
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	62 e4       	ldi	r22, 0x42	; 66
 188:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','F');
 18c:	82 e3       	ldi	r24, 0x32	; 50
 18e:	66 e4       	ldi	r22, 0x46	; 70
 190:	06 c0       	rjmp	.+12     	; 0x19e <robotmove+0x42>
		break;
		
		case 'R':
		 motormove('1','F');
 192:	81 e3       	ldi	r24, 0x31	; 49
 194:	66 e4       	ldi	r22, 0x46	; 70
 196:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','B');
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	62 e4       	ldi	r22, 0x42	; 66
 19e:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
 1a2:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','s');
 1a4:	81 e3       	ldi	r24, 0x31	; 49
 1a6:	63 e7       	ldi	r22, 0x73	; 115
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
		 motormove('2','s');
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	63 e7       	ldi	r22, 0x73	; 115
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <motormove>
 1b4:	08 95       	ret

000001b6 <setstate>:
	if(motor1=='1')
	{
		n1=6;
		n2=7;
	}
	if(motor1=='2')
 1b6:	82 33       	cpi	r24, 0x32	; 50
 1b8:	29 f4       	brne	.+10     	; 0x1c4 <setstate+0xe>
 1ba:	e1 e0       	ldi	r30, 0x01	; 1
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <setstate+0x16>
 1c4:	e6 e0       	ldi	r30, 0x06	; 6
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	a7 e0       	ldi	r26, 0x07	; 7
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
	{
		n1=1;
		n2=0;
	}
	switch(state)
 1cc:	66 34       	cpi	r22, 0x46	; 70
 1ce:	11 f1       	breq	.+68     	; 0x214 <setstate+0x5e>
 1d0:	67 34       	cpi	r22, 0x47	; 71
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <setstate+0x26>
 1d4:	62 34       	cpi	r22, 0x42	; 66
 1d6:	09 f0       	breq	.+2      	; 0x1da <setstate+0x24>
 1d8:	59 c0       	rjmp	.+178    	; 0x28c <setstate+0xd6>
 1da:	30 c0       	rjmp	.+96     	; 0x23c <setstate+0x86>
 1dc:	63 35       	cpi	r22, 0x53	; 83
 1de:	09 f4       	brne	.+2      	; 0x1e2 <setstate+0x2c>
 1e0:	42 c0       	rjmp	.+132    	; 0x266 <setstate+0xb0>
 1e2:	63 37       	cpi	r22, 0x73	; 115
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <setstate+0x32>
 1e6:	52 c0       	rjmp	.+164    	; 0x28c <setstate+0xd6>
	{
		case 's':
		cbi(PORTB,n1);
 1e8:	48 b3       	in	r20, 0x18	; 24
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	c9 01       	movw	r24, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <setstate+0x40>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	ea 95       	dec	r30
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <setstate+0x3c>
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	88 bb       	out	0x18, r24	; 24
		cbi(PORTB,n2);
 200:	88 b3       	in	r24, 0x18	; 24
 202:	02 c0       	rjmp	.+4      	; 0x208 <setstate+0x52>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	aa 95       	dec	r26
 20a:	e2 f7       	brpl	.-8      	; 0x204 <setstate+0x4e>
 20c:	20 95       	com	r18
 20e:	28 23       	and	r18, r24
 210:	28 bb       	out	0x18, r18	; 24
 212:	08 95       	ret
			break;
		case 'F':
		sbi(PORTB,n1);
 214:	48 b3       	in	r20, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9c 01       	movw	r18, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <setstate+0x6c>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	ea 95       	dec	r30
 224:	e2 f7       	brpl	.-8      	; 0x21e <setstate+0x68>
 226:	42 2b       	or	r20, r18
 228:	48 bb       	out	0x18, r20	; 24
		cbi(PORTB,n2);
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <setstate+0x7c>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 95       	dec	r26
 234:	e2 f7       	brpl	.-8      	; 0x22e <setstate+0x78>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	13 c0       	rjmp	.+38     	; 0x262 <setstate+0xac>
			break;
		case 'B':
		cbi(PORTB,n1);
 23c:	48 b3       	in	r20, 0x18	; 24
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	c9 01       	movw	r24, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <setstate+0x94>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	ea 95       	dec	r30
 24c:	e2 f7       	brpl	.-8      	; 0x246 <setstate+0x90>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	88 bb       	out	0x18, r24	; 24
		sbi(PORTB,n2);
 254:	88 b3       	in	r24, 0x18	; 24
 256:	02 c0       	rjmp	.+4      	; 0x25c <setstate+0xa6>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	aa 95       	dec	r26
 25e:	e2 f7       	brpl	.-8      	; 0x258 <setstate+0xa2>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
			break;
		case 'S':
		sbi(PORTB,n1);
 266:	48 b3       	in	r20, 0x18	; 24
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	c9 01       	movw	r24, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <setstate+0xbe>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	ea 95       	dec	r30
 276:	e2 f7       	brpl	.-8      	; 0x270 <setstate+0xba>
 278:	48 2b       	or	r20, r24
 27a:	48 bb       	out	0x18, r20	; 24
		sbi(PORTB,n2);
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <setstate+0xce>
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	aa 95       	dec	r26
 286:	e2 f7       	brpl	.-8      	; 0x280 <setstate+0xca>
 288:	82 2b       	or	r24, r18
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	08 95       	ret

0000028e <__vector_1>:
}


SIGNAL(SIG_INTERRUPT0)     
/* signal handler for external interrupt int0 */
{           
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
            navflag='O';
 29a:	8f e4       	ldi	r24, 0x4F	; 79
 29c:	80 93 60 00 	sts	0x0060, r24
//            robotmove('S');
			sbi(PORTB,2);			//LED ON
 2a0:	c2 9a       	sbi	0x18, 2	; 24
            
        
}
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
	DDRB=0XC7;						//SET DATA DIRECTION REGISTER
 2b2:	87 ec       	ldi	r24, 0xC7	; 199
 2b4:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	DDRD=0;
 2b6:	11 ba       	out	0x11, r1	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT

	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 2b8:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 2ba:	93 9a       	sbi	0x12, 3	; 18
    GICR = _BV(INT0);           	// enable external int0
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC01);          	// falling egde: int0*/
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	85 bf       	out	0x35, r24	; 53
    sei();                       	// enable interrupts 
 2c4:	78 94       	sei
 2c6:	28 e8       	ldi	r18, 0x88	; 136
 2c8:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ca:	c9 e1       	ldi	r28, 0x19	; 25
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x24>
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2da:	21 15       	cp	r18, r1
 2dc:	31 05       	cpc	r19, r1
 2de:	c1 f7       	brne	.-16     	; 0x2d0 <main+0x22>
    for (;;) 					 	//BLINK LED2
	{	
	
	
    _delay_ms(500);
	cbi(PORTB,2);			//LED OFF
 2e0:	c2 98       	cbi	0x18, 2	; 24
	
		setstate('1','F');
 2e2:	81 e3       	ldi	r24, 0x31	; 49
 2e4:	66 e4       	ldi	r22, 0x46	; 70
 2e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <setstate>
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	97 e2       	ldi	r25, 0x27	; 39
 2ee:	fe 01       	movw	r30, r28
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <main+0x40>
		_delay_ms(1000);
		setstate('2','B');
 2f8:	82 e3       	ldi	r24, 0x32	; 50
 2fa:	62 e4       	ldi	r22, 0x42	; 66
 2fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <setstate>
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	97 e2       	ldi	r25, 0x27	; 39
 304:	fe 01       	movw	r30, r28
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30c:	d9 f7       	brne	.-10     	; 0x304 <main+0x56>
 30e:	28 e8       	ldi	r18, 0x88	; 136
 310:	33 e1       	ldi	r19, 0x13	; 19
 312:	de cf       	rjmp	.-68     	; 0x2d0 <main+0x22>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
