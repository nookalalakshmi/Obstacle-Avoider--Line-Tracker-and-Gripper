
pathfollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000588  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ee  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ee       	ldi	r30, 0xE4	; 228
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	bc d0       	rcall	.+376    	; 0x1d2 <main>
  5a:	c2 c0       	rjmp	.+388    	; 0x1e0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motormove>:
	if(motor=='1')
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  5e:	82 33       	cpi	r24, 0x32	; 50
  60:	29 f4       	brne	.+10     	; 0x6c <motormove+0xe>
  62:	a0 e0       	ldi	r26, 0x00	; 0
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e1 e0       	ldi	r30, 0x01	; 1
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	04 c0       	rjmp	.+8      	; 0x74 <motormove+0x16>
  6c:	a7 e0       	ldi	r26, 0x07	; 7
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e6 e0       	ldi	r30, 0x06	; 6
  72:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
	switch (state)
  74:	66 34       	cpi	r22, 0x46	; 70
  76:	61 f0       	breq	.+24     	; 0x90 <motormove+0x32>
  78:	67 34       	cpi	r22, 0x47	; 71
  7a:	20 f4       	brcc	.+8      	; 0x84 <motormove+0x26>
  7c:	62 34       	cpi	r22, 0x42	; 66
  7e:	09 f0       	breq	.+2      	; 0x82 <motormove+0x24>
  80:	59 c0       	rjmp	.+178    	; 0x134 <motormove+0xd6>
  82:	18 c0       	rjmp	.+48     	; 0xb4 <motormove+0x56>
  84:	63 35       	cpi	r22, 0x53	; 83
  86:	59 f1       	breq	.+86     	; 0xde <motormove+0x80>
  88:	63 37       	cpi	r22, 0x73	; 115
  8a:	09 f0       	breq	.+2      	; 0x8e <motormove+0x30>
  8c:	53 c0       	rjmp	.+166    	; 0x134 <motormove+0xd6>
  8e:	3d c0       	rjmp	.+122    	; 0x10a <motormove+0xac>
	{
	 case 'F':
			sbi(PORTB,n1);
  90:	48 b3       	in	r20, 0x18	; 24
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9c 01       	movw	r18, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <motormove+0x40>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	aa 95       	dec	r26
  a0:	e2 f7       	brpl	.-8      	; 0x9a <motormove+0x3c>
  a2:	42 2b       	or	r20, r18
  a4:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  a6:	28 b3       	in	r18, 0x18	; 24
  a8:	02 c0       	rjmp	.+4      	; 0xae <motormove+0x50>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	ea 95       	dec	r30
  b0:	e2 f7       	brpl	.-8      	; 0xaa <motormove+0x4c>
  b2:	11 c0       	rjmp	.+34     	; 0xd6 <motormove+0x78>
			break;

	case 'B':
			sbi(PORTB,n2);
  b4:	48 b3       	in	r20, 0x18	; 24
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9c 01       	movw	r18, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <motormove+0x64>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	ea 95       	dec	r30
  c4:	e2 f7       	brpl	.-8      	; 0xbe <motormove+0x60>
  c6:	42 2b       	or	r20, r18
  c8:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
  ca:	28 b3       	in	r18, 0x18	; 24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <motormove+0x74>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	aa 95       	dec	r26
  d4:	e2 f7       	brpl	.-8      	; 0xce <motormove+0x70>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
  de:	48 b3       	in	r20, 0x18	; 24
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	c9 01       	movw	r24, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <motormove+0x8e>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	ea 95       	dec	r30
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <motormove+0x8a>
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <motormove+0xa0>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	aa 95       	dec	r26
 100:	e2 f7       	brpl	.-8      	; 0xfa <motormove+0x9c>
 102:	20 95       	com	r18
 104:	28 23       	and	r18, r24
 106:	28 bb       	out	0x18, r18	; 24
 108:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 10a:	48 b3       	in	r20, 0x18	; 24
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	c9 01       	movw	r24, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <motormove+0xba>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	aa 95       	dec	r26
 11a:	e2 f7       	brpl	.-8      	; 0x114 <motormove+0xb6>
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	02 c0       	rjmp	.+4      	; 0x12a <motormove+0xcc>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	ea 95       	dec	r30
 12c:	e2 f7       	brpl	.-8      	; 0x126 <motormove+0xc8>
 12e:	20 95       	com	r18
 130:	28 23       	and	r18, r24
 132:	28 bb       	out	0x18, r18	; 24
 134:	08 95       	ret

00000136 <robotmove>:
}

void robotmove(char mode)
{

	switch(mode)
 136:	8c 34       	cpi	r24, 0x4C	; 76
 138:	81 f0       	breq	.+32     	; 0x15a <robotmove+0x24>
 13a:	8d 34       	cpi	r24, 0x4D	; 77
 13c:	28 f4       	brcc	.+10     	; 0x148 <robotmove+0x12>
 13e:	82 34       	cpi	r24, 0x42	; 66
 140:	51 f0       	breq	.+20     	; 0x156 <robotmove+0x20>
 142:	86 34       	cpi	r24, 0x46	; 70
 144:	e1 f4       	brne	.+56     	; 0x17e <robotmove+0x48>
 146:	05 c0       	rjmp	.+10     	; 0x152 <robotmove+0x1c>
 148:	82 35       	cpi	r24, 0x52	; 82
 14a:	61 f0       	breq	.+24     	; 0x164 <robotmove+0x2e>
 14c:	83 35       	cpi	r24, 0x53	; 83
 14e:	b9 f4       	brne	.+46     	; 0x17e <robotmove+0x48>
 150:	10 c0       	rjmp	.+32     	; 0x172 <robotmove+0x3c>
	{
		case 'F':
		 motormove('1','F');
 152:	66 e4       	ldi	r22, 0x46	; 70
 154:	03 c0       	rjmp	.+6      	; 0x15c <robotmove+0x26>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 156:	62 e4       	ldi	r22, 0x42	; 66
 158:	06 c0       	rjmp	.+12     	; 0x166 <robotmove+0x30>
		 motormove('2','B');
		break;
		
		case 'L':
		 motormove('1','B');
 15a:	62 e4       	ldi	r22, 0x42	; 66
 15c:	81 e3       	ldi	r24, 0x31	; 49
 15e:	7f df       	rcall	.-258    	; 0x5e <motormove>
		 motormove('2','F');
 160:	66 e4       	ldi	r22, 0x46	; 70
 162:	04 c0       	rjmp	.+8      	; 0x16c <robotmove+0x36>
		break;
		
		case 'R':
		 motormove('1','F');
 164:	66 e4       	ldi	r22, 0x46	; 70
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	7a df       	rcall	.-268    	; 0x5e <motormove>
		 motormove('2','B');
 16a:	62 e4       	ldi	r22, 0x42	; 66
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	77 df       	rcall	.-274    	; 0x5e <motormove>
 170:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','s');
 172:	63 e7       	ldi	r22, 0x73	; 115
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	73 df       	rcall	.-282    	; 0x5e <motormove>
		 motormove('2','s');
 178:	63 e7       	ldi	r22, 0x73	; 115
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	70 df       	rcall	.-288    	; 0x5e <motormove>
 17e:	08 95       	ret

00000180 <path_follower>:
}

void path_follower(void)
{
	
	if((bit_is_clear(PINC,2)) && (bit_is_clear(PINC,3)))
 180:	9a 99       	sbic	0x13, 2	; 19
 182:	06 c0       	rjmp	.+12     	; 0x190 <path_follower+0x10>
 184:	9b 99       	sbic	0x13, 3	; 19
 186:	04 c0       	rjmp	.+8      	; 0x190 <path_follower+0x10>
	{
		sbi(PORTD,0);
 188:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD,1);	//move left
 18a:	91 98       	cbi	0x12, 1	; 18
		//robotmove('L');
		sbi(PORTD,7);
 18c:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTB,0);
 18e:	c0 98       	cbi	0x18, 0	; 24
	}
	if((bit_is_clear(PINB,1)) && (bit_is_clear(PINC,5)))
 190:	b1 99       	sbic	0x16, 1	; 22
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <path_follower+0x20>
 194:	9d 99       	sbic	0x13, 5	; 19
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <path_follower+0x20>
	{
		sbi(PORTD,1);
 198:	91 9a       	sbi	0x12, 1	; 18
		cbi(PORTD,0);	//move right
 19a:	90 98       	cbi	0x12, 0	; 18
		//robotmove('R');
		sbi(PORTB,0);
 19c:	c0 9a       	sbi	0x18, 0	; 24
		cbi(PORTD,7);
 19e:	97 98       	cbi	0x12, 7	; 18
	}
	if((bit_is_clear(PINC,3)) && (bit_is_clear(PINC,4)) && (bit_is_clear(PINC,5)))
 1a0:	9b 99       	sbic	0x13, 3	; 19
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <path_follower+0x34>
 1a4:	9c 99       	sbic	0x13, 4	; 19
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <path_follower+0x34>
 1a8:	9d 99       	sbic	0x13, 5	; 19
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <path_follower+0x34>
	{
		sbi(PORTD,0);
 1ac:	90 9a       	sbi	0x12, 0	; 18
		sbi(PORTD,1);	//move forward
 1ae:	91 9a       	sbi	0x12, 1	; 18
		//robotmove('F');
		sbi(PORTD,7);
 1b0:	97 9a       	sbi	0x12, 7	; 18
		sbi(PORTB,0);
 1b2:	c0 9a       	sbi	0x18, 0	; 24
	}
	if((!bit_is_clear(PINC,2)) && (!bit_is_clear(PINC,3)) && (!bit_is_clear(PINC,4)) && (!bit_is_clear(PINC,5)) && (!bit_is_clear(PINB,1)))
 1b4:	9a 9b       	sbis	0x13, 2	; 19
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <path_follower+0x50>
 1b8:	9b 9b       	sbis	0x13, 3	; 19
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <path_follower+0x50>
 1bc:	9c 9b       	sbis	0x13, 4	; 19
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <path_follower+0x50>
 1c0:	9d 9b       	sbis	0x13, 5	; 19
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <path_follower+0x50>
 1c4:	b1 9b       	sbis	0x16, 1	; 22
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <path_follower+0x50>
	{
		cbi(PORTD,0);
 1c8:	90 98       	cbi	0x12, 0	; 18
		cbi(PORTD,1);	//stop
 1ca:	91 98       	cbi	0x12, 1	; 18
		//robotmove('S');
		cbi(PORTD,7);
 1cc:	97 98       	cbi	0x12, 7	; 18
		cbi(PORTB,0);
 1ce:	c0 98       	cbi	0x18, 0	; 24
 1d0:	08 95       	ret

000001d2 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/
int main(void)
{
	DDRD=0x8F;						//SET DATA DIRECTION REGISTER
 1d2:	8f e8       	ldi	r24, 0x8F	; 143
 1d4:	81 bb       	out	0x11, r24	; 17
									//SET 0 FOR INPUT PORT
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRC=0x00;						//SET DATA DIRECTION REGISTER
 1d6:	14 ba       	out	0x14, r1	; 20
									//SET 0 FOR INPUT PORT
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRB = 0x01;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	87 bb       	out	0x17, r24	; 23

	for(;;)
	{
		path_follower();
 1dc:	d1 df       	rcall	.-94     	; 0x180 <path_follower>
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0xa>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
