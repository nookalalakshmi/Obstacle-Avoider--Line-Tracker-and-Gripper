   1               		.file	"robokits.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  71               	.global	__vector_8
  73               	__vector_8:
   1:robokits.c    **** //			MADE BY ROBOKITS INDIA.
   2:robokits.c    **** //			VISIT US AT WWW.ROBOKITS.ORG
   3:robokits.c    **** //			PROGRAM FOR BLINKING LED'S ON TIMER1
   4:robokits.c    **** //			WRITTEN FOR PRODUCT ID 19
   5:robokits.c    **** 
   6:robokits.c    **** /*-------------------------------------------------------------------          
   7:robokits.c    ****  Description:
   8:robokits.c    ****  This example shows how to generate delays with timers so that cpu is
   9:robokits.c    ****  free for processing other things. Here cpu is used for blinking led2.
  10:robokits.c    **** 
  11:robokits.c    ****  Note:
  12:robokits.c    ****  Led2 is blinking with normal delay routine and led3 on timer1 interrupt.
  13:robokits.c    ****  
  14:robokits.c    ****  Both leds work at almost 1hz rate.
  15:robokits.c    ****  
  16:robokits.c    ****  Since _delay_ms() function will be affected by the interrupt generation 
  17:robokits.c    ****  and gives more delay. So, after sometime the led timing will be mismached.
  18:robokits.c    ****  
  19:robokits.c    ****  Even the timer delay is not perfectly mached to 1s. Use smaller presclar
  20:robokits.c    ****  for better operation.
  21:robokits.c    ****  
  22:robokits.c    ****  _delay_ms() function parameter passed should not exeed
  23:robokits.c    ****  262.14ms / F_CPU in mhz.
  24:robokits.c    ****  
  25:robokits.c    ****  so for 16MHz the maximum paramer should be 16ms.
  26:robokits.c    ****  
  27:robokits.c    ****  For 1MHz it can be upto 262ms (250 is used for this example).
  28:robokits.c    ****   
  29:robokits.c    ****  Must be changed to get accurate delay at higher MHz.
  30:robokits.c    ****  
  31:robokits.c    ****  The timing will differ if the operating frequency is changed.
  32:robokits.c    **** ---------------------------------------------------------------------*/
  33:robokits.c    **** 
  34:robokits.c    **** /*----------------------------------------------------------------
  35:robokits.c    **** -----------------HEADER FILES-------------------------------------
  36:robokits.c    **** -----------------------------------------------------------------*/
  37:robokits.c    **** 
  38:robokits.c    **** #include <avr/io.h>
  39:robokits.c    **** #include <avr/interrupt.h>
  40:robokits.c    **** #include <compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  41:robokits.c    **** #include <util/delay.h>				//HEADER FILE FOR DELAY
  42:robokits.c    **** 
  43:robokits.c    **** /*----------------------------------------------------------------
  44:robokits.c    **** -----------------CONSTANTS----------------------------------------
  45:robokits.c    **** -----------------------------------------------------------------*/
  46:robokits.c    **** 
  47:robokits.c    **** #define TIMER_0_CNT     0x82		// 1 msec, use AVRcalc to calculate these values
  48:robokits.c    **** 									
  49:robokits.c    **** 									// TIMER OVERFLOW ON 255-130 = 125 COUNTS
  50:robokits.c    **** #define CNT             0xfffc
  51:robokits.c    **** #define TMC16_CK1024	(_BV(CS01))				// 16 BIT TIMER1 AT 1024 PRESCALAR
  52:robokits.c    **** 												// GIVES 8*125 = 1000 CYCLES
  53:robokits.c    **** 												// AT 1MHZ FREQUENCY DELAY OF 1 mSECONDS
  54:robokits.c    **** 
  55:robokits.c    **** 
  56:robokits.c    **** /*----------------------------------------------------------------
  57:robokits.c    **** -----------------GLOBAL VARIABLE----------------------------------
  58:robokits.c    **** -----------------------------------------------------------------*/
  59:robokits.c    **** 
  60:robokits.c    **** static volatile uint8_t led; 					// use volatile when variable is accessed from interrupts
  61:robokits.c    **** 
  62:robokits.c    **** 
  63:robokits.c    **** /*----------------------------------------------------------------
  64:robokits.c    **** -----------------FUNCTIONS----------------------------------------
  65:robokits.c    **** -----------------------------------------------------------------*/
  66:robokits.c    **** 
  67:robokits.c    **** SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
  68:robokits.c    **** {
  74               	 r0,__SREG__
  75               		push r0
  76               		clr __zero_reg__
  77 0000 1F92      		push r24
  78 0002 0F92      		push r25
  79 0004 0FB6      	/* prologue: Signal */
  80 0006 0F92      	/* frame size = 0 */
  82 000a 8F93      	.LM1:
  83 000c 9F93      		sbi 50-32,6
  84               	.LBB48:
  85               	.LBB49:
  69:robokits.c    **** 	sbi(PORTD,6);
  86               	__
  87               		push r0
  88 000e 969A      		in r0,__SREG__
  89               		push r0
  90               		clr __zero_reg__
  91               		push r24
  92               		push r25
  93               	/* prologue: Signal */
  94               	/* frame size = 0 */
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  95               	vector_8:
  97 0010 84E2      	.LM0:
  98 0012 94EF      	.LFBB1:
  99               		push __zero_reg__
 100               		push r0
 101 0014 0197      		in r0,__SREG__
 102 0016 01F4      		push r0
 103               		clr __zero_reg__
 104               		push r24
 105               		push r25
 106               	/* prologue: Signal */
 107               	/* frame size = 0 */
 109               	.LM1:
 110               		sbi 50-32,6
  70:robokits.c    **** 	/*sbi(PORTD,6);
  71:robokits.c    **** 	sbi(PORTD,6);
  72:robokits.c    **** 	sbi(PORTD,6);
  73:robokits.c    **** 	sbi(PORTD,6);
  74:robokits.c    **** 	sbi(PORTD,6);
  75:robokits.c    **** 	sbi(PORTD,6);
  76:robokits.c    **** 	sbi(PORTD,6);
  77:robokits.c    **** 	sbi(PORTD,6);
  78:robokits.c    **** 	sbi(PORTD,6);
  79:robokits.c    **** 	sbi(PORTD,6);
  80:robokits.c    **** 	sbi(PORTD,6);
  81:robokits.c    **** 	sbi(PORTD,6);
  82:robokits.c    **** 	sbi(PORTD,6);
  83:robokits.c    **** 	sbi(PORTD,6);
  84:robokits.c    **** 	sbi(PORTD,6);
  85:robokits.c    **** 	sbi(PORTD,6);
  86:robokits.c    **** 	sbi(PORTD,6);
  87:robokits.c    **** 	sbi(PORTD,6);
  88:robokits.c    **** 	sbi(PORTD,6);
  89:robokits.c    **** 	sbi(PORTD,6);
  90:robokits.c    **** 	sbi(PORTD,6);
  91:robokits.c    **** 	sbi(PORTD,6);
  92:robokits.c    **** 	sbi(PORTD,6);
  93:robokits.c    **** 	sbi(PORTD,6);
  94:robokits.c    **** 	sbi(PORTD,6);
  95:robokits.c    **** 	sbi(PORTD,6);
  96:robokits.c    **** 	sbi(PORTD,6);
  97:robokits.c    **** 	sbi(PORTD,6);
  98:robokits.c    **** 	sbi(PORTD,6);
  99:robokits.c    **** 	sbi(PORTD,6);
 100:robokits.c    **** 	sbi(PORTD,6);
 101:robokits.c    **** 	sbi(PORTD,6);
 102:robokits.c    **** 	sbi(PORTD,6);
 103:robokits.c    **** 	sbi(PORTD,6);
 104:robokits.c    **** 	sbi(PORTD,6);
 105:robokits.c    **** 	sbi(PORTD,6);
 106:robokits.c    **** 	sbi(PORTD,6);
 107:robokits.c    **** 	sbi(PORTD,6);
 108:robokits.c    **** 	sbi(PORTD,6);*/
 109:robokits.c    **** 	_delay_ms(250);
 110:robokits.c    ****     TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 111               	:
 112               		push __zero_reg__
 113 0018 82E8      		push r0
 114 001a 82BF      		in r0,__SREG__
 115               		push r0
 111:robokits.c    **** 
 112:robokits.c    **** 	
 113:robokits.c    **** }
 116               	_vector_8:F(0,15)",36,0,0,__vector_8
 117               	.global	__vector_8
 119 001e 8F91      	__vector_8:
 121 0022 0FBE      	.LM0:
 122 0024 0F90      	.LFBB1:
 123 0026 1F90      		push __zero_reg__
 124 0028 1895      		push r0
 125               		in r0,__SREG__
 126               		push r0
 127               		clr __zero_reg__
 128               		push r24
 129               		push r25
 130               	/* prologue: Signal */
 114:robokits.c    **** 
 115:robokits.c    **** /*----------------------------------------------------------------
 116:robokits.c    **** -----------------MAIN PROGRAM-------------------------------------
 117:robokits.c    **** -----------------------------------------------------------------*/
 118:robokits.c    **** 
 119:robokits.c    **** int main(void)
 120:robokits.c    **** {
 131               	vector_8, @function
 132               	__vector_8:
 134               	.LM0:
 135               	.LFBB1:
 121:robokits.c    ****     
 122:robokits.c    **** 	DDRB=0x01;						//SET DATA DIRECTION REGISTER
 136               	,128,0,0,0
 123:robokits.c    **** 									//SET 1 for OUTPUT PORT
 124:robokits.c    **** 									//SET 0 FOR INPUT PORT
 125:robokits.c    **** 									//ONLY PORTB.0 IS OUTPUT
 126:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
 127:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
 128:robokits.c    **** 									//CHANGE ACCORDING TO USE
 129:robokits.c    **** 	
 130:robokits.c    **** 	DDRD=0xC0;						//SET DATA DIRECTION REGISTER
 140               	c/../../avr/include/avr/fuse.h",130,0,0,0
 131:robokits.c    **** 									//SET 1 for OUTPUT PORT
 132:robokits.c    **** 									//SET 0 FOR INPUT PORT
 133:robokits.c    **** 									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
 134:robokits.c    **** 									//CONFIGURE AS PER REQUIREMENT
 135:robokits.c    **** 									//DEFAULT ALL OTHERS ARE INPUT
 136:robokits.c    **** 									//CHANGE ACCORDING TO USE
 137:robokits.c    **** 	
 138:robokits.c    **** 	
 139:robokits.c    **** 
 140:robokits.c    ****     
 141:robokits.c    ****    TCCR0 = TMC16_CK1024;       	// use CLK/1024 prescale value
 144               	abn	162,0,0,0
 142:robokits.c    ****     TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 148               	tabn	162,0,0,0
 143:robokits.c    ****     
 144:robokits.c    ****     TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 152               	4,6)",128,0,0,0
 145:robokits.c    ****     
 146:robokits.c    ****     sei();                       	// enable interrupts
 155               	4,7)",128,0,0,0
 167               	.global	__vector_8
 169               	__vector_8:
 171 0040 34EF      	.LM0:
 172               	.LFBB1:
 173 0042 C901      		push __zero_reg__
 174               		push r0
 175               		in r0,__SREG__
 176 0044 0197      		push r0
 177 0046 01F4      		clr __zero_reg__
 178               		push r24
 179               		push r25
 180               	/* prologue: Signal */
 181               	/* frame size = 0 */
 183               	.LM1:
 184               		sbi 50-32,6
 185               	.LBB48:
 186               	.LBB49:
 187               	.LBB50:
 188 0048 C901      	.LBB51:
 190               	.Ltext1:
 192 004c 01F4      	.LM2:
 193               		ldi r24,lo8(-3036)
 194               		ldi r25,hi8(-3036)
 195               	/* #APP */
 196               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 197               		1: sbiw r24,1
 198               		brne 1b
 199               	 ;  0 "" 2
 200               	/* #NOAPP */
 201               	.LBE51:
 202               	.LBE50:
 203 004e C901      	.LBE49:
 204               	.LBE48:
 206 0050 0197      	.Ltext2:
 208               	.LM3:
 209               		ldi r24,lo8(-126)
 210               		out 82-32,r24
 211               	/* epilogue start */
 213               	.LM4:
 214               		pop r25
 215               		pop r24
 147:robokits.c    **** 
 148:robokits.c    **** 	    
 149:robokits.c    ****     for (;;) 						// loop forever
 150:robokits.c    **** 	{   
 151:robokits.c    **** 		
 152:robokits.c    **** 		_delay_ms(250);
 153:robokits.c    **** 		_delay_ms(250);
 154:robokits.c    **** 		_delay_ms(250);
 155:robokits.c    **** 		cbi(PORTD,6);
 216               	
 217               	.Ltext2:
 219               	.LM3:
 220               		ldi r24,lo8(-126)
 221               		out 82-32,r24
 222               	/* epilogue start */
 224               	.LM4:
 225               		pop r25
 226               		pop r24
 227 0056 C901      		pop r0
 228               		out __SREG__,r0
 229               		pop r0
 230 0058 0197      		pop __zero_reg__
 231 005a 01F4      		reti
 233               	.Lscope1:
 235               	.global	main
 237               	main:
 239               	.LM5:
 240               	.LFBB2:
 241               	/* prologue: function */
 242 005c C901      	/* frame size = 0 */
 244               	.LM6:
 245 005e 0197      		ldi r25,lo8(1)
 246 0060 01F4      		out 55-32,r25
 248               	.LM7:
 249               		ldi r24,lo8(-64)
 250               		out 49-32,r24
 252               	.LM8:
 253               		ldi r24,lo8(2)
 254               		out 83-32,r24
 256               	.LM9:
 257 0062 C901      		ldi r24,lo8(-126)
 258               		out 82-32,r24
 260 0064 0197      	.LM10:
 261 0066 01F4      		out 89-32,r25
 263               	.LM11:
 264 0068 00C0      	/* #APP */
 265               	 ;  146 "robokits.c" 1
 266               		sei
 267               	 ;  0 "" 2
 268               	/* #NOAPP */
 269               	.LBB52:
 270               	.LBB53:
 271               	.LBB54:
 272               	.LBB55:
DEFINED SYMBOLS
                            *ABS*:00000000 robokits.c
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:2      *ABS*:0000003f __SREG__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:3      *ABS*:0000003e __SP_H__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:4      *ABS*:0000003d __SP_L__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:5      *ABS*:00000034 __CCP__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:7      *ABS*:00000001 __zero_reg__
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:73     .text:00000000 __vector_8
C:\Users\ankit\AppData\Local\Temp/cc9x4LPr.s:130    .text:0000002a main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
