
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004ec  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  000004ee  00000562  2**0
                  ALLOC
  3 .stab         000010b0  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000781  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	5e c0       	rjmp	.+188    	; 0xc2 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ee       	ldi	r30, 0xEC	; 236
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	50 d1       	rcall	.+672    	; 0x2fa <main>
  5a:	46 c2       	rjmp	.+1164   	; 0x4e8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
-----------------------------------------------------------------*/


SIGNAL(SIG_INTERRUPT0)     
/* signal handler for external interrupt int0 */
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	8f 93       	push	r24
  6e:	9f 93       	push	r25
  70:	ef 93       	push	r30
  72:	ff 93       	push	r31

	count++;
  74:	80 91 62 00 	lds	r24, 0x0062
  78:	90 91 63 00 	lds	r25, 0x0063
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	90 93 63 00 	sts	0x0063, r25
  82:	80 93 62 00 	sts	0x0062, r24
	
	if(count==4)
  86:	80 91 62 00 	lds	r24, 0x0062
  8a:	90 91 63 00 	lds	r25, 0x0063
  8e:	04 97       	sbiw	r24, 0x04	; 4
  90:	21 f4       	brne	.+8      	; 0x9a <__vector_1+0x3c>
	{
		count=0;
  92:	10 92 63 00 	sts	0x0063, r1
  96:	10 92 62 00 	sts	0x0062, r1
  9a:	88 e8       	ldi	r24, 0x88	; 136
  9c:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	29 e1       	ldi	r18, 0x19	; 25
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__vector_1+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__vector_1+0x44>
	}
	 _delay_ms(500);
}
  ac:	ff 91       	pop	r31
  ae:	ef 91       	pop	r30
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	3f 91       	pop	r19
  b6:	2f 91       	pop	r18
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_2>:



SIGNAL(SIG_INTERRUPT1)     
/* signal handler for external interrupt int0 */
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	68 ea       	ldi	r22, 0xA8	; 168
  de:	71 e6       	ldi	r23, 0x61	; 97
  e0:	40 e5       	ldi	r20, 0x50	; 80
  e2:	53 ec       	ldi	r21, 0xC3	; 195
  e4:	2d c0       	rjmp	.+90     	; 0x140 <__vector_2+0x7e>
	int d=250;
	
	while(flag==11)
	{
		if(no==1 && no==3)
  e6:	20 91 68 00 	lds	r18, 0x0068
  ea:	30 91 69 00 	lds	r19, 0x0069
  ee:	21 30       	cpi	r18, 0x01	; 1
  f0:	31 05       	cpc	r19, r1
  f2:	c1 f4       	brne	.+48     	; 0x124 <__vector_2+0x62>
  f4:	80 91 68 00 	lds	r24, 0x0068
  f8:	90 91 69 00 	lds	r25, 0x0069
  fc:	03 97       	sbiw	r24, 0x03	; 3
  fe:	91 f4       	brne	.+36     	; 0x124 <__vector_2+0x62>
		{
			if(no==3)
 100:	80 91 68 00 	lds	r24, 0x0068
 104:	90 91 69 00 	lds	r25, 0x0069
 108:	03 97       	sbiw	r24, 0x03	; 3
 10a:	21 f4       	brne	.+8      	; 0x114 <__vector_2+0x52>
			{
				no=1;
 10c:	30 93 69 00 	sts	0x0069, r19
 110:	20 93 68 00 	sts	0x0068, r18
			}
			sbi(PORTD,6);
 114:	96 9a       	sbi	0x12, 6	; 18
 116:	cb 01       	movw	r24, r22
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <__vector_2+0x56>
			_delay_ms(100);
			cbi(PORTD,6);
 11c:	96 98       	cbi	0x12, 6	; 18
 11e:	cb 01       	movw	r24, r22
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <__vector_2+0x5e>
			_delay_ms(100);
		}
		if(no==2)
 124:	80 91 68 00 	lds	r24, 0x0068
 128:	90 91 69 00 	lds	r25, 0x0069
 12c:	02 97       	sbiw	r24, 0x02	; 2
 12e:	41 f4       	brne	.+16     	; 0x140 <__vector_2+0x7e>
		{
			sbi(PORTD,6);
 130:	96 9a       	sbi	0x12, 6	; 18
 132:	ca 01       	movw	r24, r20
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_2+0x72>
			_delay_ms(200);
			cbi(PORTD,6);
 138:	96 98       	cbi	0x12, 6	; 18
 13a:	ca 01       	movw	r24, r20
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <__vector_2+0x7a>
SIGNAL(SIG_INTERRUPT1)     
/* signal handler for external interrupt int0 */
{
	int d=250;
	
	while(flag==11)
 140:	80 91 60 00 	lds	r24, 0x0060
 144:	90 91 61 00 	lds	r25, 0x0061
 148:	0b 97       	sbiw	r24, 0x0b	; 11
 14a:	69 f2       	breq	.-102    	; 0xe6 <__vector_2+0x24>
 14c:	2e c0       	rjmp	.+92     	; 0x1aa <__vector_2+0xe8>
			_delay_ms(200);
		}
	}
	while(flag==12)
	{
		if(no1==1 && no1==3)
 14e:	20 91 6a 00 	lds	r18, 0x006A
 152:	30 91 6b 00 	lds	r19, 0x006B
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	31 05       	cpc	r19, r1
 15a:	c1 f4       	brne	.+48     	; 0x18c <__vector_2+0xca>
 15c:	80 91 6a 00 	lds	r24, 0x006A
 160:	90 91 6b 00 	lds	r25, 0x006B
 164:	03 97       	sbiw	r24, 0x03	; 3
 166:	91 f4       	brne	.+36     	; 0x18c <__vector_2+0xca>
		{
			if(no1==3)
 168:	80 91 6a 00 	lds	r24, 0x006A
 16c:	90 91 6b 00 	lds	r25, 0x006B
 170:	03 97       	sbiw	r24, 0x03	; 3
 172:	21 f4       	brne	.+8      	; 0x17c <__vector_2+0xba>
			{
				no1=1;
 174:	30 93 6b 00 	sts	0x006B, r19
 178:	20 93 6a 00 	sts	0x006A, r18
			}
			sbi(PORTD,6);
 17c:	96 9a       	sbi	0x12, 6	; 18
 17e:	cb 01       	movw	r24, r22
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <__vector_2+0xbe>
			_delay_ms(100);
			cbi(PORTD,6);
 184:	96 98       	cbi	0x12, 6	; 18
 186:	cb 01       	movw	r24, r22
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <__vector_2+0xc6>
			_delay_ms(100);
		}
		if(no1==2)
 18c:	80 91 6a 00 	lds	r24, 0x006A
 190:	90 91 6b 00 	lds	r25, 0x006B
 194:	02 97       	sbiw	r24, 0x02	; 2
 196:	69 f4       	brne	.+26     	; 0x1b2 <__vector_2+0xf0>
		{
			sbi(PORTD,6);
 198:	96 9a       	sbi	0x12, 6	; 18
 19a:	ca 01       	movw	r24, r20
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <__vector_2+0xda>
			_delay_ms(200);
			cbi(PORTD,6);
 1a0:	96 98       	cbi	0x12, 6	; 18
 1a2:	ca 01       	movw	r24, r20
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__vector_2+0xe2>
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__vector_2+0xf0>
 1aa:	68 ea       	ldi	r22, 0xA8	; 168
 1ac:	71 e6       	ldi	r23, 0x61	; 97
 1ae:	40 e5       	ldi	r20, 0x50	; 80
 1b0:	53 ec       	ldi	r21, 0xC3	; 195
			_delay_ms(200);
			cbi(PORTD,6);
			_delay_ms(200);
		}
	}
	while(flag==12)
 1b2:	80 91 60 00 	lds	r24, 0x0060
 1b6:	90 91 61 00 	lds	r25, 0x0061
 1ba:	0c 97       	sbiw	r24, 0x0c	; 12
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <__vector_2+0xfe>
 1be:	c7 cf       	rjmp	.-114    	; 0x14e <__vector_2+0x8c>
 1c0:	2e c0       	rjmp	.+92     	; 0x21e <__vector_2+0x15c>
			_delay_ms(200);
		}
	}
	while(flag==13)
	{
		if(no2==1 && no2==3)
 1c2:	20 91 66 00 	lds	r18, 0x0066
 1c6:	30 91 67 00 	lds	r19, 0x0067
 1ca:	21 30       	cpi	r18, 0x01	; 1
 1cc:	31 05       	cpc	r19, r1
 1ce:	c1 f4       	brne	.+48     	; 0x200 <__vector_2+0x13e>
 1d0:	80 91 66 00 	lds	r24, 0x0066
 1d4:	90 91 67 00 	lds	r25, 0x0067
 1d8:	03 97       	sbiw	r24, 0x03	; 3
 1da:	91 f4       	brne	.+36     	; 0x200 <__vector_2+0x13e>
		{
			if(no2==3)
 1dc:	80 91 66 00 	lds	r24, 0x0066
 1e0:	90 91 67 00 	lds	r25, 0x0067
 1e4:	03 97       	sbiw	r24, 0x03	; 3
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <__vector_2+0x12e>
			{
				no2=1;
 1e8:	30 93 67 00 	sts	0x0067, r19
 1ec:	20 93 66 00 	sts	0x0066, r18
			}
			sbi(PORTD,6);
 1f0:	96 9a       	sbi	0x12, 6	; 18
 1f2:	cb 01       	movw	r24, r22
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <__vector_2+0x132>
			_delay_ms(100);
			cbi(PORTD,6);
 1f8:	96 98       	cbi	0x12, 6	; 18
 1fa:	cb 01       	movw	r24, r22
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <__vector_2+0x13a>
			_delay_ms(100);
		}
		if(no2==2)
 200:	80 91 66 00 	lds	r24, 0x0066
 204:	90 91 67 00 	lds	r25, 0x0067
 208:	02 97       	sbiw	r24, 0x02	; 2
 20a:	69 f4       	brne	.+26     	; 0x226 <__vector_2+0x164>
		{
			sbi(PORTD,6);
 20c:	96 9a       	sbi	0x12, 6	; 18
 20e:	ca 01       	movw	r24, r20
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <__vector_2+0x14e>
			_delay_ms(200);
			cbi(PORTD,6);
 214:	96 98       	cbi	0x12, 6	; 18
 216:	ca 01       	movw	r24, r20
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__vector_2+0x156>
 21c:	04 c0       	rjmp	.+8      	; 0x226 <__vector_2+0x164>
 21e:	68 ea       	ldi	r22, 0xA8	; 168
 220:	71 e6       	ldi	r23, 0x61	; 97
 222:	40 e5       	ldi	r20, 0x50	; 80
 224:	53 ec       	ldi	r21, 0xC3	; 195
			_delay_ms(200);
			cbi(PORTD,6);
			_delay_ms(200);
		}
	}
	while(flag==13)
 226:	80 91 60 00 	lds	r24, 0x0060
 22a:	90 91 61 00 	lds	r25, 0x0061
 22e:	0d 97       	sbiw	r24, 0x0d	; 13
 230:	09 f4       	brne	.+2      	; 0x234 <__vector_2+0x172>
 232:	c7 cf       	rjmp	.-114    	; 0x1c2 <__vector_2+0x100>
 234:	2e c0       	rjmp	.+92     	; 0x292 <__vector_2+0x1d0>
			_delay_ms(200);
		}
	}
	while(flag==10)
	{
		if(no3==1 && no3==3)
 236:	20 91 64 00 	lds	r18, 0x0064
 23a:	30 91 65 00 	lds	r19, 0x0065
 23e:	21 30       	cpi	r18, 0x01	; 1
 240:	31 05       	cpc	r19, r1
 242:	c1 f4       	brne	.+48     	; 0x274 <__vector_2+0x1b2>
 244:	80 91 64 00 	lds	r24, 0x0064
 248:	90 91 65 00 	lds	r25, 0x0065
 24c:	03 97       	sbiw	r24, 0x03	; 3
 24e:	91 f4       	brne	.+36     	; 0x274 <__vector_2+0x1b2>
		{
			if(no3==3)
 250:	80 91 64 00 	lds	r24, 0x0064
 254:	90 91 65 00 	lds	r25, 0x0065
 258:	03 97       	sbiw	r24, 0x03	; 3
 25a:	21 f4       	brne	.+8      	; 0x264 <__vector_2+0x1a2>
			{
				no3=1;
 25c:	30 93 65 00 	sts	0x0065, r19
 260:	20 93 64 00 	sts	0x0064, r18
			}
			sbi(PORTD,6);
 264:	96 9a       	sbi	0x12, 6	; 18
 266:	cb 01       	movw	r24, r22
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <__vector_2+0x1a6>
			_delay_ms(100);
			cbi(PORTD,6);
 26c:	96 98       	cbi	0x12, 6	; 18
 26e:	cb 01       	movw	r24, r22
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <__vector_2+0x1ae>
			_delay_ms(100);
		}
		if(no3==2)
 274:	80 91 64 00 	lds	r24, 0x0064
 278:	90 91 65 00 	lds	r25, 0x0065
 27c:	02 97       	sbiw	r24, 0x02	; 2
 27e:	69 f4       	brne	.+26     	; 0x29a <__vector_2+0x1d8>
		{
			sbi(PORTD,6);
 280:	96 9a       	sbi	0x12, 6	; 18
 282:	ca 01       	movw	r24, r20
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <__vector_2+0x1c2>
			_delay_ms(200);
			cbi(PORTD,6);
 288:	96 98       	cbi	0x12, 6	; 18
 28a:	ca 01       	movw	r24, r20
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <__vector_2+0x1ca>
 290:	04 c0       	rjmp	.+8      	; 0x29a <__vector_2+0x1d8>
 292:	68 ea       	ldi	r22, 0xA8	; 168
 294:	71 e6       	ldi	r23, 0x61	; 97
 296:	40 e5       	ldi	r20, 0x50	; 80
 298:	53 ec       	ldi	r21, 0xC3	; 195
			_delay_ms(200);
			cbi(PORTD,6);
			_delay_ms(200);
		}
	}
	while(flag==10)
 29a:	80 91 60 00 	lds	r24, 0x0060
 29e:	90 91 61 00 	lds	r25, 0x0061
 2a2:	0a 97       	sbiw	r24, 0x0a	; 10
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_2+0x1e6>
 2a6:	c7 cf       	rjmp	.-114    	; 0x236 <__vector_2+0x174>
			_delay_ms(200);
			cbi(PORTD,6);
			_delay_ms(200);
		}
	}
if(flag==33)
 2a8:	80 91 60 00 	lds	r24, 0x0060
 2ac:	90 91 61 00 	lds	r25, 0x0061
 2b0:	81 97       	sbiw	r24, 0x21	; 33
 2b2:	b1 f4       	brne	.+44     	; 0x2e0 <__vector_2+0x21e>
 2b4:	2a ef       	ldi	r18, 0xFA	; 250
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	44 e2       	ldi	r20, 0x24	; 36
 2ba:	54 ef       	ldi	r21, 0xF4	; 244
{
		for(d;d<3000 ;d=d+250)
		{
			sbi(PORTD,6);
 2bc:	96 9a       	sbi	0x12, 6	; 18
			sbi(PORTD,7);
 2be:	97 9a       	sbi	0x12, 7	; 18
 2c0:	ca 01       	movw	r24, r20
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <__vector_2+0x200>
			_delay_ms(250);
			cbi(PORTD,6);
 2c6:	96 98       	cbi	0x12, 6	; 18
			cbi(PORTD,7);
 2c8:	97 98       	cbi	0x12, 7	; 18
 2ca:	ca 01       	movw	r24, r20
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <__vector_2+0x20a>
			_delay_ms(250);
			if(bit_is_clear(PIND,3))
 2d0:	83 99       	sbic	0x10, 3	; 16
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <__vector_2+0x21e>
			_delay_ms(200);
		}
	}
if(flag==33)
{
		for(d;d<3000 ;d=d+250)
 2d4:	26 50       	subi	r18, 0x06	; 6
 2d6:	3f 4f       	sbci	r19, 0xFF	; 255
 2d8:	8b e0       	ldi	r24, 0x0B	; 11
 2da:	28 3b       	cpi	r18, 0xB8	; 184
 2dc:	38 07       	cpc	r19, r24
 2de:	71 f7       	brne	.-36     	; 0x2bc <__vector_2+0x1fa>
			{break;}
		}

	}

}
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <main>:
/*-----------------MAIN PROGRAM-------------------------------------
----------------------------------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	DDRB=0x01;						//SET DATA DIRECTION REGISTER
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	87 bb       	out	0x17, r24	; 23
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	
	DDRD=0xC0;						//SET DATA DIRECTION REGISTER
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	81 bb       	out	0x11, r24	; 17
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	
	sbi(PORTB,0);					//LED1 ON (INDICATION FOR READY TO USE)
 312:	c0 9a       	sbi	0x18, 0	; 24
	
	sbi(PORTD,2);					//ENABLE PULL UP FOR SW1
 314:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SW2
 316:	93 9a       	sbi	0x12, 3	; 18
    
    GIMSK = _BV(INT1);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC11);
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	85 bf       	out	0x35, r24	; 53
  // MCUCR=0x00;
	
    
	sei();                       	// enable interrupts 
 320:	78 94       	sei
 322:	44 e2       	ldi	r20, 0x24	; 36
 324:	54 ef       	ldi	r21, 0xF4	; 244
		{
			cbi(PORTD,6);
			cbi(PORTD,7);
			while(bit_is_clear(PIND,3))
			{
				GIMSK = _BV(INT0);
 326:	30 e4       	ldi	r19, 0x40	; 64
 328:	c3 2e       	mov	r12, r19
				MCUCR = 0x02;
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	d2 2e       	mov	r13, r18
					
				}
				
				  else
				{
					flag=10;
 32e:	0a e0       	ldi	r16, 0x0A	; 10
 330:	10 e0       	ldi	r17, 0x00	; 0
					cbi(PORTD,6);
					
				}
				else if(count==3)
				{
					flag=13;
 332:	cd e0       	ldi	r28, 0x0D	; 13
 334:	d0 e0       	ldi	r29, 0x00	; 0
					
				}
				
				else if(count==2)
				{
					flag=12;
 336:	ac e0       	ldi	r26, 0x0C	; 12
 338:	b0 e0       	ldi	r27, 0x00	; 0
				MCUCR = 0x02;
				

				if(count==1)
				{
					flag=11;
 33a:	6b e0       	ldi	r22, 0x0B	; 11
 33c:	70 e0       	ldi	r23, 0x00	; 0

		}
		if(flag==11 || flag==12 || flag==13 || flag==10)
		{ 
			//fl11();
			GIMSK=_BV(INT1);
 33e:	90 e8       	ldi	r25, 0x80	; 128
 340:	e9 2e       	mov	r14, r25
			MCUCR=_BV(ISC11);
 342:	88 e0       	ldi	r24, 0x08	; 8
 344:	f8 2e       	mov	r15, r24
 346:	29 e1       	ldi	r18, 0x19	; 25
 348:	30 e0       	ldi	r19, 0x00	; 0
	sei();                       	// enable interrupts 
    
	
    for (;;) 					 	//BLINK LED2
	{	
		sbi(PORTD,6);
 34a:	96 9a       	sbi	0x12, 6	; 18
		sbi(PORTD,7);
 34c:	97 9a       	sbi	0x12, 7	; 18
 34e:	ca 01       	movw	r24, r20
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x56>
		_delay_ms(250);
		cbi(PORTD,6);
 354:	96 98       	cbi	0x12, 6	; 18
		cbi(PORTD,7);
 356:	97 98       	cbi	0x12, 7	; 18
 358:	ca 01       	movw	r24, r20
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <main+0x60>
		_delay_ms(250);
		if(bit_is_clear(PIND,3))
 35e:	83 99       	sbic	0x10, 3	; 16
 360:	31 c0       	rjmp	.+98     	; 0x3c4 <main+0xca>
 362:	2c c0       	rjmp	.+88     	; 0x3bc <main+0xc2>
		{
			cbi(PORTD,6);
			cbi(PORTD,7);
			while(bit_is_clear(PIND,3))
			{
				GIMSK = _BV(INT0);
 364:	cb be       	out	0x3b, r12	; 59
				MCUCR = 0x02;
 366:	d5 be       	out	0x35, r13	; 53
				

				if(count==1)
 368:	80 91 62 00 	lds	r24, 0x0062
 36c:	90 91 63 00 	lds	r25, 0x0063
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	31 f4       	brne	.+12     	; 0x380 <main+0x86>
				{
					flag=11;
 374:	70 93 61 00 	sts	0x0061, r23
 378:	60 93 60 00 	sts	0x0060, r22
					sbi(PORTD,6);
 37c:	96 9a       	sbi	0x12, 6	; 18
 37e:	1f c0       	rjmp	.+62     	; 0x3be <main+0xc4>
					cbi(PORTD,7);
					
				}
				
				else if(count==2)
 380:	80 91 62 00 	lds	r24, 0x0062
 384:	90 91 63 00 	lds	r25, 0x0063
 388:	02 97       	sbiw	r24, 0x02	; 2
 38a:	39 f4       	brne	.+14     	; 0x39a <main+0xa0>
				{
					flag=12;
 38c:	b0 93 61 00 	sts	0x0061, r27
 390:	a0 93 60 00 	sts	0x0060, r26
					sbi(PORTD,7);
 394:	97 9a       	sbi	0x12, 7	; 18
					cbi(PORTD,6);
 396:	96 98       	cbi	0x12, 6	; 18
 398:	13 c0       	rjmp	.+38     	; 0x3c0 <main+0xc6>
					
				}
				else if(count==3)
 39a:	80 91 62 00 	lds	r24, 0x0062
 39e:	90 91 63 00 	lds	r25, 0x0063
 3a2:	03 97       	sbiw	r24, 0x03	; 3
 3a4:	39 f4       	brne	.+14     	; 0x3b4 <main+0xba>
				{
					flag=13;
 3a6:	d0 93 61 00 	sts	0x0061, r29
 3aa:	c0 93 60 00 	sts	0x0060, r28
					sbi(PORTD,6);
 3ae:	96 9a       	sbi	0x12, 6	; 18
					sbi(PORTD,7);
 3b0:	97 9a       	sbi	0x12, 7	; 18
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <main+0xc6>
					
				}
				
				  else
				{
					flag=10;
 3b4:	10 93 61 00 	sts	0x0061, r17
 3b8:	00 93 60 00 	sts	0x0060, r16
					cbi(PORTD,6);
 3bc:	96 98       	cbi	0x12, 6	; 18
					cbi(PORTD,7);
 3be:	97 98       	cbi	0x12, 7	; 18
		_delay_ms(250);
		if(bit_is_clear(PIND,3))
		{
			cbi(PORTD,6);
			cbi(PORTD,7);
			while(bit_is_clear(PIND,3))
 3c0:	83 9b       	sbis	0x10, 3	; 16
 3c2:	d0 cf       	rjmp	.-96     	; 0x364 <main+0x6a>
			
					
			}

		}
		if(flag==11 || flag==12 || flag==13 || flag==10)
 3c4:	80 91 60 00 	lds	r24, 0x0060
 3c8:	90 91 61 00 	lds	r25, 0x0061
 3cc:	0b 97       	sbiw	r24, 0x0b	; 11
 3ce:	99 f0       	breq	.+38     	; 0x3f6 <main+0xfc>
 3d0:	80 91 60 00 	lds	r24, 0x0060
 3d4:	90 91 61 00 	lds	r25, 0x0061
 3d8:	0c 97       	sbiw	r24, 0x0c	; 12
 3da:	69 f0       	breq	.+26     	; 0x3f6 <main+0xfc>
 3dc:	80 91 60 00 	lds	r24, 0x0060
 3e0:	90 91 61 00 	lds	r25, 0x0061
 3e4:	0d 97       	sbiw	r24, 0x0d	; 13
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <main+0xfc>
 3e8:	80 91 60 00 	lds	r24, 0x0060
 3ec:	90 91 61 00 	lds	r25, 0x0061
 3f0:	0a 97       	sbiw	r24, 0x0a	; 10
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <main+0xfc>
 3f4:	76 c0       	rjmp	.+236    	; 0x4e2 <__stack+0x83>
		{ 
			//fl11();
			GIMSK=_BV(INT1);
 3f6:	eb be       	out	0x3b, r14	; 59
			MCUCR=_BV(ISC11);
 3f8:	f5 be       	out	0x35, r15	; 53
			if(flag==11)
 3fa:	80 91 60 00 	lds	r24, 0x0060
 3fe:	90 91 61 00 	lds	r25, 0x0061
 402:	0b 97       	sbiw	r24, 0x0b	; 11
 404:	b9 f4       	brne	.+46     	; 0x434 <main+0x13a>
			{
				no++;
 406:	80 91 68 00 	lds	r24, 0x0068
 40a:	90 91 69 00 	lds	r25, 0x0069
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 69 00 	sts	0x0069, r25
 414:	80 93 68 00 	sts	0x0068, r24
 418:	88 ea       	ldi	r24, 0xA8	; 168
 41a:	91 e6       	ldi	r25, 0x61	; 97
 41c:	f9 01       	movw	r30, r18
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <main+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 422:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 424:	d9 f7       	brne	.-10     	; 0x41c <main+0x122>
 426:	88 ea       	ldi	r24, 0xA8	; 168
 428:	91 e6       	ldi	r25, 0x61	; 97
 42a:	f9 01       	movw	r30, r18
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <main+0x132>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 432:	d9 f7       	brne	.-10     	; 0x42a <main+0x130>
				_delay_ms(2500);
				_delay_ms(2500);

			}
			if(flag==12)
 434:	80 91 60 00 	lds	r24, 0x0060
 438:	90 91 61 00 	lds	r25, 0x0061
 43c:	0c 97       	sbiw	r24, 0x0c	; 12
 43e:	b9 f4       	brne	.+46     	; 0x46e <__stack+0xf>
			{
				no1++;
 440:	80 91 6a 00 	lds	r24, 0x006A
 444:	90 91 6b 00 	lds	r25, 0x006B
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 6b 00 	sts	0x006B, r25
 44e:	80 93 6a 00 	sts	0x006A, r24
 452:	88 ea       	ldi	r24, 0xA8	; 168
 454:	91 e6       	ldi	r25, 0x61	; 97
 456:	f9 01       	movw	r30, r18
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45e:	d9 f7       	brne	.-10     	; 0x456 <main+0x15c>
 460:	88 ea       	ldi	r24, 0xA8	; 168
 462:	91 e6       	ldi	r25, 0x61	; 97
 464:	f9 01       	movw	r30, r18
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46c:	d9 f7       	brne	.-10     	; 0x464 <__stack+0x5>
				_delay_ms(2500);
				_delay_ms(2500);
			}
			if(flag==13)
 46e:	80 91 60 00 	lds	r24, 0x0060
 472:	90 91 61 00 	lds	r25, 0x0061
 476:	0d 97       	sbiw	r24, 0x0d	; 13
 478:	b9 f4       	brne	.+46     	; 0x4a8 <__stack+0x49>
			{
				no2++;
 47a:	80 91 66 00 	lds	r24, 0x0066
 47e:	90 91 67 00 	lds	r25, 0x0067
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	90 93 67 00 	sts	0x0067, r25
 488:	80 93 66 00 	sts	0x0066, r24
 48c:	88 ea       	ldi	r24, 0xA8	; 168
 48e:	91 e6       	ldi	r25, 0x61	; 97
 490:	f9 01       	movw	r30, r18
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__stack+0x33>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 496:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 498:	d9 f7       	brne	.-10     	; 0x490 <__stack+0x31>
 49a:	88 ea       	ldi	r24, 0xA8	; 168
 49c:	91 e6       	ldi	r25, 0x61	; 97
 49e:	f9 01       	movw	r30, r18
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__stack+0x41>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4a6:	d9 f7       	brne	.-10     	; 0x49e <__stack+0x3f>
				_delay_ms(2500);
				_delay_ms(2500);
			}
			if(flag==10)
 4a8:	80 91 60 00 	lds	r24, 0x0060
 4ac:	90 91 61 00 	lds	r25, 0x0061
 4b0:	0a 97       	sbiw	r24, 0x0a	; 10
 4b2:	b9 f4       	brne	.+46     	; 0x4e2 <__stack+0x83>
			{
				no3++;
 4b4:	80 91 64 00 	lds	r24, 0x0064
 4b8:	90 91 65 00 	lds	r25, 0x0065
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	90 93 65 00 	sts	0x0065, r25
 4c2:	80 93 64 00 	sts	0x0064, r24
 4c6:	88 ea       	ldi	r24, 0xA8	; 168
 4c8:	91 e6       	ldi	r25, 0x61	; 97
 4ca:	f9 01       	movw	r30, r18
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__stack+0x6d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d2:	d9 f7       	brne	.-10     	; 0x4ca <__stack+0x6b>
 4d4:	88 ea       	ldi	r24, 0xA8	; 168
 4d6:	91 e6       	ldi	r25, 0x61	; 97
 4d8:	f9 01       	movw	r30, r18
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__stack+0x7b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__stack+0x79>
				_delay_ms(2500);
				_delay_ms(2500);
			}
		}
	
		GIMSK = _BV(INT1);
 4e2:	eb be       	out	0x3b, r14	; 59
		MCUCR = _BV(ISC11);
 4e4:	f5 be       	out	0x35, r15	; 53
 4e6:	31 cf       	rjmp	.-414    	; 0x34a <main+0x50>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
