
motortest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800060  000003fe  00000472  2**0
                  ALLOC
  2 .stab         00000c78  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000083c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	f0 c0       	rjmp	.+480    	; 0x1f4 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ef       	ldi	r30, 0xFE	; 254
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5e d1       	rcall	.+700    	; 0x316 <main>
  5a:	cf c1       	rjmp	.+926    	; 0x3fa <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <speed>:
											// GIVES 64*63 = 4000 CYCLES		//8mhz  500 micro sec delay
											// AT 8MHZ FREQUENCY 1 cycle is of 0.125 micro sec.
//************** FUNCTIONS ********************
//***************************************
void speed(char direction,int value)
{
  5e:	48 2f       	mov	r20, r24
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	26 1b       	sub	r18, r22
  66:	37 0b       	sbc	r19, r23
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed+0x26>
		{
			PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	82 17       	cp	r24, r18
  70:	93 07       	cpc	r25, r19
  72:	dc f3       	brlt	.-10     	; 0x6a <speed+0xc>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <speed+0x20>
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  7a:	48 bb       	out	0x18, r20	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	86 17       	cp	r24, r22
  80:	97 07       	cpc	r25, r23
  82:	dc f3       	brlt	.-10     	; 0x7a <speed+0x1c>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	8e 3f       	cpi	r24, 0xFE	; 254
  88:	18 f4       	brcc	.+6      	; 0x90 <speed+0x32>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	ef cf       	rjmp	.-34     	; 0x6e <speed+0x10>
  90:	08 95       	ret

00000092 <direction_motor>:

void direction_motor(int detectline)
{
	//Set the direction and speed according to the line detected
	char direction;
	switch(detectline)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	09 f4       	brne	.+2      	; 0x9a <direction_motor+0x8>
  98:	5f c0       	rjmp	.+190    	; 0x158 <direction_motor+0xc6>
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	91 05       	cpc	r25, r1
  9e:	5c f4       	brge	.+22     	; 0xb6 <direction_motor+0x24>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	91 05       	cpc	r25, r1
  a4:	59 f1       	breq	.+86     	; 0xfc <direction_motor+0x6a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <direction_motor+0x1c>
  ac:	3e c0       	rjmp	.+124    	; 0x12a <direction_motor+0x98>
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <direction_motor+0x22>
  b2:	9f c0       	rjmp	.+318    	; 0x1f2 <direction_motor+0x160>
  b4:	0c c0       	rjmp	.+24     	; 0xce <direction_motor+0x3c>
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <direction_motor+0x2c>
  bc:	82 c0       	rjmp	.+260    	; 0x1c2 <direction_motor+0x130>
  be:	86 30       	cpi	r24, 0x06	; 6
  c0:	91 05       	cpc	r25, r1
  c2:	0c f4       	brge	.+2      	; 0xc6 <direction_motor+0x34>
  c4:	6a c0       	rjmp	.+212    	; 0x19a <direction_motor+0x108>
  c6:	07 97       	sbiw	r24, 0x07	; 7
  c8:	09 f0       	breq	.+2      	; 0xcc <direction_motor+0x3a>
  ca:	93 c0       	rjmp	.+294    	; 0x1f2 <direction_motor+0x160>
  cc:	8e c0       	rjmp	.+284    	; 0x1ea <direction_motor+0x158>
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  d4:	21 e8       	ldi	r18, 0x81	; 129
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <direction_motor+0x62>
	char direction;
	switch(detectline)
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
  dc:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	87 33       	cpi	r24, 0x37	; 55
  e2:	91 05       	cpc	r25, r1
  e4:	d9 f7       	brne	.-10     	; 0xdc <direction_motor+0x4a>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  ea:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	88 3c       	cpi	r24, 0xC8	; 200
  f0:	91 05       	cpc	r25, r1
  f2:	d9 f7       	brne	.-10     	; 0xea <direction_motor+0x58>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  f4:	82 b7       	in	r24, 0x32	; 50
  f6:	8e 3f       	cpi	r24, 0xFE	; 254
  f8:	78 f3       	brcs	.-34     	; 0xd8 <direction_motor+0x46>
  fa:	08 95       	ret
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 102:	21 e4       	ldi	r18, 0x41	; 65
 104:	0e c0       	rjmp	.+28     	; 0x122 <direction_motor+0x90>
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 10a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	83 32       	cpi	r24, 0x23	; 35
 110:	91 05       	cpc	r25, r1
 112:	d9 f7       	brne	.-10     	; 0x10a <direction_motor+0x78>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 118:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	8c 3d       	cpi	r24, 0xDC	; 220
 11e:	91 05       	cpc	r25, r1
 120:	d9 f7       	brne	.-10     	; 0x118 <direction_motor+0x86>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 122:	82 b7       	in	r24, 0x32	; 50
 124:	8e 3f       	cpi	r24, 0xFE	; 254
 126:	78 f3       	brcs	.-34     	; 0x106 <direction_motor+0x74>
 128:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 130:	22 e8       	ldi	r18, 0x82	; 130
 132:	0e c0       	rjmp	.+28     	; 0x150 <direction_motor+0xbe>
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 138:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	83 32       	cpi	r24, 0x23	; 35
 13e:	91 05       	cpc	r25, r1
 140:	d9 f7       	brne	.-10     	; 0x138 <direction_motor+0xa6>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 146:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	8c 3d       	cpi	r24, 0xDC	; 220
 14c:	91 05       	cpc	r25, r1
 14e:	d9 f7       	brne	.-10     	; 0x146 <direction_motor+0xb4>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 150:	82 b7       	in	r24, 0x32	; 50
 152:	8e 3f       	cpi	r24, 0xFE	; 254
 154:	78 f3       	brcs	.-34     	; 0x134 <direction_motor+0xa2>
 156:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 4:	//stop
				direction=0x00;
				flag=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 66 00 	sts	0x0066, r25
 160:	80 93 65 00 	sts	0x0065, r24
 164:	07 c0       	rjmp	.+14     	; 0x174 <direction_motor+0xe2>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 16a:	18 ba       	out	0x18, r1	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	8f 3f       	cpi	r24, 0xFF	; 255
 170:	91 05       	cpc	r25, r1
 172:	d9 f7       	brne	.-10     	; 0x16a <direction_motor+0xd8>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 174:	82 b7       	in	r24, 0x32	; 50
 176:	8e 3f       	cpi	r24, 0xFE	; 254
 178:	b0 f3       	brcs	.-20     	; 0x166 <direction_motor+0xd4>
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 180:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	83 32       	cpi	r24, 0x23	; 35
 186:	91 05       	cpc	r25, r1
 188:	d9 f7       	brne	.-10     	; 0x180 <direction_motor+0xee>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 18e:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	8c 3d       	cpi	r24, 0xDC	; 220
 194:	91 05       	cpc	r25, r1
 196:	d9 f7       	brne	.-10     	; 0x18e <direction_motor+0xfc>
 198:	01 c0       	rjmp	.+2      	; 0x19c <direction_motor+0x10a>
		{
			PORTB=direction;
 19a:	22 e0       	ldi	r18, 0x02	; 2
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 19c:	82 b7       	in	r24, 0x32	; 50
 19e:	8e 3f       	cpi	r24, 0xFE	; 254
 1a0:	68 f3       	brcs	.-38     	; 0x17c <direction_motor+0xea>
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1a8:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	83 32       	cpi	r24, 0x23	; 35
 1ae:	91 05       	cpc	r25, r1
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <direction_motor+0x116>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1b6:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	8c 3d       	cpi	r24, 0xDC	; 220
 1bc:	91 05       	cpc	r25, r1
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <direction_motor+0x124>
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <direction_motor+0x132>
		{
			PORTB=direction;
 1c2:	20 e4       	ldi	r18, 0x40	; 64
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1c4:	82 b7       	in	r24, 0x32	; 50
 1c6:	8e 3f       	cpi	r24, 0xFE	; 254
 1c8:	68 f3       	brcs	.-38     	; 0x1a4 <direction_motor+0x112>
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1d0:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	83 32       	cpi	r24, 0x23	; 35
 1d6:	91 05       	cpc	r25, r1
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <direction_motor+0x13e>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1de:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	8c 3d       	cpi	r24, 0xDC	; 220
 1e4:	91 05       	cpc	r25, r1
 1e6:	d9 f7       	brne	.-10     	; 0x1de <direction_motor+0x14c>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <direction_motor+0x15a>
		{
			PORTB=direction;
 1ea:	22 e4       	ldi	r18, 0x42	; 66
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1ec:	82 b7       	in	r24, 0x32	; 50
 1ee:	8e 3f       	cpi	r24, 0xFE	; 254
 1f0:	68 f3       	brcs	.-38     	; 0x1cc <direction_motor+0x13a>
 1f2:	08 95       	ret

000001f4 <__vector_9>:
	}
}


SIGNAL(SIG_OVERFLOW0)            			// signal handler for tcnt0 overflow interrupt
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	//Every 500 micro sec
	if(startcount==0)
 216:	80 91 6e 00 	lds	r24, 0x006E
 21a:	90 91 6f 00 	lds	r25, 0x006F
 21e:	89 2b       	or	r24, r25
 220:	79 f4       	brne	.+30     	; 0x240 <__vector_9+0x4c>
 222:	80 e5       	ldi	r24, 0x50	; 80
 224:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 226:	29 e1       	ldi	r18, 0x19	; 25
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <__vector_9+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 232:	d9 f7       	brne	.-10     	; 0x22a <__vector_9+0x36>
	{
		_delay_ms(5000);					//During first time entering this mode delay is used
		startcount++;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 6f 00 	sts	0x006F, r25
 23c:	80 93 6e 00 	sts	0x006E, r24
	}
	TCNT0  = TIMER_0_CNT;
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	82 bf       	out	0x32, r24	; 50
	
	if(flag==0)
 244:	80 91 65 00 	lds	r24, 0x0065
 248:	90 91 66 00 	lds	r25, 0x0066
 24c:	89 2b       	or	r24, r25
 24e:	21 f5       	brne	.+72     	; 0x298 <__vector_9+0xa4>
	{	//PORTB=0x00;
		if((!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 250:	99 9b       	sbis	0x13, 1	; 19
 252:	05 c0       	rjmp	.+10     	; 0x25e <__vector_9+0x6a>
 254:	9a 9b       	sbis	0x13, 2	; 19
 256:	03 c0       	rjmp	.+6      	; 0x25e <__vector_9+0x6a>
			detectline=1;	//forward
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	14 c0       	rjmp	.+40     	; 0x286 <__vector_9+0x92>
		else if((bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 25e:	99 99       	sbic	0x13, 1	; 19
 260:	05 c0       	rjmp	.+10     	; 0x26c <__vector_9+0x78>
 262:	9a 9b       	sbis	0x13, 2	; 19
 264:	03 c0       	rjmp	.+6      	; 0x26c <__vector_9+0x78>
			detectline=2;	//right
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0d c0       	rjmp	.+26     	; 0x286 <__vector_9+0x92>
		else if((!bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 26c:	99 9b       	sbis	0x13, 1	; 19
 26e:	05 c0       	rjmp	.+10     	; 0x27a <__vector_9+0x86>
 270:	9a 99       	sbic	0x13, 2	; 19
 272:	03 c0       	rjmp	.+6      	; 0x27a <__vector_9+0x86>
			detectline=3;	//left
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	06 c0       	rjmp	.+12     	; 0x286 <__vector_9+0x92>
		else if((bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 27a:	99 99       	sbic	0x13, 1	; 19
 27c:	08 c0       	rjmp	.+16     	; 0x28e <__vector_9+0x9a>
 27e:	9a 99       	sbic	0x13, 2	; 19
 280:	06 c0       	rjmp	.+12     	; 0x28e <__vector_9+0x9a>
			detectline=4;	//stop;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 71 00 	sts	0x0071, r25
 28a:	80 93 70 00 	sts	0x0070, r24
				
		direction_motor(detectline);		
 28e:	80 91 70 00 	lds	r24, 0x0070
 292:	90 91 71 00 	lds	r25, 0x0071
 296:	fd de       	rcall	.-518    	; 0x92 <direction_motor>
		
	}
	if(flag==1 && backflag==0 && pathfound==1)
 298:	80 91 65 00 	lds	r24, 0x0065
 29c:	90 91 66 00 	lds	r25, 0x0066
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	41 f5       	brne	.+80     	; 0x2f4 <__vector_9+0x100>
 2a4:	80 91 6c 00 	lds	r24, 0x006C
 2a8:	90 91 6d 00 	lds	r25, 0x006D
 2ac:	89 2b       	or	r24, r25
 2ae:	11 f5       	brne	.+68     	; 0x2f4 <__vector_9+0x100>
 2b0:	80 91 64 00 	lds	r24, 0x0064
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	f1 f4       	brne	.+60     	; 0x2f4 <__vector_9+0x100>
	{
		stopcount=0;
 2b8:	10 92 6b 00 	sts	0x006B, r1
 2bc:	10 92 6a 00 	sts	0x006A, r1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
		while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
		{
			//sbi(PORTB,2);
			PORTB=0x42;		//Reverse
 2c4:	22 e4       	ldi	r18, 0x42	; 66
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <__vector_9+0xda>
 2c8:	28 bb       	out	0x18, r18	; 24
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
		
	}
	if(flag==1 && backflag==0 && pathfound==1)
	{
		stopcount=0;
		while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
 2ce:	99 99       	sbic	0x13, 1	; 19
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_9+0xe2>
 2d2:	9a 9b       	sbis	0x13, 2	; 19
 2d4:	f9 cf       	rjmp	.-14     	; 0x2c8 <__vector_9+0xd4>
 2d6:	90 93 66 00 	sts	0x0066, r25
 2da:	80 93 65 00 	sts	0x0065, r24
		{
			//sbi(PORTB,2);
			PORTB=0x42;		//Reverse
			flag=0;
		}
		PORTB=0x00;
 2de:	18 ba       	out	0x18, r1	; 24
		//cbi(PORTB,2);
		if(!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2))
 2e0:	99 9b       	sbis	0x13, 1	; 19
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <__vector_9+0x100>
 2e4:	9a 9b       	sbis	0x13, 2	; 19
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <__vector_9+0x100>
		{
			backflag=1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 6d 00 	sts	0x006D, r25
 2f0:	80 93 6c 00 	sts	0x006C, r24
		}
	}
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <main>:



//************** MAIN PROGRAM ********************
int main(void)
{
 316:	bf 92       	push	r11
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
	
	DDRB=0xC7;						//SET DATA DIRECTION REGISTER
 328:	87 ec       	ldi	r24, 0xC7	; 199
 32a:	87 bb       	out	0x17, r24	; 23
	DDRD=0xF1;						//SET DATA DIRECTION REGISTER
 32c:	81 ef       	ldi	r24, 0xF1	; 241
 32e:	81 bb       	out	0x11, r24	; 17
	
	DDRC=0x20;
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = TMC8_CK64;       		// use CLK/64 prescale value
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        			// reset TCNT0
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	82 bf       	out	0x32, r24	; 50
    TIMSK  = _BV(TOIE0);         	// enable TCNT0 overflow
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	89 bf       	out	0x39, r24	; 57
	
    char i=0;
     
	                       	// disable interrupts
	navflag = 'S';
 340:	83 e5       	ldi	r24, 0x53	; 83
 342:	80 93 72 00 	sts	0x0072, r24
	cbi(PORTC,5);
 346:	ad 98       	cbi	0x15, 5	; 21
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	28 ea       	ldi	r18, 0xA8	; 168
 34c:	c2 2e       	mov	r12, r18
 34e:	21 e6       	ldi	r18, 0x61	; 97
 350:	d2 2e       	mov	r13, r18
 352:	c4 ef       	ldi	r28, 0xF4	; 244
 354:	d1 e0       	ldi	r29, 0x01	; 1
					direction_motor(4);
					_delay_ms(80000);
				}
				else
				{
					TCNT0=TIMER_0_CNT;
 356:	90 ec       	ldi	r25, 0xC0	; 192
 358:	b9 2e       	mov	r11, r25
					TIMSK=_BV(TOIE0);
 35a:	01 e0       	ldi	r16, 0x01	; 1
 35c:	89 e1       	ldi	r24, 0x19	; 25
 35e:	e8 2e       	mov	r14, r24
 360:	f1 2c       	mov	r15, r1
 362:	43 c0       	rjmp	.+134    	; 0x3ea <main+0xd4>
 364:	ce 01       	movw	r24, r28
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x50>
	while(1)						//INFINITE LOOP
	{
		for(i=0;i<5;i++)
		{
				_delay_ms(2);
				sbi(PORTC,5);
 36a:	ad 9a       	sbi	0x15, 5	; 21
 36c:	ce 01       	movw	r24, r28
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x58>
				_delay_ms(2);
				if(bit_is_clear(PIND,2))
 372:	82 99       	sbic	0x10, 2	; 16
 374:	0b c0       	rjmp	.+22     	; 0x38c <main+0x76>
				{
					sbi(PORTB,2);
 376:	c2 9a       	sbi	0x18, 2	; 24
					odetect++;
 378:	80 91 67 00 	lds	r24, 0x0067
 37c:	90 91 68 00 	lds	r25, 0x0068
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 68 00 	sts	0x0068, r25
 386:	80 93 67 00 	sts	0x0067, r24
 38a:	01 c0       	rjmp	.+2      	; 0x38e <main+0x78>
				}
				else
				{
					cbi(PORTB,2);
 38c:	c2 98       	cbi	0x18, 2	; 24
 38e:	ce 01       	movw	r24, r28
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x7a>
				}
				
				_delay_ms(2);
				cbi(PORTC,5);
 394:	ad 98       	cbi	0x15, 5	; 21
 396:	ce 01       	movw	r24, r28
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <main+0x82>
				_delay_ms(2);
				
				if(bit_is_clear(PIND,2))
 39c:	82 99       	sbic	0x10, 2	; 16
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <main+0xa0>
				{
					sbi(PORTB,2);
 3a0:	c2 9a       	sbi	0x18, 2	; 24
					odetect++;
 3a2:	80 91 67 00 	lds	r24, 0x0067
 3a6:	90 91 68 00 	lds	r25, 0x0068
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	90 93 68 00 	sts	0x0068, r25
 3b0:	80 93 67 00 	sts	0x0067, r24
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <main+0xa2>
				}
				else
				{
					cbi(PORTB,2);
 3b6:	c2 98       	cbi	0x18, 2	; 24
				}
				
				if(odetect>4)
 3b8:	80 91 67 00 	lds	r24, 0x0067
 3bc:	90 91 68 00 	lds	r25, 0x0068
 3c0:	05 97       	sbiw	r24, 0x05	; 5
 3c2:	84 f0       	brlt	.+32     	; 0x3e4 <main+0xce>
				{
					TIMSK=0x00;
 3c4:	19 be       	out	0x39, r1	; 57
					odetect=0;
 3c6:	10 92 68 00 	sts	0x0068, r1
 3ca:	10 92 67 00 	sts	0x0067, r1
					direction_motor(4);
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	5f de       	rcall	.-834    	; 0x92 <direction_motor>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	f7 01       	movw	r30, r14
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e0:	d9 f7       	brne	.-10     	; 0x3d8 <main+0xc2>
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <main+0xd2>
					_delay_ms(80000);
				}
				else
				{
					TCNT0=TIMER_0_CNT;
 3e4:	b2 be       	out	0x32, r11	; 50
					TIMSK=_BV(TOIE0);
 3e6:	09 bf       	out	0x39, r16	; 57
	navflag = 'S';
	cbi(PORTC,5);
	
	while(1)						//INFINITE LOOP
	{
		for(i=0;i<5;i++)
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
 3ea:	15 30       	cpi	r17, 0x05	; 5
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <main+0xda>
 3ee:	ba cf       	rjmp	.-140    	; 0x364 <main+0x4e>
 3f0:	c6 01       	movw	r24, r12
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <main+0xdc>
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	b5 cf       	rjmp	.-150    	; 0x364 <main+0x4e>

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
