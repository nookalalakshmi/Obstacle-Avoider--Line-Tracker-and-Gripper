   1               		.file	"sensor.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  71               	.global	__vector_9
  73               	__vector_9:
   1:sensor.c      **** //			Two Motors and a Proximity IR sensor
   2:sensor.c      **** 
   3:sensor.c      **** /*-------------------------------------------------------------------          
   4:sensor.c      ****  Operation-
   5:sensor.c      **** 	This program senses the obstacles and that the obstacle is sensed is signalled by the LED.
   6:sensor.c      ****  Description:
   7:sensor.c      ****  CPU => ATMEGA8-L @8MHz Internal
   8:sensor.c      **** 
   9:sensor.c      ****   Proximity IR Sensor Input
  10:sensor.c      ****   Sensor-1(#4):
  11:sensor.c      ****   PD2(INT0)	State
  12:sensor.c      ****   0			Obstruction
  13:sensor.c      ****   1			Clear Path
  14:sensor.c      ****   Sensor-2(#23):
  15:sensor.c      ****   PC0		State
  16:sensor.c      ****   0			Obstruction
  17:sensor.c      ****   1			Clear Path
  18:sensor.c      **** ---------------------------------------------------------------------*/
  19:sensor.c      **** 
  20:sensor.c      **** //************** HEADER FILES ********************
  21:sensor.c      **** #include<avr/io.h>					//HEADER FILE FOR AVR INPUT OUTPUT
  22:sensor.c      **** #include<compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  23:sensor.c      **** #include<util/delay.h>				//HEADER FILE FOR DELAY
  24:sensor.c      **** #include <avr/interrupt.h>
  25:sensor.c      **** 
  26:sensor.c      **** //************** GLOBAL VARIABLES ********************
  27:sensor.c      **** #define TIMER_0_CNT     0x82  // 1ms sec, use AVRcalc to calculate these values
  28:sensor.c      ****                                 // ((TCNT0=0x63))
  29:sensor.c      **** 								// DECIMAL VALUE = 130
  30:sensor.c      **** 								// MAX VALUE = 255
  31:sensor.c      **** 								// TIMER OVERFLOW ON 255-130 = 125 COUNTS
  32:sensor.c      **** #define TMC8_CK8	(_BV(CS01)+_BV(CS00))	// 8 BIT TIMER0 AT 64 PRESCALAR
  33:sensor.c      **** 											// GIVES 64*125 = 8000 CYCLES		//8mhz 1 msec delay
  34:sensor.c      **** 											// AT 1MHZ FREQUENCY DELAY OF 90.112 mSECONDS
  35:sensor.c      **** 
  36:sensor.c      **** char psensor=0;
  37:sensor.c      **** char onpsensor=0;
  38:sensor.c      **** char flag=0;
  39:sensor.c      **** //************** FUNCTIONS ********************
  40:sensor.c      **** SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
  41:sensor.c      **** {
  74               	 r0,__SREG__
  75               		push r0
  76               		clr __zero_reg__
  77 0000 1F92      		push r24
  78 0002 0F92      		push r25
  79 0004 0FB6      	/* prologue: Signal */
  80 0006 0F92      	/* frame size = 0 */
  82 000a 8F93      	.LM1:
  83 000c 9F93      		lds r25,psensor
  84               		subi r25,lo8(-(1))
  85               		sts psensor,r25
  42:sensor.c      **** 	psensor++;
  86               	h __zero_reg__
  87               		push r0
  88 000e 9091 0000 		in r0,__SREG__
  89 0012 9F5F      		push r0
  90 0014 9093 0000 		clr __zero_reg__
  43:sensor.c      **** 	onpsensor++;
  91               	2,0,0,0
  93 0018 8091 0000 	.global	__vector_9
  95 001e 8093 0000 	__vector_9:
  44:sensor.c      **** 	while(onpsensor<=20)
  96               	se.h",130,0,0,0
  45:sensor.c      **** 	{
  46:sensor.c      **** 		if(psensor==2)
 101               	,0
  47:sensor.c      **** 		{
  48:sensor.c      **** 			if(bit_is_clear(PINC,5))
 105               	abn	162,0,0,0
 107 002a 9D99      	.global	__vector_9
  49:sensor.c      **** 			{
  50:sensor.c      **** 				sbi(PORTC,5);
 109               	nclude/avr/fuse.h",130,0,0,0
  51:sensor.c      **** 				
  52:sensor.c      **** 			}
  53:sensor.c      **** 			else
  54:sensor.c      **** 			{
  55:sensor.c      **** 				cbi(PORTC,5);
 114               	,0
 120               	.global	__vector_9
  56:sensor.c      **** 				
  57:sensor.c      **** 			}
  58:sensor.c      **** 			psensor=0;
  59:sensor.c      **** 		}
  60:sensor.c      **** 		
  61:sensor.c      **** 		
  62:sensor.c      **** 	}
  63:sensor.c      **** 	if(onpsensor==20)
  64:sensor.c      **** 	{
  65:sensor.c      **** 		onpsensor=0;
  66:sensor.c      **** 		_delay_ms(100);
  67:sensor.c      **** 	}
  68:sensor.c      **** 	TCNT0  = TIMER_0_CNT;
 121               	__vector_9, @function
 122               	__vector_9:
 124 003a 82BF      	.LM0:
 125               	.LFBB1:
  69:sensor.c      **** 	
  70:sensor.c      **** }
 126               	)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
 130 0040 0F90      	.global	__vector_9
 132 0044 0F90      	__vector_9:
 134 0048 1895      	.LM0:
 135               	.LFBB1:
 136               		push __zero_reg__
 137               		push r0
 138               		in r0,__SREG__
 139               		push r0
 140               		clr __zero_reg__
  71:sensor.c      **** 
  72:sensor.c      **** //************** INTERRUPT0 ********************
  73:sensor.c      **** SIGNAL(SIG_INTERRUPT0)     
  74:sensor.c      **** {//signal handler for external interrupt int0          
 141               	2,0,0,0
 143               	.global	__vector_9
 145 004c 0F92      	__vector_9:
 147 0050 0F92      	.LM0:
 148 0052 1124      	.LFBB1:
 149               		push __zero_reg__
 150               		push r0
  75:sensor.c      **** 			sbi(PORTB,2);			//LED ON
 151               	,8,8;;",128,0,0,0
  76:sensor.c      **** }
 155               	,0
 161 005e 1895      	.global	__vector_9
 163               	__vector_9:
 165               	.LM0:
 166               	.LFBB1:
 167               		push __zero_reg__
  77:sensor.c      **** 
  78:sensor.c      **** 
  79:sensor.c      **** //************** MAIN PROGRAM ********************
  80:sensor.c      **** int main(void)
  81:sensor.c      **** {
 168               	r0,__SREG__
 169               		push r0
 170               		clr __zero_reg__
 171               		push r24
 172               		push r25
  82:sensor.c      **** //SET DATA DIRECTION REGISTER	
  83:sensor.c      **** //SET 1 for OUTPUT PORT
  84:sensor.c      **** //SET 0 FOR INPUT PORT
  85:sensor.c      **** 	DDRB=0xC7;						//PB
 173               	tor_9:F(0,15)",36,0,0,__vector_9
 174               	.global	__vector_9
 176 0062 87BB      	__vector_9:
  86:sensor.c      **** 	DDRC=0x00;						//PC
 177               	se.h",130,0,0,0
  87:sensor.c      **** 	DDRD=0xF1;						//PD
 180               	_farptr_t:t(3,2)=(4,6)",128,0,0,0
  88:sensor.c      **** 	
  89:sensor.c      **** 	TCCR0 = TMC8_CK8;       		// use CLK/1024 prescale value
 184               	abs	"__fuse_t:t(5,1)=(5,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
  90:sensor.c      ****     TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 188               	,0
  91:sensor.c      ****     
  92:sensor.c      ****     TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 192               	abn	162,0,0,0
 194 0072 81E0      	.global	__vector_9
  93:sensor.c      ****     
  94:sensor.c      ****     sei();                       	// enable interrupts 
 196               	nclude/avr/fuse.h",130,0,0,0
 201               	.global	__vector_9
  95:sensor.c      ****  
  96:sensor.c      **** 
  97:sensor.c      **** 	while(1)						//INFINITE LOOP
  98:sensor.c      **** 	{
  99:sensor.c      **** 		if(onpsensor==0 || onpsensor==1 || onpsensor==2)
 202               	r-20080610/lib/gcc/../../avr/include/avr/fuse.h",130,0,0,0
 207               	.global	__vector_9
 209               	__vector_9:
 211               	.LM0:
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 212               	5,1)=(5,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
 216               	.global	__vector_9
 218               	__vector_9:
 220               	.LM0:
 221               	.LFBB1:
 222               		push __zero_reg__
 223               		push r0
 224               		in r0,__SREG__
 225 0080 2330      		push r0
 226 0082 00F0      		clr __zero_reg__
 100:sensor.c      **** 		{
 101:sensor.c      **** 		}
 102:sensor.c      **** 		else if(onpsensor==3)
 227               	2,0,0,0
 229 0084 2330      	.global	__vector_9
 231               	__vector_9:
 103:sensor.c      **** 		{
 104:sensor.c      **** 			if(bit_is_clear(PIND,2))
 232               	se.h",130,0,0,0
 105:sensor.c      **** 			{
 106:sensor.c      **** 				sbi(PORTB,2);
 236               	,6)",128,0,0,0
 107:sensor.c      **** 			}
 108:sensor.c      **** 			else
 109:sensor.c      **** 			{
 110:sensor.c      **** 				cbi(PORTB,2);
 241               	bn	162,0,0,0
 244 0092 00C0      	.global	__vector_9
 246               	__vector_9:
 248               	.LM0:
 249               	.LFBB1:
 250               		push __zero_reg__
 251               		push r0
 252               		in r0,__SREG__
 253               		push r0
 254 0094 CA01      		clr __zero_reg__
 255               		push r24
 256               		push r25
 257 0096 0197      	/* prologue: Signal */
 258 0098 01F4      	/* frame size = 0 */
 260               	.LM1:
 261               		lds r25,psensor
 262               		subi r25,lo8(-(1))
 263               		sts psensor,r25
 265               	.LM2:
 266               		lds r24,onpsensor
 111:sensor.c      **** 			}
 112:sensor.c      **** 		}
 113:sensor.c      **** 		else
 114:sensor.c      **** 		{
 115:sensor.c      **** 			_delay_ms(2);
 116:sensor.c      **** 			if(bit_is_clear(PIND,2))
 267               	zero_reg__
 268               		push r24
 269 009a 8299      		push r25
 270 009c 00C0      	/* prologue: Signal */
 117:sensor.c      **** 			{
 118:sensor.c      **** 				sbi(PORTB,2);
 271               	vector_9
 272               	.global	__vector_9
 274 00a0 00C0      	__vector_9:
 119:sensor.c      **** 			}
 120:sensor.c      **** 			else
 121:sensor.c      **** 			{
 122:sensor.c      **** 				cbi(PORTB,2);
 276               	se_t:t(5,1)=(5,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,0,0
 280               	.global	__vector_9
 282 00a6 00C0      	__vector_9:
 284               	.LM0:
 285               	.LFBB1:
 286               		push __zero_reg__
 287               		push r0
 288               		in r0,__SREG__
 289               		push r0
 290               		clr __zero_reg__
 291 0000 00        		push r24
 292               		push r25
 293               	/* prologue: Signal */
 294               	/* frame size = 0 */
 296               	.LM1:
 297 0001 00        		lds r25,psensor
 298               		subi r25,lo8(-(1))
 299               		sts psensor,r25
 301               	.LM2:
 302               		lds r24,onpsensor
 303 0002 00        		subi r24,lo8(-(1))
 304               		sts onpsensor,r24
 306               	.LM3:
 307               		cpi r24,lo8(21)
 308               		brsh .L2
 309               	.L8:
DEFINED SYMBOLS
                            *ABS*:00000000 sensor.c
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:2      *ABS*:0000003f __SREG__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:3      *ABS*:0000003e __SP_H__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:4      *ABS*:0000003d __SP_L__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:5      *ABS*:00000034 __CCP__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:7      *ABS*:00000001 __zero_reg__
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:73     .text:00000000 __vector_9
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:290    .bss:00000000 psensor
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:296    .bss:00000001 onpsensor
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:140    .text:0000004a __vector_1
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:167    .text:00000060 main
C:\Users\user\AppData\Local\Temp/cc15GFuv.s:302    .bss:00000002 flag

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
