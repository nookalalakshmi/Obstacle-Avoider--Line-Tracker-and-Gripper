
motorIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000047  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001bb  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000125  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f7  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000129  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c7  00000000  00000000  000008c9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_1>
   8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  8a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motormove>:

/*----------------------------------------------------------------
-----------------FUNCTION-----------------------------------------
-----------------------------------------------------------------*/
void motormove(char motor,char state)
{
  92:	81 33       	cpi	r24, 0x31	; 49
  94:	29 f4       	brne	.+10     	; 0xa0 <motormove+0xe>
  96:	e7 e0       	ldi	r30, 0x07	; 7
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	a6 e0       	ldi	r26, 0x06	; 6
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <motormove+0x24>
	if(motor=='1')
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  a0:	82 33       	cpi	r24, 0x32	; 50
  a2:	29 f4       	brne	.+10     	; 0xae <motormove+0x1c>
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	a1 e0       	ldi	r26, 0x01	; 1
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <motormove+0x24>
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
		 if(state=='F'){
  b6:	66 34       	cpi	r22, 0x46	; 70
  b8:	a1 f4       	brne	.+40     	; 0xe2 <motormove+0x50>
			sbi(PORTB,n1);
  ba:	48 b3       	in	r20, 0x18	; 24
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9c 01       	movw	r18, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <motormove+0x36>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	ea 95       	dec	r30
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <motormove+0x32>
  cc:	42 2b       	or	r20, r18
  ce:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  d0:	28 b3       	in	r18, 0x18	; 24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <motormove+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 95       	dec	r26
  da:	e2 f7       	brpl	.-8      	; 0xd4 <motormove+0x42>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	23 c0       	rjmp	.+70     	; 0x128 <motormove+0x96>
			}
		 if(state=='B'){
  e2:	62 34       	cpi	r22, 0x42	; 66
  e4:	69 f4       	brne	.+26     	; 0x100 <motormove+0x6e>
			cbi(PORTB,n1);
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	c9 01       	movw	r24, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <motormove+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	ea 95       	dec	r30
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <motormove+0x5e>
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	0d c0       	rjmp	.+26     	; 0x11a <motormove+0x88>
			sbi(PORTB,n2);
			}
		 if(state=='S'){
 100:	63 35       	cpi	r22, 0x53	; 83
 102:	a1 f4       	brne	.+40     	; 0x12c <motormove+0x9a>
			sbi(PORTB,n1);
 104:	48 b3       	in	r20, 0x18	; 24
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	c9 01       	movw	r24, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <motormove+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	ea 95       	dec	r30
 114:	e2 f7       	brpl	.-8      	; 0x10e <motormove+0x7c>
 116:	48 2b       	or	r20, r24
 118:	48 bb       	out	0x18, r20	; 24
			sbi(PORTB,n2);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <motormove+0x90>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	aa 95       	dec	r26
 124:	e2 f7       	brpl	.-8      	; 0x11e <motormove+0x8c>
 126:	82 2b       	or	r24, r18
 128:	88 bb       	out	0x18, r24	; 24
 12a:	08 95       	ret
			}
		 if(state=='s'){
 12c:	63 37       	cpi	r22, 0x73	; 115
 12e:	a9 f4       	brne	.+42     	; 0x15a <motormove+0xc8>
			cbi(PORTB,n1);
 130:	48 b3       	in	r20, 0x18	; 24
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	c9 01       	movw	r24, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <motormove+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	ea 95       	dec	r30
 140:	e2 f7       	brpl	.-8      	; 0x13a <motormove+0xa8>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <motormove+0xbe>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	aa 95       	dec	r26
 152:	e2 f7       	brpl	.-8      	; 0x14c <motormove+0xba>
 154:	20 95       	com	r18
 156:	28 23       	and	r18, r24
 158:	28 bb       	out	0x18, r18	; 24
 15a:	08 95       	ret

0000015c <__vector_1>:
}


SIGNAL(SIG_INTERRUPT0)     
/* signal handler for external interrupt int0 */
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
			sbi(PORTB,2);			//LED ON
 166:	c2 9a       	sbi	0x18, 2	; 24
}
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_2>:
SIGNAL(SIG_INTERRUPT1)     
/* signal handler for external interrupt int0 */
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
			sbi(PORTB,2);			//LED ON
 17c:	c2 9a       	sbi	0x18, 2	; 24
}
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
 188:	87 ec       	ldi	r24, 0xC7	; 199
 18a:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 18c:	81 ef       	ldi	r24, 0xF1	; 241
 18e:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
		sbi(PORTB,2);			//LED ON
 190:	c2 9a       	sbi	0x18, 2	; 24
 192:	88 e8       	ldi	r24, 0x88	; 136
 194:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	29 e1       	ldi	r18, 0x19	; 25
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	d9 f7       	brne	.-10     	; 0x19a <main+0x12>
		_delay_ms(500);
		cbi(PORTB,2);			//LED OFF
 1a4:	c2 98       	cbi	0x18, 2	; 24

	
	
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 1a6:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 1a8:	93 9a       	sbi	0x12, 3	; 18
	
    
    GICR = (_BV(INT0));           	// enable external int0
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	8b bf       	out	0x3b, r24	; 59
    MCUCR = (_BV(ISC01));          	// falling egde: int0
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	85 bf       	out	0x35, r24	; 53
	
    
    sei();                       	// enable interrupts 
 1b2:	78 94       	sei
    
    for (;;) 					 	//BLINK LED2
	{	
		cbi(PORTB,2);			//LED OFF
 1b4:	c2 98       	cbi	0x18, 2	; 24
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <main+0x2c>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
