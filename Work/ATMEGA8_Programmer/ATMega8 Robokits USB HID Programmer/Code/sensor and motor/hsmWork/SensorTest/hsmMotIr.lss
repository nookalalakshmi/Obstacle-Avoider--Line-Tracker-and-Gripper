
hsmMotIr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000002b0  2**0
                  ALLOC
  2 .stab         00000624  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007a0  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	d6 c0       	rjmp	.+428    	; 0x1b0 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 36       	cpi	r26, 0x61	; 97
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	cf d0       	rcall	.+414    	; 0x1f8 <main>
  5a:	ee c0       	rjmp	.+476    	; 0x238 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motormove>:

//************** FUNCTIONS ********************
void motormove(char motor, char state)
{
	int n1=0,n2=0;
	if(motor=='1')
  5e:	81 33       	cpi	r24, 0x31	; 49
  60:	29 f4       	brne	.+10     	; 0x6c <motormove+0xe>
  62:	a7 e0       	ldi	r26, 0x07	; 7
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	0b c0       	rjmp	.+22     	; 0x82 <motormove+0x24>
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  6c:	82 33       	cpi	r24, 0x32	; 50
  6e:	29 f4       	brne	.+10     	; 0x7a <motormove+0x1c>
  70:	a0 e0       	ldi	r26, 0x00	; 0
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e1 e0       	ldi	r30, 0x01	; 1
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	04 c0       	rjmp	.+8      	; 0x82 <motormove+0x24>
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	switch (state)
  82:	66 34       	cpi	r22, 0x46	; 70
  84:	61 f0       	breq	.+24     	; 0x9e <motormove+0x40>
  86:	67 34       	cpi	r22, 0x47	; 71
  88:	20 f4       	brcc	.+8      	; 0x92 <motormove+0x34>
  8a:	62 34       	cpi	r22, 0x42	; 66
  8c:	09 f0       	breq	.+2      	; 0x90 <motormove+0x32>
  8e:	59 c0       	rjmp	.+178    	; 0x142 <motormove+0xe4>
  90:	18 c0       	rjmp	.+48     	; 0xc2 <motormove+0x64>
  92:	63 35       	cpi	r22, 0x53	; 83
  94:	59 f1       	breq	.+86     	; 0xec <motormove+0x8e>
  96:	63 37       	cpi	r22, 0x73	; 115
  98:	09 f0       	breq	.+2      	; 0x9c <motormove+0x3e>
  9a:	53 c0       	rjmp	.+166    	; 0x142 <motormove+0xe4>
  9c:	3d c0       	rjmp	.+122    	; 0x118 <motormove+0xba>
	{
	 case 'F':
			sbi(PORTB,n1);
  9e:	48 b3       	in	r20, 0x18	; 24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9c 01       	movw	r18, r24
  a6:	02 c0       	rjmp	.+4      	; 0xac <motormove+0x4e>
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	aa 95       	dec	r26
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <motormove+0x4a>
  b0:	42 2b       	or	r20, r18
  b2:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <motormove+0x5e>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	ea 95       	dec	r30
  be:	e2 f7       	brpl	.-8      	; 0xb8 <motormove+0x5a>
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <motormove+0x86>
			break;

	case 'B':
			sbi(PORTB,n2);
  c2:	48 b3       	in	r20, 0x18	; 24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	9c 01       	movw	r18, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <motormove+0x72>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	ea 95       	dec	r30
  d2:	e2 f7       	brpl	.-8      	; 0xcc <motormove+0x6e>
  d4:	42 2b       	or	r20, r18
  d6:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
  d8:	28 b3       	in	r18, 0x18	; 24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <motormove+0x82>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	aa 95       	dec	r26
  e2:	e2 f7       	brpl	.-8      	; 0xdc <motormove+0x7e>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	c9 01       	movw	r24, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <motormove+0x9c>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	ea 95       	dec	r30
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <motormove+0x98>
  fe:	80 95       	com	r24
 100:	84 23       	and	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
 104:	88 b3       	in	r24, 0x18	; 24
 106:	02 c0       	rjmp	.+4      	; 0x10c <motormove+0xae>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	aa 95       	dec	r26
 10e:	e2 f7       	brpl	.-8      	; 0x108 <motormove+0xaa>
 110:	20 95       	com	r18
 112:	28 23       	and	r18, r24
 114:	28 bb       	out	0x18, r18	; 24
 116:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 118:	48 b3       	in	r20, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <motormove+0xc8>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 95       	dec	r26
 128:	e2 f7       	brpl	.-8      	; 0x122 <motormove+0xc4>
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	02 c0       	rjmp	.+4      	; 0x138 <motormove+0xda>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	ea 95       	dec	r30
 13a:	e2 f7       	brpl	.-8      	; 0x134 <motormove+0xd6>
 13c:	20 95       	com	r18
 13e:	28 23       	and	r18, r24
 140:	28 bb       	out	0x18, r18	; 24
 142:	08 95       	ret

00000144 <robotmove>:
}
//***************************************
void robotmove(char mode)
{

	switch(mode)
 144:	8c 34       	cpi	r24, 0x4C	; 76
 146:	b9 f0       	breq	.+46     	; 0x176 <robotmove+0x32>
 148:	8d 34       	cpi	r24, 0x4D	; 77
 14a:	28 f4       	brcc	.+10     	; 0x156 <robotmove+0x12>
 14c:	82 34       	cpi	r24, 0x42	; 66
 14e:	81 f0       	breq	.+32     	; 0x170 <robotmove+0x2c>
 150:	86 34       	cpi	r24, 0x46	; 70
 152:	39 f5       	brne	.+78     	; 0x1a2 <robotmove+0x5e>
 154:	07 c0       	rjmp	.+14     	; 0x164 <robotmove+0x20>
 156:	83 35       	cpi	r24, 0x53	; 83
 158:	f1 f0       	breq	.+60     	; 0x196 <robotmove+0x52>
 15a:	83 37       	cpi	r24, 0x73	; 115
 15c:	a9 f0       	breq	.+42     	; 0x188 <robotmove+0x44>
 15e:	82 35       	cpi	r24, 0x52	; 82
 160:	01 f5       	brne	.+64     	; 0x1a2 <robotmove+0x5e>
 162:	0c c0       	rjmp	.+24     	; 0x17c <robotmove+0x38>
	{
		case 'F':
		 motormove('1','F');
 164:	81 e3       	ldi	r24, 0x31	; 49
 166:	66 e4       	ldi	r22, 0x46	; 70
 168:	7a df       	rcall	.-268    	; 0x5e <motormove>
		 motormove('2','F');
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	66 e4       	ldi	r22, 0x46	; 70
 16e:	11 c0       	rjmp	.+34     	; 0x192 <robotmove+0x4e>
		break;
		
		case 'B':
		 motormove('1','B');
 170:	81 e3       	ldi	r24, 0x31	; 49
 172:	62 e4       	ldi	r22, 0x42	; 66
 174:	05 c0       	rjmp	.+10     	; 0x180 <robotmove+0x3c>
		 motormove('2','B');
		break;
		
		case 'L':
		 motormove('1','B');
 176:	81 e3       	ldi	r24, 0x31	; 49
 178:	62 e4       	ldi	r22, 0x42	; 66
 17a:	08 c0       	rjmp	.+16     	; 0x18c <robotmove+0x48>
		 motormove('2','s');
		break;
		
		case 'R':
		 motormove('1','s');
 17c:	81 e3       	ldi	r24, 0x31	; 49
 17e:	63 e7       	ldi	r22, 0x73	; 115
 180:	6e df       	rcall	.-292    	; 0x5e <motormove>
		 motormove('2','B');
 182:	82 e3       	ldi	r24, 0x32	; 50
 184:	62 e4       	ldi	r22, 0x42	; 66
 186:	05 c0       	rjmp	.+10     	; 0x192 <robotmove+0x4e>
		break;
		
		case 's':
		 motormove('1','s');
 188:	81 e3       	ldi	r24, 0x31	; 49
 18a:	63 e7       	ldi	r22, 0x73	; 115
 18c:	68 df       	rcall	.-304    	; 0x5e <motormove>
		 motormove('2','s');
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	63 e7       	ldi	r22, 0x73	; 115
 192:	65 df       	rcall	.-310    	; 0x5e <motormove>
 194:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','S');
 196:	81 e3       	ldi	r24, 0x31	; 49
 198:	63 e5       	ldi	r22, 0x53	; 83
 19a:	61 df       	rcall	.-318    	; 0x5e <motormove>
		 motormove('2','S');
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	63 e5       	ldi	r22, 0x53	; 83
 1a0:	5e df       	rcall	.-324    	; 0x5e <motormove>
 1a2:	08 95       	ret

000001a4 <obstracle>:
}

//***************************************
void obstracle(void)
{
            robotmove('S');
 1a4:	83 e5       	ldi	r24, 0x53	; 83
 1a6:	ce df       	rcall	.-100    	; 0x144 <robotmove>
			navflag='O';
 1a8:	8f e4       	ldi	r24, 0x4F	; 79
 1aa:	80 93 60 00 	sts	0x0060, r24
}
 1ae:	08 95       	ret

000001b0 <__vector_1>:

//************** INTERRUPT0 ********************
SIGNAL(SIG_INTERRUPT0)     
{//signal handler for external interrupt int0           
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
            obstracle();
 1d2:	e8 df       	rcall	.-48     	; 0x1a4 <obstracle>
			sbi(PORTB,2);			//LED ON
 1d4:	c2 9a       	sbi	0x18, 2	; 24
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:
	//char tbl[8]={'s','F','S','B','s','L','S','R'};
	int m=0;
//SET DATA DIRECTION REGISTER	
//SET 1 for OUTPUT PORT
//SET 0 FOR INPUT PORT
	DDRB=0xC7;						//PB
 1f8:	87 ec       	ldi	r24, 0xC7	; 199
 1fa:	87 bb       	out	0x17, r24	; 23
	DDRC=0x00;						//PC
 1fc:	14 ba       	out	0x14, r1	; 20
	DDRD=0xF1;						//PD
 1fe:	81 ef       	ldi	r24, 0xF1	; 241
 200:	81 bb       	out	0x11, r24	; 17
	
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 202:	92 9a       	sbi	0x12, 2	; 18
	//sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
    GICR = _BV(INT0);           	// enable external int0
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC01);          	// falling egde: int0*/
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	85 bf       	out	0x35, r24	; 53
    sei();                       	// enable interrupts 
 20c:	78 94       	sei
									
 
	navflag = 'S';
 20e:	83 e5       	ldi	r24, 0x53	; 83
 210:	80 93 60 00 	sts	0x0060, r24
	sbi(PORTB,2);
 214:	c2 9a       	sbi	0x18, 2	; 24
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21a:	29 e1       	ldi	r18, 0x19	; 25
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d9 f7       	brne	.-10     	; 0x21e <main+0x26>
	_delay_ms(2000);				//DELAY IN MILLISECONDS 
	cbi(PORTB,2);
 228:	c2 98       	cbi	0x18, 2	; 24
	while(1)						//INFINITE LOOP
	{
		cli();                       	// desable interrupts 
 22a:	f8 94       	cli
			if (bit_is_clear(PINC,0) || bit_is_clear(PIND,2))	//IF Sensor1 senses obstacle
 22c:	98 9b       	sbis	0x13, 0	; 19
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x3c>
 230:	82 99       	sbic	0x10, 2	; 16
 232:	fa cf       	rjmp	.-12     	; 0x228 <main+0x30>
			{
				sbi(PORTB,2);
 234:	c2 9a       	sbi	0x18, 2	; 24
 236:	f9 cf       	rjmp	.-14     	; 0x22a <main+0x32>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
