
motortest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00000354  000003c8  2**0
                  ALLOC
  2 .stab         00000c3c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007e5  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	f0 c0       	rjmp	.+480    	; 0x1f4 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e5       	ldi	r30, 0x54	; 84
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 36       	cpi	r26, 0x69	; 105
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ee d0       	rcall	.+476    	; 0x236 <main>
  5a:	7a c1       	rjmp	.+756    	; 0x350 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <speed>:
											// GIVES 64*63 =  4000 CYCLES	
											// AT 8MHZ FREQUENCY 1 cycle is of 0.125 micro sec.
//************** FUNCTIONS ********************
//***************************************
void speed(char direction,int value)
{
  5e:	48 2f       	mov	r20, r24
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	26 1b       	sub	r18, r22
  66:	37 0b       	sbc	r19, r23
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed+0x26>
		{
			PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	82 17       	cp	r24, r18
  70:	93 07       	cpc	r25, r19
  72:	dc f3       	brlt	.-10     	; 0x6a <speed+0xc>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <speed+0x20>
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  7a:	48 bb       	out	0x18, r20	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	86 17       	cp	r24, r22
  80:	97 07       	cpc	r25, r23
  82:	dc f3       	brlt	.-10     	; 0x7a <speed+0x1c>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	8e 3f       	cpi	r24, 0xFE	; 254
  88:	18 f4       	brcc	.+6      	; 0x90 <speed+0x32>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	ef cf       	rjmp	.-34     	; 0x6e <speed+0x10>
  90:	08 95       	ret

00000092 <direction_motor>:

void direction_motor(int detectline)
{
	//Set the direction and speed according to the line detected
	char direction;
	switch(detectline)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	09 f4       	brne	.+2      	; 0x9a <direction_motor+0x8>
  98:	5f c0       	rjmp	.+190    	; 0x158 <direction_motor+0xc6>
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	91 05       	cpc	r25, r1
  9e:	5c f4       	brge	.+22     	; 0xb6 <direction_motor+0x24>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	91 05       	cpc	r25, r1
  a4:	59 f1       	breq	.+86     	; 0xfc <direction_motor+0x6a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <direction_motor+0x1c>
  ac:	3e c0       	rjmp	.+124    	; 0x12a <direction_motor+0x98>
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <direction_motor+0x22>
  b2:	9f c0       	rjmp	.+318    	; 0x1f2 <direction_motor+0x160>
  b4:	0c c0       	rjmp	.+24     	; 0xce <direction_motor+0x3c>
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <direction_motor+0x2c>
  bc:	82 c0       	rjmp	.+260    	; 0x1c2 <direction_motor+0x130>
  be:	86 30       	cpi	r24, 0x06	; 6
  c0:	91 05       	cpc	r25, r1
  c2:	0c f4       	brge	.+2      	; 0xc6 <direction_motor+0x34>
  c4:	6a c0       	rjmp	.+212    	; 0x19a <direction_motor+0x108>
  c6:	07 97       	sbiw	r24, 0x07	; 7
  c8:	09 f0       	breq	.+2      	; 0xcc <direction_motor+0x3a>
  ca:	93 c0       	rjmp	.+294    	; 0x1f2 <direction_motor+0x160>
  cc:	8e c0       	rjmp	.+284    	; 0x1ea <direction_motor+0x158>
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  d4:	21 e8       	ldi	r18, 0x81	; 129
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <direction_motor+0x62>
	char direction;
	switch(detectline)
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
  dc:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	87 33       	cpi	r24, 0x37	; 55
  e2:	91 05       	cpc	r25, r1
  e4:	d9 f7       	brne	.-10     	; 0xdc <direction_motor+0x4a>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  ea:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	88 3c       	cpi	r24, 0xC8	; 200
  f0:	91 05       	cpc	r25, r1
  f2:	d9 f7       	brne	.-10     	; 0xea <direction_motor+0x58>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  f4:	82 b7       	in	r24, 0x32	; 50
  f6:	8e 3f       	cpi	r24, 0xFE	; 254
  f8:	78 f3       	brcs	.-34     	; 0xd8 <direction_motor+0x46>
  fa:	08 95       	ret
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 102:	21 e4       	ldi	r18, 0x41	; 65
 104:	0e c0       	rjmp	.+28     	; 0x122 <direction_motor+0x90>
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 10a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	83 32       	cpi	r24, 0x23	; 35
 110:	91 05       	cpc	r25, r1
 112:	d9 f7       	brne	.-10     	; 0x10a <direction_motor+0x78>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 118:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	8c 3d       	cpi	r24, 0xDC	; 220
 11e:	91 05       	cpc	r25, r1
 120:	d9 f7       	brne	.-10     	; 0x118 <direction_motor+0x86>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 122:	82 b7       	in	r24, 0x32	; 50
 124:	8e 3f       	cpi	r24, 0xFE	; 254
 126:	78 f3       	brcs	.-34     	; 0x106 <direction_motor+0x74>
 128:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 130:	22 e8       	ldi	r18, 0x82	; 130
 132:	0e c0       	rjmp	.+28     	; 0x150 <direction_motor+0xbe>
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 138:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	83 32       	cpi	r24, 0x23	; 35
 13e:	91 05       	cpc	r25, r1
 140:	d9 f7       	brne	.-10     	; 0x138 <direction_motor+0xa6>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 146:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	8c 3d       	cpi	r24, 0xDC	; 220
 14c:	91 05       	cpc	r25, r1
 14e:	d9 f7       	brne	.-10     	; 0x146 <direction_motor+0xb4>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 150:	82 b7       	in	r24, 0x32	; 50
 152:	8e 3f       	cpi	r24, 0xFE	; 254
 154:	78 f3       	brcs	.-34     	; 0x134 <direction_motor+0xa2>
 156:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 4:	//stop
				direction=0x00;
				flag=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 66 00 	sts	0x0066, r25
 160:	80 93 65 00 	sts	0x0065, r24
 164:	07 c0       	rjmp	.+14     	; 0x174 <direction_motor+0xe2>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 16a:	18 ba       	out	0x18, r1	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	8f 3f       	cpi	r24, 0xFF	; 255
 170:	91 05       	cpc	r25, r1
 172:	d9 f7       	brne	.-10     	; 0x16a <direction_motor+0xd8>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 174:	82 b7       	in	r24, 0x32	; 50
 176:	8e 3f       	cpi	r24, 0xFE	; 254
 178:	b0 f3       	brcs	.-20     	; 0x166 <direction_motor+0xd4>
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 180:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	83 32       	cpi	r24, 0x23	; 35
 186:	91 05       	cpc	r25, r1
 188:	d9 f7       	brne	.-10     	; 0x180 <direction_motor+0xee>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 18e:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	8c 3d       	cpi	r24, 0xDC	; 220
 194:	91 05       	cpc	r25, r1
 196:	d9 f7       	brne	.-10     	; 0x18e <direction_motor+0xfc>
 198:	01 c0       	rjmp	.+2      	; 0x19c <direction_motor+0x10a>
		{
			PORTB=direction;
 19a:	22 e0       	ldi	r18, 0x02	; 2
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 19c:	82 b7       	in	r24, 0x32	; 50
 19e:	8e 3f       	cpi	r24, 0xFE	; 254
 1a0:	68 f3       	brcs	.-38     	; 0x17c <direction_motor+0xea>
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1a8:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	83 32       	cpi	r24, 0x23	; 35
 1ae:	91 05       	cpc	r25, r1
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <direction_motor+0x116>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1b6:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	8c 3d       	cpi	r24, 0xDC	; 220
 1bc:	91 05       	cpc	r25, r1
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <direction_motor+0x124>
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <direction_motor+0x132>
		{
			PORTB=direction;
 1c2:	20 e4       	ldi	r18, 0x40	; 64
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1c4:	82 b7       	in	r24, 0x32	; 50
 1c6:	8e 3f       	cpi	r24, 0xFE	; 254
 1c8:	68 f3       	brcs	.-38     	; 0x1a4 <direction_motor+0x112>
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1d0:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	83 32       	cpi	r24, 0x23	; 35
 1d6:	91 05       	cpc	r25, r1
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <direction_motor+0x13e>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1de:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	8c 3d       	cpi	r24, 0xDC	; 220
 1e4:	91 05       	cpc	r25, r1
 1e6:	d9 f7       	brne	.-10     	; 0x1de <direction_motor+0x14c>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <direction_motor+0x15a>
		{
			PORTB=direction;
 1ea:	22 e4       	ldi	r18, 0x42	; 66
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1ec:	82 b7       	in	r24, 0x32	; 50
 1ee:	8e 3f       	cpi	r24, 0xFE	; 254
 1f0:	68 f3       	brcs	.-38     	; 0x1cc <direction_motor+0x13a>
 1f2:	08 95       	ret

000001f4 <__vector_9>:
}*/

//************** TIMER0 INTERRUPT ********************

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{//re-enter every 500 microSec here
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
	//TCNT0 = TIMER_0_CNT; //reload this counter
	
	sendsig++;
 200:	80 91 67 00 	lds	r24, 0x0067
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 67 00 	sts	0x0067, r24
	if(sendsig==4)
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	39 f4       	brne	.+14     	; 0x21c <__vector_9+0x28>
	{
		if(bit_is_clear(PINC,5))
 20e:	9d 99       	sbic	0x13, 5	; 19
 210:	02 c0       	rjmp	.+4      	; 0x216 <__vector_9+0x22>
		{
			sbi(PORTC,5);
 212:	ad 9a       	sbi	0x15, 5	; 21
 214:	01 c0       	rjmp	.+2      	; 0x218 <__vector_9+0x24>
	
		}
		else
		{
			cbi(PORTC,5);
 216:	ad 98       	cbi	0x15, 5	; 21
	
		}
		sendsig=0;
 218:	10 92 67 00 	sts	0x0067, r1
	}
	if(bit_is_clear(PIND,2))
 21c:	82 99       	sbic	0x10, 2	; 16
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_9+0x30>
	{
		sbi(PORTB,2);
 220:	c2 9a       	sbi	0x18, 2	; 24
 222:	01 c0       	rjmp	.+2      	; 0x226 <__vector_9+0x32>
	}
	else
	{
		cbi(PORTB,2);
 224:	c2 98       	cbi	0x18, 2	; 24
	}
	
	TCNT0 = TIMER_0_CNT;	
 226:	80 ec       	ldi	r24, 0xC0	; 192
 228:	82 bf       	out	0x32, r24	; 50
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:
	}
	TCNT0 = TIMER_0_CNT;	
}*/
//************** MAIN PROGRAM ********************
int main(void)
{
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	
	DDRB=0xC7;						//SET DATA DIRECTION REGISTER
 248:	87 ec       	ldi	r24, 0xC7	; 199
 24a:	87 bb       	out	0x17, r24	; 23
	DDRD=0xF1;						//SET DATA DIRECTION REGISTER
 24c:	81 ef       	ldi	r24, 0xF1	; 241
 24e:	81 bb       	out	0x11, r24	; 17
	
	DDRC=0x20;
 250:	80 e2       	ldi	r24, 0x20	; 32
 252:	84 bb       	out	0x14, r24	; 20
	
	
    char i=0;
     
	TCCR0 = TMC8_CK64;       		// use CLK/1024 prescale value
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	83 bf       	out	0x33, r24	; 51
    //TIMSK  = _BV(TOIE0);        	// enable TCNT0 overflow 
	//sei();                       	// enable interrupts
	navflag = 'S';
 258:	83 e5       	ldi	r24, 0x53	; 83
 25a:	80 93 68 00 	sts	0x0068, r24
	cbi(PORTC,5);
 25e:	ad 98       	cbi	0x15, 5	; 21
	TCNT0=TIMER_0_CNT;
 260:	80 ec       	ldi	r24, 0xC0	; 192
 262:	82 bf       	out	0x32, r24	; 50
 264:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 266:	24 ed       	ldi	r18, 0xD4	; 212
 268:	a2 2e       	mov	r10, r18
 26a:	20 e3       	ldi	r18, 0x30	; 48
 26c:	b2 2e       	mov	r11, r18
 26e:	c4 ef       	ldi	r28, 0xF4	; 244
 270:	d1 e0       	ldi	r29, 0x01	; 1
 272:	94 ec       	ldi	r25, 0xC4	; 196
 274:	c9 2e       	mov	r12, r25
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	d9 2e       	mov	r13, r25
 27a:	89 e1       	ldi	r24, 0x19	; 25
 27c:	e8 2e       	mov	r14, r24
 27e:	f1 2c       	mov	r15, r1
 280:	5f c0       	rjmp	.+190    	; 0x340 <main+0x10a>
 282:	ce 01       	movw	r24, r28
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x4e>
	while(1)						//INFINITE LOOP
	{
		for(i=0;i<5;i++)
		{
				_delay_ms(2);
				sbi(PORTC,5);
 288:	ad 9a       	sbi	0x15, 5	; 21
 28a:	ce 01       	movw	r24, r28
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x56>
				_delay_ms(2);
				if(bit_is_clear(PINC,0))
 290:	98 99       	sbic	0x13, 0	; 19
 292:	55 c0       	rjmp	.+170    	; 0x33e <main+0x108>
				{
					sbi(PORTB,2);
 294:	c2 9a       	sbi	0x18, 2	; 24
 296:	03 c0       	rjmp	.+6      	; 0x29e <main+0x68>
					while(bit_is_clear(PINC,0))
					{
						direction_motor(2);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fa de       	rcall	.-524    	; 0x92 <direction_motor>
				sbi(PORTC,5);
				_delay_ms(2);
				if(bit_is_clear(PINC,0))
				{
					sbi(PORTB,2);
					while(bit_is_clear(PINC,0))
 29e:	98 9b       	sbis	0x13, 0	; 19
 2a0:	fb cf       	rjmp	.-10     	; 0x298 <main+0x62>
					{
						direction_motor(2);
					}
					direction_motor(1);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	f5 de       	rcall	.-534    	; 0x92 <direction_motor>
				else
				{
					continue;
				}
				
				if(bit_is_clear(PIND,2))
 2a8:	82 99       	sbic	0x10, 2	; 16
 2aa:	17 c0       	rjmp	.+46     	; 0x2da <main+0xa4>
				{
					sbi(PORTB,2);
 2ac:	c2 9a       	sbi	0x18, 2	; 24
					direction_motor(4);
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ef de       	rcall	.-546    	; 0x92 <direction_motor>
 2b4:	c6 01       	movw	r24, r12
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x80>
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <main+0x8c>
					_delay_ms(10);
					while(bit_is_clear(PIND,2))
					{
						direction_motor(7);
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	e8 de       	rcall	.-560    	; 0x92 <direction_motor>
				if(bit_is_clear(PIND,2))
				{
					sbi(PORTB,2);
					direction_motor(4);
					_delay_ms(10);
					while(bit_is_clear(PIND,2))
 2c2:	82 9b       	sbis	0x10, 2	; 16
 2c4:	fb cf       	rjmp	.-10     	; 0x2bc <main+0x86>
					{
						direction_motor(7);
					}
					direction_motor(3);
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	e3 de       	rcall	.-570    	; 0x92 <direction_motor>
 2cc:	80 e1       	ldi	r24, 0x10	; 16
 2ce:	97 e2       	ldi	r25, 0x27	; 39
 2d0:	f7 01       	movw	r30, r14
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x9c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <main+0x9a>
					direction_motor(1);
					
				}
				else
				{
					direction_motor(1);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	d9 de       	rcall	.-590    	; 0x92 <direction_motor>
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0xac>
				}
				_delay_ms(2);
				cbi(PORTC,5);
 2e6:	ad 98       	cbi	0x15, 5	; 21
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0xb4>
				_delay_ms(2);
				if(bit_is_clear(PINC,0))
 2ee:	98 99       	sbic	0x13, 0	; 19
 2f0:	26 c0       	rjmp	.+76     	; 0x33e <main+0x108>
				{
					sbi(PORTB,2);
 2f2:	c2 9a       	sbi	0x18, 2	; 24
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <main+0xc6>
					while(bit_is_clear(PINC,0))
					{
						direction_motor(2);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	cb de       	rcall	.-618    	; 0x92 <direction_motor>
				cbi(PORTC,5);
				_delay_ms(2);
				if(bit_is_clear(PINC,0))
				{
					sbi(PORTB,2);
					while(bit_is_clear(PINC,0))
 2fc:	98 9b       	sbis	0x13, 0	; 19
 2fe:	fb cf       	rjmp	.-10     	; 0x2f6 <main+0xc0>
					{
						direction_motor(2);
					}
					direction_motor(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	c6 de       	rcall	.-628    	; 0x92 <direction_motor>
				else
				{
					continue;
				}
				
				if(bit_is_clear(PIND,2))
 306:	82 99       	sbic	0x10, 2	; 16
 308:	17 c0       	rjmp	.+46     	; 0x338 <main+0x102>
				{
					sbi(PORTB,2);
 30a:	c2 9a       	sbi	0x18, 2	; 24
					direction_motor(4);
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	c0 de       	rcall	.-640    	; 0x92 <direction_motor>
 312:	c6 01       	movw	r24, r12
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <main+0xde>
 318:	03 c0       	rjmp	.+6      	; 0x320 <main+0xea>
					_delay_ms(10);
					while(bit_is_clear(PIND,2))
					{
						direction_motor(7);
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	b9 de       	rcall	.-654    	; 0x92 <direction_motor>
				if(bit_is_clear(PIND,2))
				{
					sbi(PORTB,2);
					direction_motor(4);
					_delay_ms(10);
					while(bit_is_clear(PIND,2))
 320:	82 9b       	sbis	0x10, 2	; 16
 322:	fb cf       	rjmp	.-10     	; 0x31a <main+0xe4>
					{
						direction_motor(7);
					}
					direction_motor(3);
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	b4 de       	rcall	.-664    	; 0x92 <direction_motor>
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	97 e2       	ldi	r25, 0x27	; 39
 32e:	f7 01       	movw	r30, r14
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0xf8>
					direction_motor(1);
					
				}
				else
				{
					direction_motor(1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	aa de       	rcall	.-684    	; 0x92 <direction_motor>
	navflag = 'S';
	cbi(PORTC,5);
	TCNT0=TIMER_0_CNT;
	while(1)						//INFINITE LOOP
	{
		for(i=0;i<5;i++)
 33e:	1f 5f       	subi	r17, 0xFF	; 255
 340:	15 30       	cpi	r17, 0x05	; 5
 342:	08 f4       	brcc	.+2      	; 0x346 <main+0x110>
 344:	9e cf       	rjmp	.-196    	; 0x282 <main+0x4c>
 346:	c5 01       	movw	r24, r10
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x112>
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	99 cf       	rjmp	.-206    	; 0x282 <main+0x4c>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
