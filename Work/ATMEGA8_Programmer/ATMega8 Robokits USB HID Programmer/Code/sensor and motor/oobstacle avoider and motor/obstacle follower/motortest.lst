   1               		.file	"motortest.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  73               	.global	motormove
  75               	motormove:
   1:motortest.c   **** //			Two Motors and a Proximity IR sensor
   2:motortest.c   **** 
   3:motortest.c   **** /*-------------------------------------------------------------------          
   4:motortest.c   ****  Operation-
   5:motortest.c   ****  This example shows how to drive two mtors and control the direction
   6:motortest.c   ****  based on Proximity Sensor output.
   7:motortest.c   ****  At powerup robot moves forward by moving motor M1 Anti-Clockwise and 
   8:motortest.c   ****  motor M2 Clockwise. 
   9:motortest.c   ****  If IR Proxmity sensor detects obstrical then robot
  10:motortest.c   ****  moves backward for 2 second (motor M1 Clockwise and motor M2 
  11:motortest.c   ****  Anti-Clockwise) then turns clockwise (motor M1 Clockwise and motor 
  12:motortest.c   ****  M2 Clockwise) till no obstriction in IR Sensor and then moves forward 
  13:motortest.c   ****  again.
  14:motortest.c   **** 
  15:motortest.c   ****  1. Robot move forward => motor M1 Anti-Clockwise and motor M2 Clockwise
  16:motortest.c   ****  2. Robot move backward => motor M2 Anti-Clockwise and motor M1 Clockwise
  17:motortest.c   ****  3. Robot turn right => motor M1 Anti-Clockwise and motor M2 Anti-Clockwise
  18:motortest.c   ****  4. Robot turn left => motor M1 Clockwise and motor M2 Clockwise
  19:motortest.c   **** 	
  20:motortest.c   **** 
  21:motortest.c   ****  Description:
  22:motortest.c   ****  CPU => ATMEGA8-L @8MHz Internal
  23:motortest.c   **** 
  24:motortest.c   ****  Motors- 
  25:motortest.c   **** 
  26:motortest.c   ****   M1 Connected to PB6 and PB7 such that-
  27:motortest.c   ****   PB6	PB7		M1
  28:motortest.c   ****   0		0		Stop
  29:motortest.c   ****   1		0		Move Clockwsi
  30:motortest.c   ****   0		1		Move Anti-Clockwsi
  31:motortest.c   ****   1		1		Stop
  32:motortest.c   **** 
  33:motortest.c   ****   M2 Connected to PB6 and PB7 such that-
  34:motortest.c   ****   PB0	PB1		M2
  35:motortest.c   ****   0		0		Stop
  36:motortest.c   ****   1		0		Move Clockwsi
  37:motortest.c   ****   0		1		Move Anti-Clockwsi
  38:motortest.c   ****   1		1		Stop
  39:motortest.c   **** 
  40:motortest.c   ****   LED indicator-
  41:motortest.c   ****   PB2	State
  42:motortest.c   ****   0		Off
  43:motortest.c   ****   1		On
  44:motortest.c   **** 
  45:motortest.c   ****   Proximity IR Sensor Input
  46:motortest.c   ****   PD2(INT0)	State
  47:motortest.c   ****   0			Obstruction
  48:motortest.c   ****   1			Clear Path
  49:motortest.c   **** ---------------------------------------------------------------------*/
  50:motortest.c   **** 
  51:motortest.c   **** //************** HEADER FILES ********************
  52:motortest.c   **** #include<avr/io.h>					//HEADER FILE FOR AVR INPUT OUTPUT
  53:motortest.c   **** #include<compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  54:motortest.c   **** #include<util/delay.h>				//HEADER FILE FOR DELAY
  55:motortest.c   **** #include <avr/interrupt.h>
  56:motortest.c   **** 
  57:motortest.c   **** //************** GLOBAL VARIABLES ********************
  58:motortest.c   **** char navflag;
  59:motortest.c   **** int count = 0;
  60:motortest.c   **** 
  61:motortest.c   **** //************** FUNCTIONS ********************
  62:motortest.c   **** void motormove(char motor, char state)
  63:motortest.c   **** {
  76               	 size = 0 */
  78               	.LM1:
  79               		cpi r24,lo8(49)
  80               		brne .L2
  64:motortest.c   **** 	int n1=0,n2=0;
  65:motortest.c   **** 	if(motor=='1')
  81               	r26,lo8(7)
  82               		ldi r27,hi8(7)
  83 0000 8133      		ldi r30,lo8(6)
  84 0002 01F4      		ldi r31,hi8(6)
  85 0004 A7E0      		rjmp .L3
  86 0006 B0E0      	.L2:
  88 000a F0E0      	.LM2:
  89 000c 00C0      		cpi r24,lo8(50)
  90               		brne .L4
  66:motortest.c   **** 	{
  67:motortest.c   **** 		n1=7;
  68:motortest.c   **** 		n2=6;
  69:motortest.c   **** 	}
  70:motortest.c   **** 	if(motor=='2')
  91               	o8(0)
  92               		ldi r27,hi8(0)
  93 000e 8233      		ldi r30,lo8(1)
  94 0010 01F4      		ldi r31,hi8(1)
  95 0012 A0E0      		rjmp .L3
  96 0014 B0E0      	.L4:
  97 0016 E1E0      		ldi r26,lo8(0)
  98 0018 F0E0      		ldi r27,hi8(0)
  99 001a 00C0      		ldi r30,lo8(0)
 100               		ldi r31,hi8(0)
 101 001c A0E0      	.L3:
 103 0020 E0E0      	.LM3:
 104 0022 F0E0      		cpi r22,lo8(70)
 105               		breq .L7
  71:motortest.c   **** 	{
  72:motortest.c   **** 		n1=0;
  73:motortest.c   **** 		n2=1;
  74:motortest.c   **** 	}
  75:motortest.c   **** 	switch (state)
 106               	)
 107               		brsh .L10
 108 0024 6634      		cpi r22,lo8(66)
 109 0026 01F0      		breq .+2
 110 0028 6734      		rjmp .L11
 111 002a 00F4      		rjmp .L13
 112 002c 6234      	.L10:
 113 002e 01F0      		cpi r22,lo8(83)
 114 0030 00C0      		breq .L8
 115 0032 00C0      		cpi r22,lo8(115)
 116               		breq .+2
 117 0034 6335      		rjmp .L11
 118 0036 01F0      		rjmp .L14
 119 0038 6337      	.L7:
 121 003c 00C0      	.LM4:
 122 003e 00C0      		in r20,56-32
 123               		ldi r24,lo8(1)
  76:motortest.c   **** 	{
  77:motortest.c   **** 	 case 'F':
  78:motortest.c   **** 			sbi(PORTB,n1);
 124               	ovw r18,r24
 125               		rjmp 2f
 126 0040 48B3      	1:	lsl r18
 127 0042 81E0      		rol r19
 128 0044 90E0      	2:	dec r26
 129 0046 9C01      		brpl 1b
 130 0048 00C0      		or r20,r18
 131 004a 220F      		out 56-32,r20
 133 004e AA95      	.LM5:
 134 0050 02F4      		in r18,56-32
 135 0052 422B      		rjmp 2f
 136 0054 48BB      	1:	lsl r24
  79:motortest.c   **** 			cbi(PORTB,n2);
 137               	ec r30
 138               		brpl 1b
 139 0056 28B3      		rjmp .L12
 140 0058 00C0      	.L13:
 142 005c 991F      	.LM6:
 143 005e EA95      		in r20,56-32
 144 0060 02F4      		ldi r24,lo8(1)
 145 0062 00C0      		ldi r25,hi8(1)
 146               		movw r18,r24
  80:motortest.c   **** 			break;
  81:motortest.c   **** 
  82:motortest.c   **** 	case 'B':
  83:motortest.c   **** 			sbi(PORTB,n2);
 147               	:	lsl r18
 148               		rol r19
 149 0064 48B3      	2:	dec r30
 150 0066 81E0      		brpl 1b
 151 0068 90E0      		or r20,r18
 152 006a 9C01      		out 56-32,r20
 154 006e 220F      	.LM7:
 155 0070 331F      		in r18,56-32
 156 0072 EA95      		rjmp 2f
 157 0074 02F4      	1:	lsl r24
 158 0076 422B      		rol r25
 159 0078 48BB      	2:	dec r26
  84:motortest.c   **** 			cbi(PORTB,n1);
 160               	:
 161               		com r24
 162 007a 28B3      		and r24,r18
 163 007c 00C0      		out 56-32,r24
 164 007e 880F      		ret
 165 0080 991F      	.L8:
 167 0084 02F4      	.LM8:
 168               		in r20,56-32
 169 0086 8095      		ldi r18,lo8(1)
 170 0088 8223      		ldi r19,hi8(1)
 171 008a 88BB      		movw r24,r18
 172 008c 0895      		rjmp 2f
 173               	1:	lsl r24
  85:motortest.c   **** 			break;
  86:motortest.c   **** 
  87:motortest.c   **** 	
  88:motortest.c   **** 	case 'S':
  89:motortest.c   **** 			cbi(PORTB,n2);
 174               	c r30
 175               		brpl 1b
 176 008e 48B3      		com r24
 177 0090 21E0      		and r24,r20
 178 0092 30E0      		out 56-32,r24
 180 0096 00C0      	.LM9:
 181 0098 880F      		in r24,56-32
 182 009a 991F      		rjmp 2f
 183 009c EA95      	1:	lsl r18
 184 009e 02F4      		rol r19
 185 00a0 8095      	2:	dec r26
 186 00a2 8423      		brpl 1b
 187 00a4 88BB      		com r18
  90:motortest.c   **** 			cbi(PORTB,n1);
 188               	out 56-32,r18
 189               		ret
 190 00a6 88B3      	.L14:
 192 00aa 220F      	.LM10:
 193 00ac 331F      		in r20,56-32
 194 00ae AA95      		ldi r18,lo8(1)
 195 00b0 02F4      		ldi r19,hi8(1)
 196 00b2 2095      		movw r24,r18
 197 00b4 2823      		rjmp 2f
 198 00b6 28BB      	1:	lsl r24
 199 00b8 0895      		rol r25
 200               	2:	dec r26
  91:motortest.c   **** 			break;
  92:motortest.c   **** 
  93:motortest.c   **** 	case 's':
  94:motortest.c   **** 			cbi(PORTB,n1);
 201               	 r24
 202               		and r24,r20
 203 00ba 48B3      		out 56-32,r24
 205 00be 30E0      	.LM11:
 206 00c0 C901      		in r24,56-32
 207 00c2 00C0      		rjmp 2f
 208 00c4 880F      	1:	lsl r18
 209 00c6 991F      		rol r19
 210 00c8 AA95      	2:	dec r30
 211 00ca 02F4      		brpl 1b
 212 00cc 8095      		com r18
 213 00ce 8423      		and r18,r24
 214 00d0 88BB      		out 56-32,r18
  95:motortest.c   **** 			cbi(PORTB,n2);
 215               	ize	motormove, .-motormove
 220 00d8 331F      	.Lscope1:
 223 00de 2095      	.global	robotmove
 225 00e2 28BB      	robotmove:
 227 00e4 0895      	.LM12:
 228               	.LFBB2:
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 232               	.LM13:
 233               		cpi r24,lo8(82)
 234               		breq .L20
 235               		cpi r24,lo8(83)
 236               		brsh .L25
 237               		cpi r24,lo8(70)
 238               		breq .L18
  96:motortest.c   **** 			break;
  97:motortest.c   **** 	}	
  98:motortest.c   **** }
  99:motortest.c   **** //***************************************
 100:motortest.c   **** void robotmove(char mode)
 101:motortest.c   **** {
 239               	L19
 240               		cpi r24,lo8(66)
 241               		brne .L27
 242               		rjmp .L32
 243               	.L25:
 102:motortest.c   **** 
 103:motortest.c   **** 	switch(mode)
 244               	r24,lo8(108)
 245               		breq .L22
 246 00e6 8235      		cpi r24,lo8(109)
 247 00e8 01F0      		brsh .L26
 248 00ea 8335      		cpi r24,lo8(83)
 249 00ec 00F4      		brne .L27
 250 00ee 8634      		rjmp .L33
 251 00f0 01F0      	.L26:
 252 00f2 8C34      		cpi r24,lo8(114)
 253 00f4 01F0      		breq .L23
 254 00f6 8234      		cpi r24,lo8(115)
 255 00f8 01F4      		brne .L27
 256 00fa 00C0      		rjmp .L34
 257               	.L18:
 259 00fe 01F0      	.LM14:
 260 0100 8D36      		ldi r22,lo8(70)
 261 0102 00F4      		rjmp .L29
 262 0104 8335      	.L32:
 264 0108 00C0      	.LM15:
 265               		ldi r22,lo8(66)
 266 010a 8237      		rjmp .L30
 267 010c 01F0      	.L19:
 269 0110 01F4      	.LM16:
 270 0112 00C0      		ldi r22,lo8(66)
 271               		rjmp .L31
 104:motortest.c   **** 	{
 105:motortest.c   **** 		case 'F':
 106:motortest.c   **** 		 motormove('1','F');
 272               	-.LFBB2
 273               	.LM17:
 274 0114 66E4      		ldi r22,lo8(115)
 275 0116 00C0      		rjmp .L30
 276               	.L22:
 107:motortest.c   **** 		 motormove('2','F');
 108:motortest.c   **** 		break;
 109:motortest.c   **** 		
 110:motortest.c   **** 		case 'B':
 111:motortest.c   **** 		 motormove('1','B');
 277               	bn	68,0,126,.LM18-.LFBB2
 278               	.LM18:
 279 0118 62E4      		ldi r22,lo8(66)
 280 011a 00C0      	.L29:
 281               		ldi r24,lo8(49)
 112:motortest.c   **** 		 motormove('2','B');
 113:motortest.c   **** 		break;
 114:motortest.c   **** 		
 115:motortest.c   **** 		case 'L':
 116:motortest.c   **** 		 motormove('1','B');
 282               	l motormove
 284 011c 62E4      	.LM19:
 285 011e 00C0      		ldi r22,lo8(70)
 286               		rjmp .L28
 117:motortest.c   **** 		 motormove('2','s');
 118:motortest.c   **** 		break;
 119:motortest.c   **** 		
 120:motortest.c   **** 		case 'R':
 121:motortest.c   **** 		 motormove('1','s');
 287               	
 289 0120 63E7      	.LM20:
 290 0122 00C0      		ldi r22,lo8(70)
 291               	.L30:
 122:motortest.c   **** 		 motormove('2','B');
 123:motortest.c   **** 		break;
 124:motortest.c   **** 		
 125:motortest.c   **** 		case 'l':
 126:motortest.c   **** 		 motormove('1','B');
 292               	 r24,lo8(49)
 293               		rcall motormove
 295               	.LM21:
 296 0126 81E3      		ldi r22,lo8(66)
 297 0128 00D0      		rjmp .L28
 127:motortest.c   **** 		 motormove('2','F');
 299               	.LM22:
 300 012a 66E4      		ldi r22,lo8(115)
 301 012c 00C0      	.L31:
 302               		ldi r24,lo8(49)
 128:motortest.c   **** 		break;
 129:motortest.c   **** 		
 130:motortest.c   **** 		case 'r':
 131:motortest.c   **** 		 motormove('1','F');
 303               	l motormove
 305 012e 66E4      	.LM23:
 306               		ldi r22,lo8(115)
 307 0130 81E3      	.L28:
 308 0132 00D0      		ldi r24,lo8(50)
 132:motortest.c   **** 		 motormove('2','B');
 309               	 motormove
 310               		ret
 311 0134 62E4      	.L33:
 313               	.LM24:
 133:motortest.c   **** 		break;
 134:motortest.c   **** 		
 135:motortest.c   **** 		case 's':
 136:motortest.c   **** 		 motormove('1','s');
 314               	r22,lo8(83)
 315               		ldi r24,lo8(49)
 316 0138 63E7      		rcall motormove
 318 013a 81E3      	.LM25:
 319 013c 00D0      		ldi r22,lo8(83)
 137:motortest.c   **** 		 motormove('2','s');
 320               	24,lo8(50)
 321               		rcall motormove
 322 013e 63E7      	.L27:
 323               		ret
 325 0142 00D0      	.Lscope2:
 327               	.global	obstacleL
 138:motortest.c   **** 		break;
 139:motortest.c   **** 		
 140:motortest.c   **** 		case 'S':
 141:motortest.c   **** 		 motormove('1','S');
 328               	bstacleL, @function
 329               	obstacleL:
 331 0148 81E3      	.LM26:
 332 014a 00D0      	.LFBB3:
 142:motortest.c   **** 		 motormove('2','S');
 333               	ologue: function */
 334               	/* frame size = 0 */
 336 014e 82E3      	.LM27:
 337 0150 00D0      		sbi 56-32,2
 339 0152 0895      	.LM28:
 340               		ldi r24,lo8(83)
 341               		rcall robotmove
 342               		ldi r24,lo8(5000)
 343               		ldi r25,hi8(5000)
 344               	.LBB36:
 345               	.LBB37:
 143:motortest.c   **** 		break;
 144:motortest.c   **** 	}
 145:motortest.c   **** }
 146:motortest.c   **** 
 147:motortest.c   **** //***************************************
 148:motortest.c   **** void obstacleL(void)
 149:motortest.c   **** {
 346               	9:
 348               	.Ltext1:
 350               	.LM29:
 150:motortest.c   **** 	sbi(PORTB,2);
 351               	r18,lo8(25)
 352               		ldi r19,hi8(25)
 353 0154 C29A      	.L36:
 151:motortest.c   **** 	robotmove('S');
 354               	vw r30,r18
 355               	/* #APP */
 356 0156 83E5      	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 357 0158 00D0      		1: sbiw r30,1
 358 015a 88E8      		brne 1b
 359 015c 93E1      	 ;  0 "" 2
 360               	/* #NOAPP */
 361               	.LBE39:
 362               	.LBE38:
 364               	.Ltext2:
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 366               	 r24,1
 368 015e 29E1      	.LM31:
 369 0160 30E0      		brne .L36
 370               	.L40:
 371 0162 F901      	.LBE37:
 372               	.LBE36:
 374 0164 3197      	.Ltext3:
 376               	.LM32:
 377               		ldi r24,lo8(114)
 378               		rcall robotmove
 380               	.LM33:
 381               		sbis 48-32,2
   1:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
   6:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
   9:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  12:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  17:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  21:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  33:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5 2007/10/28 23:25:56 joerg_wunsch Exp $ */
  34:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  35:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  38:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  41:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  49:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  54:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  63:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  72:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  76:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** */
  77:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  78:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  83:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  89:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  93:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /**
  94:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  96:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
  97:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
  98:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 101:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 102:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 103:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 104:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 105:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    will not be informed about this case.
 106:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****  */
 107:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** void
 108:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** _delay_us(double __us)
 109:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** {
 110:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	uint8_t __ticks;
 111:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 112:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 113:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 114:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 255)
 115:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	{
 116:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 117:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		return;
 118:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	}
 119:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else
 120:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 121:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 122:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** }
 123:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 124:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 125:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** /**
 126:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
 127:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 128:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 129:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 130:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 131:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 132:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 133:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 134:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 
 135:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 136:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 137:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 138:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 139:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 140:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h ****  */
 141:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** void
 142:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** {
 144:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 146:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 147:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 148:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 149:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 	{
 150:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 151:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 152:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 153:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 		{
 154:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 155:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 156:c:/winavr-20080610/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 382               	r24,lo8(5000)
 383               		ldi r25,hi8(5000)
 384 0168 0197      	.LBB40:
 385               	.LBB41:
 386               	.LBB42:
 387 016a 01F4      	.LBB43:
 389               	.Ltext4:
 391               	.LM34:
 392               		ldi r18,lo8(25)
 152:motortest.c   **** 	_delay_ms(500);
 153:motortest.c   **** 	do{
 154:motortest.c   **** 		robotmove('r');
 393               	8(25)
 394               	.L38:
 395 016c 82E7      		movw r30,r18
 396 016e 00D0      	/* #APP */
 155:motortest.c   **** 	}while(bit_is_clear(PIND,2));
 397               	105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 398               		1: sbiw r30,1
 399 0170 829B      		brne 1b
 400 0172 00C0      	 ;  0 "" 2
 401 0174 88E8      	/* #NOAPP */
 402 0176 93E1      	.LBE43:
 403               	.LBE42:
 405               	.Ltext5:
 407               	.LM35:
 408               		sbiw r24,1
 410               	.LM36:
 411 0178 29E1      		brne .L38
 412 017a 30E0      	/* epilogue start */
 413               	.LBE41:
 414 017c F901      	.LBE40:
 416               	.Ltext6:
 418 0180 01F4      	.LM37:
 419               		ret
 433               	.Lscope3:
 435               	.global	obstacle
 156:motortest.c   **** 	_delay_ms(500);
 157:motortest.c   **** //	robotmove('F');
 158:motortest.c   **** 
 159:motortest.c   **** }
 436               	stabn	68,0,161,.LM38-.LFBB4
 437               	.LM38:
 438 0186 0895      	.LFBB4:
 439               	/* prologue: function */
 440               	/* frame size = 0 */
 442               	.LM39:
 443               		ldi r24,lo8(70)
 444               		rcall robotmove
 445               	.LBB44:
 446               	.LBB45:
 447               	.LBB46:
 448               	.LBB47:
 450               	.Ltext7:
 452               	.LM40:
 453               		ldi r24,lo8(25000)
 454               		ldi r25,hi8(25000)
 455               	/* #APP */
 456               	 ;  105 "c:/winavr-20080610/lib/gcc/../../avr/include/util/delay_basic.h" 1
 160:motortest.c   **** void obstacle(void)
 161:motortest.c   **** {
 457               	1b
 458               	 ;  0 "" 2
 459               	/* #NOAPP */
 460               	.LBE47:
 461               	.LBE46:
 162:motortest.c   ****             robotmove('F');
 462               	5:
 463               	.LBE44:
 465 018a 00D0      	.Ltext8:
 467               	.LM41:
 468               		sbi 56-32,2
 470               	.LM42:
 471               		sbis 51-32,0
 473               	.LM43:
 474 018c 88EA      		rcall obstacleL
 475 018e 91E6      	.L45:
 477               	.LM44:
 478 0190 0197      		ldi r24,lo8(79)
 479 0192 01F4      		sts navflag,r24
 480               	/* epilogue start */
 482               	.LM45:
 483               		ret
 485               	.Lscope4:
 487               	.global	__vector_1
 163:motortest.c   **** 			_delay_ms(100);
 164:motortest.c   **** 			sbi(PORTB,2);			//LED ON
 488               	on
 489               	__vector_1:
 165:motortest.c   **** 			//robotmove('B');
 166:motortest.c   **** 			//_delay_ms(500);
 167:motortest.c   **** 			if(bit_is_clear(PINC,0))
 491               	46:
 492               	.LFBB5:
 493 0196 989B      		push __zero_reg__
 168:motortest.c   **** 			{
 169:motortest.c   **** 				obstacleL();
 494               	sh r0
 495               		in r0,__SREG__
 496 0198 00D0      		push r0
 497               		clr __zero_reg__
 170:motortest.c   **** 			}
 171:motortest.c   **** 			navflag='O';
 498               	h r18
 499               		push r19
 500 019a 8FE4      		push r20
 501 019c 8093 0000 		push r21
 502               		push r22
 172:motortest.c   **** 			
 173:motortest.c   **** }
 503               	 r23
 504               		push r24
 505 01a0 0895      		push r25
 506               		push r26
 507               		push r27
 508               		push r30
 509               		push r31
 510               	/* prologue: Signal */
 511               	/* frame size = 0 */
 174:motortest.c   **** 
 175:motortest.c   **** 
 176:motortest.c   **** //************** INTERRUPT0 ********************
 177:motortest.c   **** SIGNAL(SIG_INTERRUPT0)     
 178:motortest.c   **** {//signal handler for external interrupt int0           
 512               	8,0,179,.LM47-.LFBB5
 513               	.LM47:
 514               		rcall obstacle
 515 01a2 1F92      	/* epilogue start */
 517 01a6 0FB6      	.LM48:
 518 01a8 0F92      		pop r31
 519 01aa 1124      		pop r30
 520 01ac 2F93      		pop r27
 521 01ae 3F93      		pop r26
 522 01b0 4F93      		pop r25
 523 01b2 5F93      		pop r24
 524 01b4 6F93      		pop r23
 525 01b6 7F93      		pop r22
 526 01b8 8F93      		pop r21
 527 01ba 9F93      		pop r20
 528 01bc AF93      		pop r19
 529 01be BF93      		pop r18
 530 01c0 EF93      		pop r0
 531 01c2 FF93      		out __SREG__,r0
 532               		pop r0
 533               		pop __zero_reg__
 179:motortest.c   ****             obstacle();
 534               	1, .-__vector_1
 535               	.Lscope5:
 537               	.global	main
 180:motortest.c   **** 			
 181:motortest.c   **** 
 182:motortest.c   **** }
 538               	op r24
 539               		pop r23
 540 01c6 FF91      		pop r22
 541 01c8 EF91      		pop r21
 542 01ca BF91      		pop r20
 543 01cc AF91      		pop r19
 544 01ce 9F91      		pop r18
 545 01d0 8F91      		pop r0
 546 01d2 7F91      		out __SREG__,r0
 547 01d4 6F91      		pop r0
 548 01d6 5F91      		pop __zero_reg__
 549 01d8 4F91      		reti
 551 01dc 2F91      	.Lscope5:
 553 01e0 0FBE      	.global	main
 555 01e4 1F90      	main:
 557               	.LM49:
 558               	.LFBB6:
 559               		push r28
 560               		push r29
 561               	/* prologue: function */
 562               	/* frame size = 0 */
 183:motortest.c   **** 
 184:motortest.c   **** 
 185:motortest.c   **** //************** MAIN PROGRAM ********************
 186:motortest.c   **** int main(void)
 187:motortest.c   **** {
 563               	
 564               	.Lscope5:
 566 01e8 CF93      	.global	main
 568               	main:
 188:motortest.c   **** 	//char tbl[8]={'s','F','S','B','s','L','S','R'};
 189:motortest.c   **** //	int m=0;
 190:motortest.c   **** 	
 191:motortest.c   **** 	DDRB=0xC7;						//SET DATA DIRECTION REGISTER
 570               	pop r0
 571               		out __SREG__,r0
 572 01ec 87EC      		pop r0
 573 01ee 87BB      		pop __zero_reg__
 192:motortest.c   **** 	DDRD=0xF1;						//SET DATA DIRECTION REGISTER
 574               	ilogue start */
 576 01f0 81EF      	.LM48:
 577 01f2 81BB      		pop r31
 193:motortest.c   **** 	
 194:motortest.c   **** 	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 578               	 r30
 579               		pop r27
 580 01f4 929A      		pop r26
 195:motortest.c   **** 	//sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 196:motortest.c   ****     GICR = _BV(INT0);           	// enable external int0
 581               	26
 582               		push r27
 583 01f6 80E4      		push r30
 584 01f8 8BBF      		push r31
 197:motortest.c   ****     MCUCR = _BV(ISC01);          	// falling egde: int0*/
 585               	rologue: Signal */
 586               	/* frame size = 0 */
 588 01fc 85BF      	.LM47:
 198:motortest.c   ****     sei();                       	// enable interrupts 
 589               	ll obstacle
 590               	/* epilogue start */
 592               	.LM48:
 593 01fe 7894      		pop r31
 594               		pop r30
 199:motortest.c   **** 									
 200:motortest.c   ****     
 201:motortest.c   ****  
 202:motortest.c   **** 	navflag = 'S';
 595               	27
 596               		pop r26
 597               		pop r25
 598 0200 83E5      		pop r24
 599 0202 8093 0000 		pop r23
 600 0206 80E1      		pop r22
 601 0208 97E2      		pop r21
 602               		pop r20
 603               		pop r19
 604               		pop r18
 605               		pop r0
 606               		out __SREG__,r0
 607               		pop r0
 608               		pop __zero_reg__
 609               		reti
 611 020c 30E0      	.Lscope5:
 613 020e F901      	.global	main
 615               	main:
 617 0212 01F4      	.LM49:
 618               	.LFBB6:
 619               		push r28
 620               		push r29
 621               	/* prologue: function */
 622               	/* frame size = 0 */
 624               	.LM50:
 625               		ldi r24,lo8(-57)
 626 0214 0197      		out 55-32,r24
 628               	.LM51:
 629 0216 01F4      		ldi r24,lo8(-15)
 630               		out 49-32,r24
 632               	.LM52:
 633               		sbi 50-32,2
 203:motortest.c   **** 	_delay_ms(1000);				//DELAY IN MILLISECONDS 
 204:motortest.c   **** 	robotmove('S');
 634               	tabn	68,0,191,.LM50-.LFBB6
 635               	.LM50:
 636 0218 83E5      		ldi r24,lo8(-57)
 637 021a 00D0      		out 55-32,r24
 639               	.LM51:
 640               		ldi r24,lo8(-15)
 641               		out 49-32,r24
 643               	.LM52:
 644               		sbi 50-32,2
 646 021c C9E1      	.LM53:
 647 021e D0E0      		ldi r24,lo8(64)
 648               		out 91-32,r24
 650               	.LM54:
 651               		ldi r24,lo8(2)
 652               		out 85-32,r24
 654               	.LM55:
 205:motortest.c   **** 		while(1)						//INFINITE LOOP
 206:motortest.c   **** 	{
 207:motortest.c   **** 		if(navflag=='O')
 655               	,2
 657 0220 8091 0000 	.LM53:
 658 0224 8F34      		ldi r24,lo8(64)
 659 0226 01F4      		out 91-32,r24
 208:motortest.c   **** 		{
 209:motortest.c   **** 			if (bit_is_clear(PIND,2))	//IF Sensor1 senses obstacle
 660               	n	68,0,192,.LM51-.LFBB6
 661               	.LM51:
 662 0228 8299      		ldi r24,lo8(-15)
 663 022a 00C0      		out 49-32,r24
 210:motortest.c   **** 			{
 211:motortest.c   **** 				//robotmove('F');
 212:motortest.c   **** 				cli();                       	// disable interrupts 
 664               	r29
 665               	/* prologue: function */
 666               	/* frame size = 0 */
 668 022c F894      	.LM50:
 669               		ldi r24,lo8(-57)
 670               		out 55-32,r24
 672 0230 93E1      	.LM51:
 673               		ldi r24,lo8(-15)
 674               		out 49-32,r24
 676               	.LM52:
 677               		sbi 50-32,2
 679               	.LM53:
 680               		ldi r24,lo8(64)
 681               		out 91-32,r24
 683               	.LM54:
 684               		ldi r24,lo8(2)
 685 0234 3197      		out 85-32,r24
 687               	.LM55:
 688               	/* #APP */
 689               	 ;  198 "motortest.c" 1
 690               		sei
 691               	 ;  0 "" 2
 693               	.LM56:
 694               	/* #NOAPP */
 695 0238 0197      		ldi r24,lo8(83)
 696               		sts navflag,r24
 697               		ldi r24,lo8(10000)
 698 023a 01F4      		ldi r25,hi8(10000)
 699               	.LBB48:
 700               	.LBB49:
 701               	.LBB50:
 702               	.LBB51:
 213:motortest.c   **** 				_delay_ms(500);
 214:motortest.c   **** 				sei();                       	// enable interrupts 
 703               	 "" 2
 705               	.LM56:
 706               	/* #NOAPP */
 707 023c 7894      		ldi r24,lo8(83)
 708               		sts navflag,r24
 709               		ldi r24,lo8(10000)
 710 023e 00C0      		ldi r25,hi8(10000)
 711               	.LBB48:
 215:motortest.c   **** 				   
 216:motortest.c   **** 				
 217:motortest.c   **** 			}
 218:motortest.c   **** 			else if(bit_is_clear(PINC,0))
 712               	 "motortest.c" 1
 713               		sei
 714 0240 9899      	 ;  0 "" 2
 219:motortest.c   **** 			{
 220:motortest.c   **** 				obstacleL();
 716               	97,.LM54-.LFBB6
 717               	.LM54:
 718 0244 00D0      		ldi r24,lo8(2)
 221:motortest.c   **** 				cbi(PORTB,2);
 719               	-32,r24
 721 0246 C298      	.LM52:
 722 0248 00C0      		sbi 50-32,2
 222:motortest.c   **** 			}
 223:motortest.c   **** 			else 
 224:motortest.c   **** 			{
 225:motortest.c   **** 				//if(move=='F')
 226:motortest.c   **** 				
 227:motortest.c   **** 					cbi(PORTB,2);
 724               	0:
 725               		ldi r24,lo8(-57)
 726 024a C298      		out 55-32,r24
 228:motortest.c   **** 					robotmove('S');
 727               	nction
 728               	main:
 730 024e 00D0      	.LM49:
 731 0250 00C0      	.LFBB6:
 732               		push r28
 733               		push r29
 734 0252 00C0      	/* prologue: function */
 735               	/* frame size = 0 */
 737               	.LM50:
 738               		ldi r24,lo8(-57)
 739               		out 55-32,r24
 741               	.LM51:
 742               		ldi r24,lo8(-15)
 743               		out 49-32,r24
 745               	.LM52:
 746               		sbi 50-32,2
 748               	.LM53:
 749               		ldi r24,lo8(64)
 750               		out 91-32,r24
 752               	.LM54:
 753               		ldi r24,lo8(2)
 754               		out 85-32,r24
 756               	.LM55:
 757               	/* #APP */
 758               	 ;  198 "motortest.c" 1
 759               		sei
 760               	 ;  0 "" 2
 762               	.LM56:
 763               	/* #NOAPP */
 764               		ldi r24,lo8(83)
 765               		sts navflag,r24
 766               		ldi r24,lo8(10000)
 767               		ldi r25,hi8(10000)
DEFINED SYMBOLS
                            *ABS*:00000000 motortest.c
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:2      *ABS*:0000003f __SREG__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:3      *ABS*:0000003e __SP_H__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:4      *ABS*:0000003d __SP_L__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:5      *ABS*:00000034 __CCP__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:7      *ABS*:00000001 __zero_reg__
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:75     .text:00000000 motormove
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:238    .text:000000e6 robotmove
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:345    .text:00000154 obstacleL
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:456    .text:00000188 obstacle
                            *COM*:00000001 navflag
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:511    .text:000001a2 __vector_1
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:562    .text:000001e8 main
C:\Users\ankit\AppData\Local\Temp/ccxwq3Qo.s:760    .bss:00000000 count

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
