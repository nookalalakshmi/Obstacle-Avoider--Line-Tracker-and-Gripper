
motortest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  000003f4  00000468  2**0
                  ALLOC
  2 .stab         00000f78  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000803  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2f c1       	rjmp	.+606    	; 0x262 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	4a c1       	rjmp	.+660    	; 0x2a8 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ef       	ldi	r30, 0xF4	; 244
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	87 d1       	rcall	.+782    	; 0x368 <main>
  5a:	ca c1       	rjmp	.+916    	; 0x3f0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <speed>:
											// GIVES 64*100 =  6400 CYCLES	(199680)	//8mhz  25msec delay
											// AT 8MHZ FREQUENCY 1 cycle is of 0.125 micro sec.
//************** FUNCTIONS ********************
//***************************************
void speed(char direction,int value)
{
  5e:	48 2f       	mov	r20, r24
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	26 1b       	sub	r18, r22
  66:	37 0b       	sbc	r19, r23
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed+0x26>
		{
			PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	82 17       	cp	r24, r18
  70:	93 07       	cpc	r25, r19
  72:	dc f3       	brlt	.-10     	; 0x6a <speed+0xc>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <speed+0x20>
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  7a:	48 bb       	out	0x18, r20	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	86 17       	cp	r24, r22
  80:	97 07       	cpc	r25, r23
  82:	dc f3       	brlt	.-10     	; 0x7a <speed+0x1c>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	8e 3f       	cpi	r24, 0xFE	; 254
  88:	18 f4       	brcc	.+6      	; 0x90 <speed+0x32>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	ef cf       	rjmp	.-34     	; 0x6e <speed+0x10>
  90:	08 95       	ret

00000092 <direction_motor>:

void direction_motor(int detectline)
{
	//Set the direction and speed according to the line detected
	char direction;
	switch(detectline)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	09 f4       	brne	.+2      	; 0x9a <direction_motor+0x8>
  98:	5f c0       	rjmp	.+190    	; 0x158 <direction_motor+0xc6>
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	91 05       	cpc	r25, r1
  9e:	5c f4       	brge	.+22     	; 0xb6 <direction_motor+0x24>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	91 05       	cpc	r25, r1
  a4:	59 f1       	breq	.+86     	; 0xfc <direction_motor+0x6a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <direction_motor+0x1c>
  ac:	3e c0       	rjmp	.+124    	; 0x12a <direction_motor+0x98>
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <direction_motor+0x22>
  b2:	9f c0       	rjmp	.+318    	; 0x1f2 <direction_motor+0x160>
  b4:	0c c0       	rjmp	.+24     	; 0xce <direction_motor+0x3c>
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <direction_motor+0x2c>
  bc:	82 c0       	rjmp	.+260    	; 0x1c2 <direction_motor+0x130>
  be:	86 30       	cpi	r24, 0x06	; 6
  c0:	91 05       	cpc	r25, r1
  c2:	0c f4       	brge	.+2      	; 0xc6 <direction_motor+0x34>
  c4:	6a c0       	rjmp	.+212    	; 0x19a <direction_motor+0x108>
  c6:	07 97       	sbiw	r24, 0x07	; 7
  c8:	09 f0       	breq	.+2      	; 0xcc <direction_motor+0x3a>
  ca:	93 c0       	rjmp	.+294    	; 0x1f2 <direction_motor+0x160>
  cc:	8e c0       	rjmp	.+284    	; 0x1ea <direction_motor+0x158>
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  d4:	21 e8       	ldi	r18, 0x81	; 129
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <direction_motor+0x62>
	char direction;
	switch(detectline)
	{
		case 1:	//forward
				direction=0x81;
				pathfound=1;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
  dc:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	87 33       	cpi	r24, 0x37	; 55
  e2:	91 05       	cpc	r25, r1
  e4:	d9 f7       	brne	.-10     	; 0xdc <direction_motor+0x4a>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  ea:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	88 3c       	cpi	r24, 0xC8	; 200
  f0:	91 05       	cpc	r25, r1
  f2:	d9 f7       	brne	.-10     	; 0xea <direction_motor+0x58>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
  f4:	82 b7       	in	r24, 0x32	; 50
  f6:	8e 3f       	cpi	r24, 0xFE	; 254
  f8:	78 f3       	brcs	.-34     	; 0xd8 <direction_motor+0x46>
  fa:	08 95       	ret
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 102:	21 e4       	ldi	r18, 0x41	; 65
 104:	0e c0       	rjmp	.+28     	; 0x122 <direction_motor+0x90>
				pathfound=1;
				speed(direction,200);
				return;
		case 2:	//right
				direction=0x41;
				pathfound=1;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 10a:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	83 32       	cpi	r24, 0x23	; 35
 110:	91 05       	cpc	r25, r1
 112:	d9 f7       	brne	.-10     	; 0x10a <direction_motor+0x78>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 118:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	8c 3d       	cpi	r24, 0xDC	; 220
 11e:	91 05       	cpc	r25, r1
 120:	d9 f7       	brne	.-10     	; 0x118 <direction_motor+0x86>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 122:	82 b7       	in	r24, 0x32	; 50
 124:	8e 3f       	cpi	r24, 0xFE	; 254
 126:	78 f3       	brcs	.-34     	; 0x106 <direction_motor+0x74>
 128:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 64 00 	sts	0x0064, r24
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 130:	22 e8       	ldi	r18, 0x82	; 130
 132:	0e c0       	rjmp	.+28     	; 0x150 <direction_motor+0xbe>
				pathfound=1;
				speed(direction,220);
				return;
		case 3:	//left
				direction=0x82;
				pathfound=1;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 138:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	83 32       	cpi	r24, 0x23	; 35
 13e:	91 05       	cpc	r25, r1
 140:	d9 f7       	brne	.-10     	; 0x138 <direction_motor+0xa6>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 146:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	8c 3d       	cpi	r24, 0xDC	; 220
 14c:	91 05       	cpc	r25, r1
 14e:	d9 f7       	brne	.-10     	; 0x146 <direction_motor+0xb4>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 150:	82 b7       	in	r24, 0x32	; 50
 152:	8e 3f       	cpi	r24, 0xFE	; 254
 154:	78 f3       	brcs	.-34     	; 0x134 <direction_motor+0xa2>
 156:	08 95       	ret
				pathfound=1;
				speed(direction,220);
				return;
		case 4:	//stop
				direction=0x00;
				flag=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 66 00 	sts	0x0066, r25
 160:	80 93 65 00 	sts	0x0065, r24
 164:	07 c0       	rjmp	.+14     	; 0x174 <direction_motor+0xe2>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 16a:	18 ba       	out	0x18, r1	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	8f 3f       	cpi	r24, 0xFF	; 255
 170:	91 05       	cpc	r25, r1
 172:	d9 f7       	brne	.-10     	; 0x16a <direction_motor+0xd8>
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 174:	82 b7       	in	r24, 0x32	; 50
 176:	8e 3f       	cpi	r24, 0xFE	; 254
 178:	b0 f3       	brcs	.-20     	; 0x166 <direction_motor+0xd4>
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 180:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	83 32       	cpi	r24, 0x23	; 35
 186:	91 05       	cpc	r25, r1
 188:	d9 f7       	brne	.-10     	; 0x180 <direction_motor+0xee>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 18e:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	8c 3d       	cpi	r24, 0xDC	; 220
 194:	91 05       	cpc	r25, r1
 196:	d9 f7       	brne	.-10     	; 0x18e <direction_motor+0xfc>
 198:	01 c0       	rjmp	.+2      	; 0x19c <direction_motor+0x10a>
		{
			PORTB=direction;
 19a:	22 e0       	ldi	r18, 0x02	; 2
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 19c:	82 b7       	in	r24, 0x32	; 50
 19e:	8e 3f       	cpi	r24, 0xFE	; 254
 1a0:	68 f3       	brcs	.-38     	; 0x17c <direction_motor+0xea>
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1a8:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	83 32       	cpi	r24, 0x23	; 35
 1ae:	91 05       	cpc	r25, r1
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <direction_motor+0x116>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1b6:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	8c 3d       	cpi	r24, 0xDC	; 220
 1bc:	91 05       	cpc	r25, r1
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <direction_motor+0x124>
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <direction_motor+0x132>
		{
			PORTB=direction;
 1c2:	20 e4       	ldi	r18, 0x40	; 64
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1c4:	82 b7       	in	r24, 0x32	; 50
 1c6:	8e 3f       	cpi	r24, 0xFE	; 254
 1c8:	68 f3       	brcs	.-38     	; 0x1a4 <direction_motor+0x112>
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 1d0:	18 ba       	out	0x18, r1	; 24
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	83 32       	cpi	r24, 0x23	; 35
 1d6:	91 05       	cpc	r25, r1
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <direction_motor+0x13e>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 1de:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	8c 3d       	cpi	r24, 0xDC	; 220
 1e4:	91 05       	cpc	r25, r1
 1e6:	d9 f7       	brne	.-10     	; 0x1de <direction_motor+0x14c>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <direction_motor+0x15a>
		{
			PORTB=direction;
 1ea:	22 e4       	ldi	r18, 0x42	; 66
//***************************************
void speed(char direction,int value)
{
	//This function will take value as speed and direction and will implement accordingly
	int i=0;
	while(TCNT0< 254)
 1ec:	82 b7       	in	r24, 0x32	; 50
 1ee:	8e 3f       	cpi	r24, 0xFE	; 254
 1f0:	68 f3       	brcs	.-38     	; 0x1cc <direction_motor+0x13a>
 1f2:	08 95       	ret

000001f4 <obstacleL>:
	}
}
void obstacleL(void)
{
	
	direction_motor(7);
 1f4:	87 e0       	ldi	r24, 0x07	; 7
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	4c df       	rcall	.-360    	; 0x92 <direction_motor>
 1fa:	80 ec       	ldi	r24, 0xC0	; 192
 1fc:	9d e5       	ldi	r25, 0x5D	; 93
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fe:	29 e1       	ldi	r18, 0x19	; 25
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <obstacleL+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 208:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	d9 f7       	brne	.-10     	; 0x202 <obstacleL+0xe>
	_delay_ms(2400);
	direction_motor(6);
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	40 df       	rcall	.-384    	; 0x92 <direction_motor>
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	29 e1       	ldi	r18, 0x19	; 25
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <obstacleL+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 220:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	d9 f7       	brne	.-10     	; 0x21a <obstacleL+0x26>
	_delay_ms(4000);

}
 224:	08 95       	ret

00000226 <obstacle>:
void obstacle(void)
{
            direction_motor(4);
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	33 df       	rcall	.-410    	; 0x92 <direction_motor>
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	9f e1       	ldi	r25, 0x1F	; 31
 230:	29 e1       	ldi	r18, 0x19	; 25
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <obstacle+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	d9 f7       	brne	.-10     	; 0x234 <obstacle+0xe>
			_delay_ms(800);
			
			direction_motor(7);
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	27 df       	rcall	.-434    	; 0x92 <direction_motor>
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	9c e9       	ldi	r25, 0x9C	; 156
 248:	29 e1       	ldi	r18, 0x19	; 25
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <obstacle+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <obstacle+0x26>
			_delay_ms(4000);
			if(bit_is_clear(PINC,0))
 256:	98 9b       	sbis	0x13, 0	; 19
			{
				obstacleL();
 258:	cd df       	rcall	.-102    	; 0x1f4 <obstacleL>
			}
			navflag='O';
 25a:	8f e4       	ldi	r24, 0x4F	; 79
 25c:	80 93 67 00 	sts	0x0067, r24
}
 260:	08 95       	ret

00000262 <__vector_1>:


//************** INTERRUPT0 ********************
SIGNAL(SIG_INTERRUPT0)     
{//signal handler for external interrupt int0           
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
            obstacle();
 284:	d0 df       	rcall	.-96     	; 0x226 <obstacle>
			

}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_9>:

//************** TIMER0 INTERRUPT ********************
SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{//re-enter every 204 mSec here
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	//TCNT0 = TIMER_0_CNT; //reload this counter
	fwdrestrict++;
 2ca:	80 91 62 00 	lds	r24, 0x0062
 2ce:	90 91 63 00 	lds	r25, 0x0063
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 63 00 	sts	0x0063, r25
 2d8:	80 93 62 00 	sts	0x0062, r24
	if(fwdrestrict>=6250)
 2dc:	8a 56       	subi	r24, 0x6A	; 106
 2de:	98 41       	sbci	r25, 0x18	; 24
 2e0:	5c f1       	brlt	.+86     	; 0x338 <__vector_9+0x90>
	{
		direction_motor(4);		//stop
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	d5 de       	rcall	.-598    	; 0x92 <direction_motor>
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	9e e3       	ldi	r25, 0x3E	; 62
 2ec:	29 e1       	ldi	r18, 0x19	; 25
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <__vector_9+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__vector_9+0x48>
		_delay_ms(1600);
		direction_motor(7);		//Reverse
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	c9 de       	rcall	.-622    	; 0x92 <direction_motor>
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	29 e1       	ldi	r18, 0x19	; 25
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <__vector_9+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 310:	d9 f7       	brne	.-10     	; 0x308 <__vector_9+0x60>
		_delay_ms(8000);
		direction_motor(3);		//left
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	bd de       	rcall	.-646    	; 0x92 <direction_motor>
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	9d e5       	ldi	r25, 0x5D	; 93
 31c:	29 e1       	ldi	r18, 0x19	; 25
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	f9 01       	movw	r30, r18
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <__vector_9+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 328:	d9 f7       	brne	.-10     	; 0x320 <__vector_9+0x78>
		_delay_ms(2400);
		direction_motor(1);		//forwrad
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	b1 de       	rcall	.-670    	; 0x92 <direction_motor>
		fwdrestrict=0;
 330:	10 92 63 00 	sts	0x0063, r1
 334:	10 92 62 00 	sts	0x0062, r1
	}
	
	if(bit_is_clear(PINC,5))
 338:	9d 99       	sbic	0x13, 5	; 19
 33a:	02 c0       	rjmp	.+4      	; 0x340 <__vector_9+0x98>
	{
		sbi(PINC,5);
 33c:	9d 9a       	sbi	0x13, 5	; 19
 33e:	01 c0       	rjmp	.+2      	; 0x342 <__vector_9+0x9a>
	}
	else
	{
		cbi(PINC,5);
 340:	9d 98       	cbi	0x13, 5	; 19
	}
	TCNT0 = TIMER_0_CNT;	
 342:	8b e9       	ldi	r24, 0x9B	; 155
 344:	82 bf       	out	0x32, r24	; 50
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <main>:
//************** MAIN PROGRAM ********************
int main(void)
{
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
	//char tbl[8]={'s','F','S','B','s','L','S','R'};
//	int m=0;
	
	DDRB=0xC7;						//SET DATA DIRECTION REGISTER
 36e:	87 ec       	ldi	r24, 0xC7	; 199
 370:	87 bb       	out	0x17, r24	; 23
	DDRD=0xF1;						//SET DATA DIRECTION REGISTER
 372:	81 ef       	ldi	r24, 0xF1	; 241
 374:	81 bb       	out	0x11, r24	; 17
	
	DDRC=0x20;
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	84 bb       	out	0x14, r24	; 20
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 37a:	92 9a       	sbi	0x12, 2	; 18
	
    GICR = _BV(INT0);           	// enable external int0
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC01);          	// falling egde: int0*/
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	85 bf       	out	0x35, r24	; 53
    sei();                       	// enable interrupts 
 384:	78 94       	sei
	TCCR0 = TMC8_CK1024;       		// use CLK/1024 prescale value
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	83 bf       	out	0x33, r24	; 51
    TIMSK  = _BV(TOIE0);        	// enable TCNT0 overflow 
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 bf       	out	0x39, r24	; 57
 
	navflag = 'S';
 38e:	83 e5       	ldi	r24, 0x53	; 83
 390:	80 93 67 00 	sts	0x0067, r24
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	97 e2       	ldi	r25, 0x27	; 39
 398:	29 e1       	ldi	r18, 0x19	; 25
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a4:	d9 f7       	brne	.-10     	; 0x39c <main+0x34>
	_delay_ms(1000);				//DELAY IN MILLISECONDS
	direction_motor(1);				//move forward
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	73 de       	rcall	.-794    	; 0x92 <direction_motor>
	//robotmove('F');
	TCNT0=TIMER_0_CNT;
 3ac:	8b e9       	ldi	r24, 0x9B	; 155
 3ae:	82 bf       	out	0x32, r24	; 50
 3b0:	c9 e1       	ldi	r28, 0x19	; 25
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
			{
				direction_motor(5);
				cli();                       	// disable interrupts 
				_delay_ms(4000);
				sei();                       	// enable interrupts 
				TCNT0 = TIMER_0_CNT;			// reset TCNT0
 3b4:	1b e9       	ldi	r17, 0x9B	; 155
	direction_motor(1);				//move forward
	//robotmove('F');
	TCNT0=TIMER_0_CNT;
	while(1)						//INFINITE LOOP
	{
		if(navflag=='O')
 3b6:	80 91 67 00 	lds	r24, 0x0067
 3ba:	8f 34       	cpi	r24, 0x4F	; 79
 3bc:	c1 f4       	brne	.+48     	; 0x3ee <main+0x86>
		{
			if (bit_is_clear(PIND,2))	//IF Sensor1 senses obstacle
 3be:	82 99       	sbic	0x10, 2	; 16
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <main+0x76>
			{
				direction_motor(5);
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	65 de       	rcall	.-822    	; 0x92 <direction_motor>
				cli();                       	// disable interrupts 
 3c8:	f8 94       	cli
 3ca:	80 e4       	ldi	r24, 0x40	; 64
 3cc:	9c e9       	ldi	r25, 0x9C	; 156
 3ce:	fe 01       	movw	r30, r28
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d6:	d9 f7       	brne	.-10     	; 0x3ce <main+0x66>
				_delay_ms(4000);
				sei();                       	// enable interrupts 
 3d8:	78 94       	sei
				TCNT0 = TIMER_0_CNT;			// reset TCNT0
 3da:	12 bf       	out	0x32, r17	; 50
 3dc:	ec cf       	rjmp	.-40     	; 0x3b6 <main+0x4e>
			}
			else if(bit_is_clear(PINC,0))
 3de:	98 99       	sbic	0x13, 0	; 19
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <main+0x7e>
			{
				obstacleL();
 3e2:	08 df       	rcall	.-496    	; 0x1f4 <obstacleL>
 3e4:	e8 cf       	rjmp	.-48     	; 0x3b6 <main+0x4e>
				
			}
			else 
			{
				direction_motor(1);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	53 de       	rcall	.-858    	; 0x92 <direction_motor>
 3ec:	e4 cf       	rjmp	.-56     	; 0x3b6 <main+0x4e>
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <main+0x86>

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
