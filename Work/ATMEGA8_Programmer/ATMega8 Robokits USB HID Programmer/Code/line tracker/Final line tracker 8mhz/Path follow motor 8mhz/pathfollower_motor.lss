
pathfollower_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00000274  000002e8  2**0
                  ALLOC
  2 .stab         000005e8  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000743  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	ce c0       	rjmp	.+412    	; 0x1b0 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e7       	ldi	r30, 0x74	; 116
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 36       	cpi	r26, 0x63	; 99
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fe d0       	rcall	.+508    	; 0x256 <main>
  5a:	0a c1       	rjmp	.+532    	; 0x270 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motormove>:
	if(motor=='1')
	{
		n1=7;
		n2=6;
	}
	if(motor=='2')
  5e:	82 33       	cpi	r24, 0x32	; 50
  60:	29 f4       	brne	.+10     	; 0x6c <motormove+0xe>
  62:	a0 e0       	ldi	r26, 0x00	; 0
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e1 e0       	ldi	r30, 0x01	; 1
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	04 c0       	rjmp	.+8      	; 0x74 <motormove+0x16>
  6c:	a7 e0       	ldi	r26, 0x07	; 7
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e6 e0       	ldi	r30, 0x06	; 6
  72:	f0 e0       	ldi	r31, 0x00	; 0
	{
		n1=0;
		n2=1;
	}
	
	switch (state)
  74:	66 34       	cpi	r22, 0x46	; 70
  76:	61 f0       	breq	.+24     	; 0x90 <motormove+0x32>
  78:	67 34       	cpi	r22, 0x47	; 71
  7a:	20 f4       	brcc	.+8      	; 0x84 <motormove+0x26>
  7c:	62 34       	cpi	r22, 0x42	; 66
  7e:	09 f0       	breq	.+2      	; 0x82 <motormove+0x24>
  80:	59 c0       	rjmp	.+178    	; 0x134 <motormove+0xd6>
  82:	18 c0       	rjmp	.+48     	; 0xb4 <motormove+0x56>
  84:	63 35       	cpi	r22, 0x53	; 83
  86:	59 f1       	breq	.+86     	; 0xde <motormove+0x80>
  88:	63 37       	cpi	r22, 0x73	; 115
  8a:	09 f0       	breq	.+2      	; 0x8e <motormove+0x30>
  8c:	53 c0       	rjmp	.+166    	; 0x134 <motormove+0xd6>
  8e:	3d c0       	rjmp	.+122    	; 0x10a <motormove+0xac>
	{
	 case 'F':
			sbi(PORTB,n1);
  90:	48 b3       	in	r20, 0x18	; 24
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9c 01       	movw	r18, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <motormove+0x40>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	aa 95       	dec	r26
  a0:	e2 f7       	brpl	.-8      	; 0x9a <motormove+0x3c>
  a2:	42 2b       	or	r20, r18
  a4:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n2);
  a6:	28 b3       	in	r18, 0x18	; 24
  a8:	02 c0       	rjmp	.+4      	; 0xae <motormove+0x50>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	ea 95       	dec	r30
  b0:	e2 f7       	brpl	.-8      	; 0xaa <motormove+0x4c>
  b2:	11 c0       	rjmp	.+34     	; 0xd6 <motormove+0x78>
			break;

	case 'B':
			sbi(PORTB,n2);
  b4:	48 b3       	in	r20, 0x18	; 24
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9c 01       	movw	r18, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <motormove+0x64>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	ea 95       	dec	r30
  c4:	e2 f7       	brpl	.-8      	; 0xbe <motormove+0x60>
  c6:	42 2b       	or	r20, r18
  c8:	48 bb       	out	0x18, r20	; 24
			cbi(PORTB,n1);
  ca:	28 b3       	in	r18, 0x18	; 24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <motormove+0x74>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	aa 95       	dec	r26
  d4:	e2 f7       	brpl	.-8      	; 0xce <motormove+0x70>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret
			break;

	
	case 'S':
			cbi(PORTB,n2);
  de:	48 b3       	in	r20, 0x18	; 24
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	c9 01       	movw	r24, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <motormove+0x8e>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	ea 95       	dec	r30
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <motormove+0x8a>
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n1);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <motormove+0xa0>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	aa 95       	dec	r26
 100:	e2 f7       	brpl	.-8      	; 0xfa <motormove+0x9c>
 102:	20 95       	com	r18
 104:	28 23       	and	r18, r24
 106:	28 bb       	out	0x18, r18	; 24
 108:	08 95       	ret
			break;

	case 's':
			cbi(PORTB,n1);
 10a:	48 b3       	in	r20, 0x18	; 24
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	c9 01       	movw	r24, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <motormove+0xba>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	aa 95       	dec	r26
 11a:	e2 f7       	brpl	.-8      	; 0x114 <motormove+0xb6>
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	88 bb       	out	0x18, r24	; 24
			cbi(PORTB,n2);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	02 c0       	rjmp	.+4      	; 0x12a <motormove+0xcc>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	ea 95       	dec	r30
 12c:	e2 f7       	brpl	.-8      	; 0x126 <motormove+0xc8>
 12e:	20 95       	com	r18
 130:	28 23       	and	r18, r24
 132:	28 bb       	out	0x18, r18	; 24
 134:	08 95       	ret

00000136 <robotmove>:
}

void robotmove(char mode)
{

	switch(mode)
 136:	8c 34       	cpi	r24, 0x4C	; 76
 138:	a9 f0       	breq	.+42     	; 0x164 <robotmove+0x2e>
 13a:	8d 34       	cpi	r24, 0x4D	; 77
 13c:	28 f4       	brcc	.+10     	; 0x148 <robotmove+0x12>
 13e:	82 34       	cpi	r24, 0x42	; 66
 140:	51 f0       	breq	.+20     	; 0x156 <robotmove+0x20>
 142:	86 34       	cpi	r24, 0x46	; 70
 144:	e1 f4       	brne	.+56     	; 0x17e <robotmove+0x48>
 146:	05 c0       	rjmp	.+10     	; 0x152 <robotmove+0x1c>
 148:	82 35       	cpi	r24, 0x52	; 82
 14a:	39 f0       	breq	.+14     	; 0x15a <robotmove+0x24>
 14c:	83 35       	cpi	r24, 0x53	; 83
 14e:	b9 f4       	brne	.+46     	; 0x17e <robotmove+0x48>
 150:	10 c0       	rjmp	.+32     	; 0x172 <robotmove+0x3c>
	{
		case 'F':
		 motormove('1','F');
 152:	66 e4       	ldi	r22, 0x46	; 70
 154:	03 c0       	rjmp	.+6      	; 0x15c <robotmove+0x26>
		 motormove('2','F');
		break;
		
		case 'B':
		 motormove('1','B');
 156:	62 e4       	ldi	r22, 0x42	; 66
 158:	06 c0       	rjmp	.+12     	; 0x166 <robotmove+0x30>
		 motormove('2','B');
		break;
		
		case 'R':
		 motormove('1','B');
 15a:	62 e4       	ldi	r22, 0x42	; 66
 15c:	81 e3       	ldi	r24, 0x31	; 49
 15e:	7f df       	rcall	.-258    	; 0x5e <motormove>
		 motormove('2','F');
 160:	66 e4       	ldi	r22, 0x46	; 70
 162:	04 c0       	rjmp	.+8      	; 0x16c <robotmove+0x36>
		break;
		
		case 'L':
		 motormove('1','F');
 164:	66 e4       	ldi	r22, 0x46	; 70
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	7a df       	rcall	.-268    	; 0x5e <motormove>
		 motormove('2','B');
 16a:	62 e4       	ldi	r22, 0x42	; 66
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	77 df       	rcall	.-274    	; 0x5e <motormove>
 170:	08 95       	ret
		break;
		
		case 'S':
		 motormove('1','s');
 172:	63 e7       	ldi	r22, 0x73	; 115
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	73 df       	rcall	.-282    	; 0x5e <motormove>
		 motormove('2','s');
 178:	63 e7       	ldi	r22, 0x73	; 115
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	70 df       	rcall	.-288    	; 0x5e <motormove>
 17e:	08 95       	ret

00000180 <path_follower_motor>:
	}
}

void path_follower_motor(int detectline)
{
	switch(detectline)
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	91 05       	cpc	r25, r1
 184:	71 f0       	breq	.+28     	; 0x1a2 <path_follower_motor+0x22>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	91 05       	cpc	r25, r1
 18a:	1c f4       	brge	.+6      	; 0x192 <path_follower_motor+0x12>
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	79 f4       	brne	.+30     	; 0x1ae <path_follower_motor+0x2e>
 190:	06 c0       	rjmp	.+12     	; 0x19e <path_follower_motor+0x1e>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	39 f0       	breq	.+14     	; 0x1a6 <path_follower_motor+0x26>
 198:	04 97       	sbiw	r24, 0x04	; 4
 19a:	49 f4       	brne	.+18     	; 0x1ae <path_follower_motor+0x2e>
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <path_follower_motor+0x2c>
	{
		case 1:	//forward
			PORTB=0x81;			
 19e:	81 e8       	ldi	r24, 0x81	; 129
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <path_follower_motor+0x28>
			return;
		case 2:	//right
			PORTB=0x41;
 1a2:	81 e4       	ldi	r24, 0x41	; 65
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <path_follower_motor+0x28>
			return;
		case 3:	//left
			PORTB=0x82;
 1a6:	82 e8       	ldi	r24, 0x82	; 130
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
			return;
		case 4:	//stop
			PORTB=0x00;
 1ac:	18 ba       	out	0x18, r1	; 24
 1ae:	08 95       	ret

000001b0 <__vector_9>:
void path_follower_motor(int detectline);
void robotmove(char mode);
void motormove(char motor,char state);

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	TCNT0  = TIMER_0_CNT;
 1d2:	82 e8       	ldi	r24, 0x82	; 130
 1d4:	82 bf       	out	0x32, r24	; 50
	timercount++;
 1d6:	80 91 60 00 	lds	r24, 0x0060
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 60 00 	sts	0x0060, r24
	if(timercount==5)
 1e0:	85 30       	cpi	r24, 0x05	; 5
 1e2:	41 f5       	brne	.+80     	; 0x234 <__vector_9+0x84>
	{
		robotmove('S');
 1e4:	83 e5       	ldi	r24, 0x53	; 83
 1e6:	a7 df       	rcall	.-178    	; 0x136 <robotmove>
		if((!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 1e8:	99 9b       	sbis	0x13, 1	; 19
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__vector_9+0x46>
 1ec:	9a 9b       	sbis	0x13, 2	; 19
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_9+0x46>
			detectline=1;	//forward
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	14 c0       	rjmp	.+40     	; 0x21e <__vector_9+0x6e>
		else if((bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 1f6:	99 99       	sbic	0x13, 1	; 19
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__vector_9+0x54>
 1fa:	9a 9b       	sbis	0x13, 2	; 19
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_9+0x54>
			detectline=2;	//right
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0d c0       	rjmp	.+26     	; 0x21e <__vector_9+0x6e>
		else if((!bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 204:	99 9b       	sbis	0x13, 1	; 19
 206:	05 c0       	rjmp	.+10     	; 0x212 <__vector_9+0x62>
 208:	9a 99       	sbic	0x13, 2	; 19
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_9+0x62>
			detectline=3;	//left
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	06 c0       	rjmp	.+12     	; 0x21e <__vector_9+0x6e>
		else if((bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 212:	99 99       	sbic	0x13, 1	; 19
 214:	08 c0       	rjmp	.+16     	; 0x226 <__vector_9+0x76>
 216:	9a 99       	sbic	0x13, 2	; 19
 218:	06 c0       	rjmp	.+12     	; 0x226 <__vector_9+0x76>
			detectline=4;
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	90 93 62 00 	sts	0x0062, r25
 222:	80 93 61 00 	sts	0x0061, r24
		timercount=0;
 226:	10 92 60 00 	sts	0x0060, r1
		path_follower_motor(detectline);
 22a:	80 91 61 00 	lds	r24, 0x0061
 22e:	90 91 62 00 	lds	r25, 0x0062
 232:	a6 df       	rcall	.-180    	; 0x180 <path_follower_motor>
	}
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/
int main(void)
{
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	81 bb       	out	0x11, r24	; 17
									//SET 0 FOR INPUT PORT
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRC=0x00;						//SET DATA DIRECTION REGISTER
 25a:	14 ba       	out	0x14, r1	; 20
									//SET 0 FOR INPUT PORT
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRB = 0xC7;
 25c:	87 ec       	ldi	r24, 0xC7	; 199
 25e:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = TMC8_CK8;       		// use CLK/1024 prescale value
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 264:	82 e8       	ldi	r24, 0x82	; 130
 266:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts 
 26c:	78 94       	sei
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0x18>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
