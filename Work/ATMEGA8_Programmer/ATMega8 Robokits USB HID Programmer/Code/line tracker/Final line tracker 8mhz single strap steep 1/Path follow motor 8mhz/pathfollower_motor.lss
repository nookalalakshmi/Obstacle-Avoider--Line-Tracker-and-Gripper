
pathfollower_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  000002ee  00000362  2**0
                  ALLOC
  2 .stab         00000870  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007fd  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	9e c0       	rjmp	.+316    	; 0x150 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ee       	ldi	r30, 0xEE	; 238
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 36       	cpi	r26, 0x6B	; 107
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3b d1       	rcall	.+630    	; 0x2d0 <main>
  5a:	47 c1       	rjmp	.+654    	; 0x2ea <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <speed>:
		
	}
}

void speed(char direction,int value)
{
  5e:	48 2f       	mov	r20, r24
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	26 1b       	sub	r18, r22
  66:	37 0b       	sbc	r19, r23
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed+0x26>
			{
				PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	82 17       	cp	r24, r18
  70:	93 07       	cpc	r25, r19
  72:	dc f3       	brlt	.-10     	; 0x6a <speed+0xc>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <speed+0x20>
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
			{
				PORTB=direction;
  7a:	48 bb       	out	0x18, r20	; 24
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	86 17       	cp	r24, r22
  80:	97 07       	cpc	r25, r23
  82:	dc f3       	brlt	.-10     	; 0x7a <speed+0x1c>
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	8e 3f       	cpi	r24, 0xFE	; 254
  88:	18 f4       	brcc	.+6      	; 0x90 <speed+0x32>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	ef cf       	rjmp	.-34     	; 0x6e <speed+0x10>
  90:	08 95       	ret

00000092 <path_follower_motor>:


void path_follower_motor(int detectline)
{
	char direction;
	switch(detectline)
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	91 05       	cpc	r25, r1
  96:	89 f1       	breq	.+98     	; 0xfa <path_follower_motor+0x68>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	91 05       	cpc	r25, r1
  9c:	24 f4       	brge	.+8      	; 0xa6 <path_follower_motor+0x14>
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	09 f0       	breq	.+2      	; 0xa4 <path_follower_motor+0x12>
  a2:	55 c0       	rjmp	.+170    	; 0x14e <path_follower_motor+0xbc>
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <path_follower_motor+0x40>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	d9 f1       	breq	.+118    	; 0x122 <path_follower_motor+0x90>
  ac:	04 97       	sbiw	r24, 0x04	; 4
  ae:	09 f0       	breq	.+2      	; 0xb2 <path_follower_motor+0x20>
  b0:	4e c0       	rjmp	.+156    	; 0x14e <path_follower_motor+0xbc>
  b2:	3c c0       	rjmp	.+120    	; 0x12c <path_follower_motor+0x9a>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
  b8:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	87 33       	cpi	r24, 0x37	; 55
  be:	91 05       	cpc	r25, r1
  c0:	d9 f7       	brne	.-10     	; 0xb8 <path_follower_motor+0x26>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
			{
				PORTB=direction;
  c6:	28 bb       	out	0x18, r18	; 24
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	88 3c       	cpi	r24, 0xC8	; 200
  cc:	91 05       	cpc	r25, r1
  ce:	d9 f7       	brne	.-10     	; 0xc6 <path_follower_motor+0x34>
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <path_follower_motor+0x42>
			{
				PORTB=direction;
  d2:	21 e8       	ldi	r18, 0x81	; 129
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  d4:	82 b7       	in	r24, 0x32	; 50
  d6:	8e 3f       	cpi	r24, 0xFE	; 254
  d8:	68 f3       	brcs	.-38     	; 0xb4 <path_follower_motor+0x22>
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
  e0:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	83 32       	cpi	r24, 0x23	; 35
  e6:	91 05       	cpc	r25, r1
  e8:	d9 f7       	brne	.-10     	; 0xe0 <path_follower_motor+0x4e>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
			{
				PORTB=direction;
  ee:	28 bb       	out	0x18, r18	; 24
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	8c 3d       	cpi	r24, 0xDC	; 220
  f4:	91 05       	cpc	r25, r1
  f6:	d9 f7       	brne	.-10     	; 0xee <path_follower_motor+0x5c>
  f8:	01 c0       	rjmp	.+2      	; 0xfc <path_follower_motor+0x6a>
			{
				PORTB=direction;
  fa:	21 e4       	ldi	r18, 0x41	; 65
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  fc:	82 b7       	in	r24, 0x32	; 50
  fe:	8e 3f       	cpi	r24, 0xFE	; 254
 100:	68 f3       	brcs	.-38     	; 0xdc <path_follower_motor+0x4a>
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
 108:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
		{
			for(i=0;i<255-value;i++)
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	83 32       	cpi	r24, 0x23	; 35
 10e:	91 05       	cpc	r25, r1
 110:	d9 f7       	brne	.-10     	; 0x108 <path_follower_motor+0x76>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
			{
				PORTB=direction;
 116:	28 bb       	out	0x18, r18	; 24
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	8c 3d       	cpi	r24, 0xDC	; 220
 11c:	91 05       	cpc	r25, r1
 11e:	d9 f7       	brne	.-10     	; 0x116 <path_follower_motor+0x84>
 120:	01 c0       	rjmp	.+2      	; 0x124 <path_follower_motor+0x92>
			{
				PORTB=direction;
 122:	22 e8       	ldi	r18, 0x82	; 130
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
 124:	82 b7       	in	r24, 0x32	; 50
 126:	8e 3f       	cpi	r24, 0xFE	; 254
 128:	68 f3       	brcs	.-38     	; 0x104 <path_follower_motor+0x72>
 12a:	08 95       	ret
				direction=0x82;
				speed(direction,220);
				return;
		case 4:	//stop
				direction=0x00;
				flag=1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 62 00 	sts	0x0062, r25
 134:	80 93 61 00 	sts	0x0061, r24
 138:	07 c0       	rjmp	.+14     	; 0x148 <path_follower_motor+0xb6>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
			{
				PORTB=direction;
 13e:	18 ba       	out	0x18, r1	; 24
		{
			for(i=0;i<255-value;i++)
			{
				PORTB=0x00;
			}
			for(i=0;i<value;i++)
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	91 05       	cpc	r25, r1
 146:	d9 f7       	brne	.-10     	; 0x13e <path_follower_motor+0xac>
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
 148:	82 b7       	in	r24, 0x32	; 50
 14a:	8e 3f       	cpi	r24, 0xFE	; 254
 14c:	b0 f3       	brcs	.-20     	; 0x13a <path_follower_motor+0xa8>
 14e:	08 95       	ret

00000150 <__vector_9>:
void robotmove(char mode);
void motormove(char motor,char state);
void speed(char direction,int value);

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	TCNT0  = TIMER_0_CNT;
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	82 bf       	out	0x32, r24	; 50
	
	if(flag==0)
 176:	80 91 61 00 	lds	r24, 0x0061
 17a:	90 91 62 00 	lds	r25, 0x0062
 17e:	89 2b       	or	r24, r25
 180:	21 f5       	brne	.+72     	; 0x1ca <__vector_9+0x7a>
	{	//PORTB=0x00;
		if((!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 182:	99 9b       	sbis	0x13, 1	; 19
 184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_9+0x40>
 186:	9a 9b       	sbis	0x13, 2	; 19
 188:	03 c0       	rjmp	.+6      	; 0x190 <__vector_9+0x40>
			detectline=1;	//forward
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <__vector_9+0x68>
		else if((bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 190:	99 99       	sbic	0x13, 1	; 19
 192:	05 c0       	rjmp	.+10     	; 0x19e <__vector_9+0x4e>
 194:	9a 9b       	sbis	0x13, 2	; 19
 196:	03 c0       	rjmp	.+6      	; 0x19e <__vector_9+0x4e>
			detectline=2;	//right
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0d c0       	rjmp	.+26     	; 0x1b8 <__vector_9+0x68>
		else if((!bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 19e:	99 9b       	sbis	0x13, 1	; 19
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <__vector_9+0x5c>
 1a2:	9a 99       	sbic	0x13, 2	; 19
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <__vector_9+0x5c>
			detectline=3;	//left
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <__vector_9+0x68>
		else if((bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 1ac:	99 99       	sbic	0x13, 1	; 19
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <__vector_9+0x70>
 1b0:	9a 99       	sbic	0x13, 2	; 19
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <__vector_9+0x70>
			{
				detectline=4;
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 68 00 	sts	0x0068, r25
 1bc:	80 93 67 00 	sts	0x0067, r24
				
			}
			
		path_follower_motor(detectline);
 1c0:	80 91 67 00 	lds	r24, 0x0067
 1c4:	90 91 68 00 	lds	r25, 0x0068
 1c8:	64 df       	rcall	.-312    	; 0x92 <path_follower_motor>
		
	}
	if(flag==1 && backflag==0)
 1ca:	80 91 61 00 	lds	r24, 0x0061
 1ce:	90 91 62 00 	lds	r25, 0x0062
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <__vector_9+0x88>
 1d6:	42 c0       	rjmp	.+132    	; 0x25c <__vector_9+0x10c>
 1d8:	80 91 63 00 	lds	r24, 0x0063
 1dc:	90 91 64 00 	lds	r25, 0x0064
 1e0:	89 2b       	or	r24, r25
 1e2:	e1 f5       	brne	.+120    	; 0x25c <__vector_9+0x10c>
	{
		stopcount=0;
 1e4:	10 92 6a 00 	sts	0x006A, r1
 1e8:	10 92 69 00 	sts	0x0069, r1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		
		while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
		{
			stopcount++;
			PORTB=0x42;
 1f0:	22 e4       	ldi	r18, 0x42	; 66
 1f2:	1d c0       	rjmp	.+58     	; 0x22e <__vector_9+0xde>
	{
		stopcount=0;
		
		while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
		{
			stopcount++;
 1f4:	80 91 69 00 	lds	r24, 0x0069
 1f8:	90 91 6a 00 	lds	r25, 0x006A
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 6a 00 	sts	0x006A, r25
 202:	80 93 69 00 	sts	0x0069, r24
			PORTB=0x42;
 206:	28 bb       	out	0x18, r18	; 24
			if(stopcount>200)
 208:	80 91 69 00 	lds	r24, 0x0069
 20c:	90 91 6a 00 	lds	r25, 0x006A
 210:	89 3c       	cpi	r24, 0xC9	; 201
 212:	91 05       	cpc	r25, r1
 214:	4c f0       	brlt	.+18     	; 0x228 <__vector_9+0xd8>
			{
				
				sbi(PORTB,2);
 216:	c2 9a       	sbi	0x18, 2	; 24
				flag=1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 62 00 	sts	0x0062, r25
 220:	80 93 61 00 	sts	0x0061, r24
				PORTB=0x00;
 224:	18 ba       	out	0x18, r1	; 24
 226:	0b c0       	rjmp	.+22     	; 0x23e <__vector_9+0xee>
				break;
			}
			else
			{
				cbi(PORTB,2);
 228:	c2 98       	cbi	0x18, 2	; 24
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(flag==1 && backflag==0)
	{
		stopcount=0;
		
		while(bit_is_clear(PINC,1) && bit_is_clear(PINC,2)) 
 22e:	99 99       	sbic	0x13, 1	; 19
 230:	02 c0       	rjmp	.+4      	; 0x236 <__vector_9+0xe6>
 232:	9a 9b       	sbis	0x13, 2	; 19
 234:	df cf       	rjmp	.-66     	; 0x1f4 <__vector_9+0xa4>
 236:	90 93 62 00 	sts	0x0062, r25
 23a:	80 93 61 00 	sts	0x0061, r24
				cbi(PORTB,2);
				flag=0;
				continue;
			}
		}
		stopcount=0;
 23e:	10 92 6a 00 	sts	0x006A, r1
 242:	10 92 69 00 	sts	0x0069, r1
		cbi(PORTB,2);
 246:	c2 98       	cbi	0x18, 2	; 24
		if(!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2))
 248:	99 9b       	sbis	0x13, 1	; 19
 24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_9+0x10c>
 24c:	9a 9b       	sbis	0x13, 2	; 19
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_9+0x10c>
		{
			backflag=1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 64 00 	sts	0x0064, r25
 258:	80 93 63 00 	sts	0x0063, r24
		}
	}
	if(backflag==1)
 25c:	80 91 63 00 	lds	r24, 0x0063
 260:	90 91 64 00 	lds	r25, 0x0064
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	19 f5       	brne	.+70     	; 0x2ae <__vector_9+0x15e>
	{
		if(nopathflag==0)
 268:	80 91 66 00 	lds	r24, 0x0066
 26c:	88 23       	and	r24, r24
 26e:	f9 f4       	brne	.+62     	; 0x2ae <__vector_9+0x15e>
		{
			PORTB=0x81;
 270:	81 e8       	ldi	r24, 0x81	; 129
 272:	88 bb       	out	0x18, r24	; 24
 274:	80 e5       	ldi	r24, 0x50	; 80
 276:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 278:	29 e1       	ldi	r18, 0x19	; 25
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <__vector_9+0x12e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <__vector_9+0x12c>
			_delay_ms(5000);
			PORTB=0x00;
 286:	18 ba       	out	0x18, r1	; 24
 288:	90 91 65 00 	lds	r25, 0x0065
			{
				
				TCNT0=0;
				while(TCNT0<255)
				{
					PORTB=0x82;		//left from center
 28c:	22 e8       	ldi	r18, 0x82	; 130
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <__vector_9+0x150>
			PORTB=0x00;
			
			while(turn<20)
			{
				
				TCNT0=0;
 290:	12 be       	out	0x32, r1	; 50
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_9+0x148>
				while(TCNT0<255)
				{
					PORTB=0x82;		//left from center
 294:	28 bb       	out	0x18, r18	; 24
					sbi(PORTB,2);
 296:	c2 9a       	sbi	0x18, 2	; 24
			
			while(turn<20)
			{
				
				TCNT0=0;
				while(TCNT0<255)
 298:	82 b7       	in	r24, 0x32	; 50
 29a:	8f 3f       	cpi	r24, 0xFF	; 255
 29c:	d9 f7       	brne	.-10     	; 0x294 <__vector_9+0x144>
 29e:	9f 5f       	subi	r25, 0xFF	; 255
		{
			PORTB=0x81;
			_delay_ms(5000);
			PORTB=0x00;
			
			while(turn<20)
 2a0:	94 31       	cpi	r25, 0x14	; 20
 2a2:	b0 f3       	brcs	.-20     	; 0x290 <__vector_9+0x140>
				turn++;
				
				
			}
			turn=0;
			nopathflag=1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 66 00 	sts	0x0066, r24
				else
				{
					nopathflag=1;
				}
			}*/
			turn=0;
 2aa:	10 92 65 00 	sts	0x0065, r1
		}
		
		
	}
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/
int main(void)
{
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 2d0:	8f e0       	ldi	r24, 0x0F	; 15
 2d2:	81 bb       	out	0x11, r24	; 17
									//SET 0 FOR INPUT PORT
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRC=0x00;						//SET DATA DIRECTION REGISTER
 2d4:	14 ba       	out	0x14, r1	; 20
									//SET 0 FOR INPUT PORT
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRB = 0xC7;
 2d6:	87 ec       	ldi	r24, 0xC7	; 199
 2d8:	87 bb       	out	0x17, r24	; 23
	
	
	
	TCCR0 = TMC8_CK8;       		// use CLK/1024 prescale value
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 2de:	80 ec       	ldi	r24, 0xC0	; 192
 2e0:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts 
 2e6:	78 94       	sei
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <main+0x18>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
