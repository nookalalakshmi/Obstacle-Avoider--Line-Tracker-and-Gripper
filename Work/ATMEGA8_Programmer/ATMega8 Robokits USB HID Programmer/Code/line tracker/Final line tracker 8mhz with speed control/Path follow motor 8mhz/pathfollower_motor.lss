
pathfollower_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00000202  00000276  2**0
                  ALLOC
  2 .stab         0000066c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000071a  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	97 c0       	rjmp	.+302    	; 0x142 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e0       	ldi	r30, 0x02	; 2
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 36       	cpi	r26, 0x63	; 99
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c5 d0       	rcall	.+394    	; 0x1e4 <main>
  5a:	d1 c0       	rjmp	.+418    	; 0x1fe <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <speed>:
		path_follower_motor(detectline);
	}
}

void speed(char direction,int value)
{
  5e:	48 2f       	mov	r20, r24
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	26 1b       	sub	r18, r22
  66:	37 0b       	sbc	r19, r23
  68:	0d c0       	rjmp	.+26     	; 0x84 <speed+0x26>
		{
			PORTB=0x00;
  6a:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	82 17       	cp	r24, r18
  70:	93 07       	cpc	r25, r19
  72:	dc f3       	brlt	.-10     	; 0x6a <speed+0xc>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <speed+0x20>
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  7a:	48 bb       	out	0x18, r20	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	86 17       	cp	r24, r22
  80:	97 07       	cpc	r25, r23
  82:	dc f3       	brlt	.-10     	; 0x7a <speed+0x1c>
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	8e 3f       	cpi	r24, 0xFE	; 254
  88:	18 f4       	brcc	.+6      	; 0x90 <speed+0x32>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	ef cf       	rjmp	.-34     	; 0x6e <speed+0x10>
  90:	08 95       	ret

00000092 <path_follower_motor>:


void path_follower_motor(int detectline)
{
	char direction;
	switch(detectline)
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	91 05       	cpc	r25, r1
  96:	89 f1       	breq	.+98     	; 0xfa <path_follower_motor+0x68>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	91 05       	cpc	r25, r1
  9c:	24 f4       	brge	.+8      	; 0xa6 <path_follower_motor+0x14>
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	09 f0       	breq	.+2      	; 0xa4 <path_follower_motor+0x12>
  a2:	4e c0       	rjmp	.+156    	; 0x140 <path_follower_motor+0xae>
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <path_follower_motor+0x40>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	d9 f1       	breq	.+118    	; 0x122 <path_follower_motor+0x90>
  ac:	04 97       	sbiw	r24, 0x04	; 4
  ae:	09 f0       	breq	.+2      	; 0xb2 <path_follower_motor+0x20>
  b0:	47 c0       	rjmp	.+142    	; 0x140 <path_follower_motor+0xae>
  b2:	43 c0       	rjmp	.+134    	; 0x13a <path_follower_motor+0xa8>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
  b8:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	91 05       	cpc	r25, r1
  c0:	d9 f7       	brne	.-10     	; 0xb8 <path_follower_motor+0x26>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  c6:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	8e 3b       	cpi	r24, 0xBE	; 190
  cc:	91 05       	cpc	r25, r1
  ce:	d9 f7       	brne	.-10     	; 0xc6 <path_follower_motor+0x34>
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <path_follower_motor+0x42>
		{
			PORTB=direction;
  d2:	21 e8       	ldi	r18, 0x81	; 129
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  d4:	82 b7       	in	r24, 0x32	; 50
  d6:	8e 3f       	cpi	r24, 0xFE	; 254
  d8:	68 f3       	brcs	.-38     	; 0xb4 <path_follower_motor+0x22>
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
  e0:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	83 32       	cpi	r24, 0x23	; 35
  e6:	91 05       	cpc	r25, r1
  e8:	d9 f7       	brne	.-10     	; 0xe0 <path_follower_motor+0x4e>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
  ee:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	8c 3d       	cpi	r24, 0xDC	; 220
  f4:	91 05       	cpc	r25, r1
  f6:	d9 f7       	brne	.-10     	; 0xee <path_follower_motor+0x5c>
  f8:	01 c0       	rjmp	.+2      	; 0xfc <path_follower_motor+0x6a>
		{
			PORTB=direction;
  fa:	21 e4       	ldi	r18, 0x41	; 65
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
  fc:	82 b7       	in	r24, 0x32	; 50
  fe:	8e 3f       	cpi	r24, 0xFE	; 254
 100:	68 f3       	brcs	.-38     	; 0xdc <path_follower_motor+0x4a>
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
 108:	18 ba       	out	0x18, r1	; 24
void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
	{
		for(i=0;i<255-value;i++)
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	83 32       	cpi	r24, 0x23	; 35
 10e:	91 05       	cpc	r25, r1
 110:	d9 f7       	brne	.-10     	; 0x108 <path_follower_motor+0x76>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 116:	28 bb       	out	0x18, r18	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	8c 3d       	cpi	r24, 0xDC	; 220
 11c:	91 05       	cpc	r25, r1
 11e:	d9 f7       	brne	.-10     	; 0x116 <path_follower_motor+0x84>
 120:	01 c0       	rjmp	.+2      	; 0x124 <path_follower_motor+0x92>
		{
			PORTB=direction;
 122:	22 e8       	ldi	r18, 0x82	; 130
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
 124:	82 b7       	in	r24, 0x32	; 50
 126:	8e 3f       	cpi	r24, 0xFE	; 254
 128:	68 f3       	brcs	.-38     	; 0x104 <path_follower_motor+0x72>
 12a:	08 95       	ret
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
		{
			PORTB=direction;
 130:	18 ba       	out	0x18, r1	; 24
	{
		for(i=0;i<255-value;i++)
		{
			PORTB=0x00;
		}
		for(i=0;i<value;i++)
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	91 05       	cpc	r25, r1
 138:	d9 f7       	brne	.-10     	; 0x130 <path_follower_motor+0x9e>
}

void speed(char direction,int value)
{
	int i=0;
	while(TCNT0< 254)
 13a:	82 b7       	in	r24, 0x32	; 50
 13c:	8e 3f       	cpi	r24, 0xFE	; 254
 13e:	b0 f3       	brcs	.-20     	; 0x12c <path_follower_motor+0x9a>
 140:	08 95       	ret

00000142 <__vector_9>:
void robotmove(char mode);
void motormove(char motor,char state);
void speed(char direction,int value);

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	TCNT0  = TIMER_0_CNT;
 164:	82 e8       	ldi	r24, 0x82	; 130
 166:	82 bf       	out	0x32, r24	; 50
	timercount++;
 168:	80 91 60 00 	lds	r24, 0x0060
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 60 00 	sts	0x0060, r24
	if(timercount==5)
 172:	85 30       	cpi	r24, 0x05	; 5
 174:	31 f5       	brne	.+76     	; 0x1c2 <__vector_9+0x80>
	{
		
		if((!bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 176:	99 9b       	sbis	0x13, 1	; 19
 178:	05 c0       	rjmp	.+10     	; 0x184 <__vector_9+0x42>
 17a:	9a 9b       	sbis	0x13, 2	; 19
 17c:	03 c0       	rjmp	.+6      	; 0x184 <__vector_9+0x42>
			detectline=1;	//forward
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	14 c0       	rjmp	.+40     	; 0x1ac <__vector_9+0x6a>
		else if((bit_is_clear(PINC,1) && !bit_is_clear(PINC,2)))
 184:	99 99       	sbic	0x13, 1	; 19
 186:	05 c0       	rjmp	.+10     	; 0x192 <__vector_9+0x50>
 188:	9a 9b       	sbis	0x13, 2	; 19
 18a:	03 c0       	rjmp	.+6      	; 0x192 <__vector_9+0x50>
			detectline=2;	//right
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0d c0       	rjmp	.+26     	; 0x1ac <__vector_9+0x6a>
		else if((!bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 192:	99 9b       	sbis	0x13, 1	; 19
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <__vector_9+0x5e>
 196:	9a 99       	sbic	0x13, 2	; 19
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <__vector_9+0x5e>
			detectline=3;	//left
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <__vector_9+0x6a>
		else if((bit_is_clear(PINC,1) && bit_is_clear(PINC,2)))
 1a0:	99 99       	sbic	0x13, 1	; 19
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <__vector_9+0x72>
 1a4:	9a 99       	sbic	0x13, 2	; 19
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <__vector_9+0x72>
			detectline=4;
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 62 00 	sts	0x0062, r25
 1b0:	80 93 61 00 	sts	0x0061, r24
		timercount=0;
 1b4:	10 92 60 00 	sts	0x0060, r1
		path_follower_motor(detectline);
 1b8:	80 91 61 00 	lds	r24, 0x0061
 1bc:	90 91 62 00 	lds	r25, 0x0062
 1c0:	68 df       	rcall	.-304    	; 0x92 <path_follower_motor>
	}
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/
int main(void)
{
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	81 bb       	out	0x11, r24	; 17
									//SET 0 FOR INPUT PORT
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRC=0x00;						//SET DATA DIRECTION REGISTER
 1e8:	14 ba       	out	0x14, r1	; 20
									//SET 0 FOR INPUT PORT
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRB = 0xC7;
 1ea:	87 ec       	ldi	r24, 0xC7	; 199
 1ec:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = TMC8_CK8;       		// use CLK/1024 prescale value
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 1f2:	82 e8       	ldi	r24, 0x82	; 130
 1f4:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts 
 1fa:	78 94       	sei
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x18>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
