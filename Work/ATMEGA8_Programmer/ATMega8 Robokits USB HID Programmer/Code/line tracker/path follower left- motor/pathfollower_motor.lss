
pathfollower_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00000264  000002d8  2**0
                  ALLOC
  2 .stab         0000060c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006da  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	f0 c0       	rjmp	.+480    	; 0x1f4 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e6       	ldi	r30, 0x64	; 100
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f6 d0       	rcall	.+492    	; 0x246 <main>
  5a:	02 c1       	rjmp	.+516    	; 0x260 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <func>:
	TCNT0  = TIMER_0_CNT;
}


void func(int m,int s1,int s2)
{
  5e:	9c 01       	movw	r18, r24
	
	mode=m;
  60:	90 93 61 00 	sts	0x0061, r25
  64:	80 93 60 00 	sts	0x0060, r24
	char i=0;
	
	
	switch(mode)
  68:	82 30       	cpi	r24, 0x02	; 2
  6a:	91 05       	cpc	r25, r1
  6c:	41 f1       	breq	.+80     	; 0xbe <func+0x60>
  6e:	83 30       	cpi	r24, 0x03	; 3
  70:	91 05       	cpc	r25, r1
  72:	2c f4       	brge	.+10     	; 0x7e <func+0x20>
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	91 05       	cpc	r25, r1
  78:	09 f0       	breq	.+2      	; 0x7c <func+0x1e>
  7a:	85 c0       	rjmp	.+266    	; 0x186 <func+0x128>
  7c:	09 c0       	rjmp	.+18     	; 0x90 <func+0x32>
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	91 05       	cpc	r25, r1
  82:	09 f4       	brne	.+2      	; 0x86 <func+0x28>
  84:	3e c0       	rjmp	.+124    	; 0x102 <func+0xa4>
  86:	84 30       	cpi	r24, 0x04	; 4
  88:	91 05       	cpc	r25, r1
  8a:	09 f0       	breq	.+2      	; 0x8e <func+0x30>
  8c:	7c c0       	rjmp	.+248    	; 0x186 <func+0x128>
  8e:	5b c0       	rjmp	.+182    	; 0x146 <func+0xe8>
	{
		case 1://full speed
		
				for(i=0;i<255;i++)
				{
					sbi(PORTB,s1);
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <func+0x3a>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <func+0x36>
  9c:	58 2f       	mov	r21, r24
					sbi(PORTB,s2);
  9e:	04 2e       	mov	r0, r20
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <func+0x48>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <func+0x44>
  aa:	92 2f       	mov	r25, r18
  ac:	2f ef       	ldi	r18, 0xFF	; 255
	{
		case 1://full speed
		
				for(i=0;i<255;i++)
				{
					sbi(PORTB,s1);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	85 2b       	or	r24, r21
  b2:	88 bb       	out	0x18, r24	; 24
					sbi(PORTB,s2);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	89 2b       	or	r24, r25
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
	
	switch(mode)
	{
		case 1://full speed
		
				for(i=0;i<255;i++)
  bc:	c1 f7       	brne	.-16     	; 0xae <func+0x50>
		
		case 2:
		
				for(i=0;i<200;i++)
				{
					sbi(PORTB,s1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9c 01       	movw	r18, r24
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <func+0x6e>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <func+0x6a>
					sbi(PORTB,s2);
  d0:	04 2e       	mov	r0, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <func+0x7a>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <func+0x76>
  dc:	98 2f       	mov	r25, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
		
		case 2:
		
				for(i=0;i<200;i++)
				{
					sbi(PORTB,s1);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	82 2b       	or	r24, r18
  e4:	88 bb       	out	0x18, r24	; 24
					sbi(PORTB,s2);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	89 2b       	or	r24, r25
  ea:	88 bb       	out	0x18, r24	; 24
				
			
		
		case 2:
		
				for(i=0;i<200;i++)
  ec:	3f 5f       	subi	r19, 0xFF	; 255
  ee:	38 3c       	cpi	r19, 0xC8	; 200
  f0:	b9 f7       	brne	.-18     	; 0xe0 <func+0x82>
				{
					sbi(PORTB,s1);
					sbi(PORTB,s2);
				}
				cbi(PORTB,s1);
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	20 95       	com	r18
  f6:	28 23       	and	r18, r24
  f8:	28 bb       	out	0x18, r18	; 24
				cbi(PORTB,s2);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	90 95       	com	r25
  fe:	98 23       	and	r25, r24
 100:	98 bb       	out	0x18, r25	; 24
		
		case 3:
		
				for(i=0;i<145;i++)
				{
					sbi(PORTB,s1);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9c 01       	movw	r18, r24
 108:	06 2e       	mov	r0, r22
 10a:	02 c0       	rjmp	.+4      	; 0x110 <func+0xb2>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <func+0xae>
					sbi(PORTB,s2);
 114:	04 2e       	mov	r0, r20
 116:	02 c0       	rjmp	.+4      	; 0x11c <func+0xbe>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <func+0xba>
 120:	98 2f       	mov	r25, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
		
		case 3:
		
				for(i=0;i<145;i++)
				{
					sbi(PORTB,s1);
 124:	88 b3       	in	r24, 0x18	; 24
 126:	82 2b       	or	r24, r18
 128:	88 bb       	out	0x18, r24	; 24
					sbi(PORTB,s2);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	89 2b       	or	r24, r25
 12e:	88 bb       	out	0x18, r24	; 24
				
			
		
		case 3:
		
				for(i=0;i<145;i++)
 130:	3f 5f       	subi	r19, 0xFF	; 255
 132:	31 39       	cpi	r19, 0x91	; 145
 134:	b9 f7       	brne	.-18     	; 0x124 <func+0xc6>
				{
					sbi(PORTB,s1);
					sbi(PORTB,s2);
				}
				cbi(PORTB,s1);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	20 95       	com	r18
 13a:	28 23       	and	r18, r24
 13c:	28 bb       	out	0x18, r18	; 24
				cbi(PORTB,s2);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	90 95       	com	r25
 142:	98 23       	and	r25, r24
 144:	98 bb       	out	0x18, r25	; 24
		
		case 4:
		
				for(i=0;i<105;i++)
				{
					sbi(PORTB,s1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	9c 01       	movw	r18, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <func+0xf4>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <func+0xf0>
					sbi(PORTB,s2);
 156:	02 c0       	rjmp	.+4      	; 0x15c <func+0xfe>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	4a 95       	dec	r20
 15e:	e2 f7       	brpl	.-8      	; 0x158 <func+0xfa>
 160:	98 2f       	mov	r25, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
		
		case 4:
		
				for(i=0;i<105;i++)
				{
					sbi(PORTB,s1);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	82 2b       	or	r24, r18
 168:	88 bb       	out	0x18, r24	; 24
					sbi(PORTB,s2);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	89 2b       	or	r24, r25
 16e:	88 bb       	out	0x18, r24	; 24
				cbi(PORTB,s2);
			
		
		case 4:
		
				for(i=0;i<105;i++)
 170:	3f 5f       	subi	r19, 0xFF	; 255
 172:	39 36       	cpi	r19, 0x69	; 105
 174:	b9 f7       	brne	.-18     	; 0x164 <func+0x106>
				{
					sbi(PORTB,s1);
					sbi(PORTB,s2);
				}
				cbi(PORTB,s1);
 176:	88 b3       	in	r24, 0x18	; 24
 178:	20 95       	com	r18
 17a:	28 23       	and	r18, r24
 17c:	28 bb       	out	0x18, r18	; 24
				cbi(PORTB,s2);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	90 95       	com	r25
 182:	98 23       	and	r25, r24
 184:	98 bb       	out	0x18, r25	; 24
 186:	08 95       	ret

00000188 <path_follower_motor>:
}
void path_follower_motor(void)
{
		
	
	if((bit_is_clear(PINC,1)) && (!bit_is_clear(PINC,2)))
 188:	99 99       	sbic	0x13, 1	; 19
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <path_follower_motor+0x1e>
 18c:	9a 9b       	sbis	0x13, 2	; 19
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <path_follower_motor+0x1e>
	{
		do
		{
			func(1,6,0);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	60 df       	rcall	.-320    	; 0x5e <func>
			
		}while((!bit_is_clear(PINC,1)) && (!bit_is_clear(PINC,2)));
 19e:	99 9b       	sbis	0x13, 1	; 19
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <path_follower_motor+0x1e>
 1a2:	9a 99       	sbic	0x13, 2	; 19
 1a4:	f5 cf       	rjmp	.-22     	; 0x190 <path_follower_motor+0x8>
	
	}
	if((bit_is_clear(PINC,2)) && (!bit_is_clear(PINC,1)))
 1a6:	9a 99       	sbic	0x13, 2	; 19
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <path_follower_motor+0x3c>
 1aa:	99 9b       	sbis	0x13, 1	; 19
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <path_follower_motor+0x3c>
	{
		do
		{
			func(1,7,1);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	67 e0       	ldi	r22, 0x07	; 7
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	51 df       	rcall	.-350    	; 0x5e <func>
			
		}while((!bit_is_clear(PINC,1)) && (!bit_is_clear(PINC,2)));
 1bc:	99 9b       	sbis	0x13, 1	; 19
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <path_follower_motor+0x3c>
 1c0:	9a 99       	sbic	0x13, 2	; 19
 1c2:	f5 cf       	rjmp	.-22     	; 0x1ae <path_follower_motor+0x26>
	
	}
	if((!bit_is_clear(PINC,1)) && (!bit_is_clear(PINC,2)))
 1c4:	99 9b       	sbis	0x13, 1	; 19
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <path_follower_motor+0x5a>
 1c8:	9a 9b       	sbis	0x13, 2	; 19
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <path_follower_motor+0x5a>
	{
		
        do
		{
			func(2,7,0);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	67 e0       	ldi	r22, 0x07	; 7
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	42 df       	rcall	.-380    	; 0x5e <func>
			
		}while((!bit_is_clear(PINC,1)) && (!bit_is_clear(PINC,2)));
 1da:	99 9b       	sbis	0x13, 1	; 19
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <path_follower_motor+0x5a>
 1de:	9a 99       	sbic	0x13, 2	; 19
 1e0:	f5 cf       	rjmp	.-22     	; 0x1cc <path_follower_motor+0x44>
	
	}
	if((bit_is_clear(PINC,1)) && (bit_is_clear(PINC,2)))
 1e2:	99 99       	sbic	0x13, 1	; 19
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <path_follower_motor+0x6a>
 1e6:	9a 99       	sbic	0x13, 2	; 19
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <path_follower_motor+0x6a>
	{
		cbi(PORTB,7);
 1ea:	c7 98       	cbi	0x18, 7	; 24
		cbi(PORTB,6);
 1ec:	c6 98       	cbi	0x18, 6	; 24
		cbi(PORTB,1);
 1ee:	c1 98       	cbi	0x18, 1	; 24
		cbi(PORTB,0);
 1f0:	c0 98       	cbi	0x18, 0	; 24
 1f2:	08 95       	ret

000001f4 <__vector_9>:
-----------------------------------------------------------------*/

void path_follower_motor(void);

SIGNAL(SIG_OVERFLOW0)            	// signal handler for tcnt1 overflow interrupt
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	cbi(PORTB,7);
 216:	c7 98       	cbi	0x18, 7	; 24
	cbi(PORTB,6);
 218:	c6 98       	cbi	0x18, 6	; 24
	cbi(PORTB,1);
 21a:	c1 98       	cbi	0x18, 1	; 24
	cbi(PORTB,0);
 21c:	c0 98       	cbi	0x18, 0	; 24
	path_follower_motor();
 21e:	b4 df       	rcall	.-152    	; 0x188 <path_follower_motor>
	TCNT0  = TIMER_0_CNT;
 220:	81 eb       	ldi	r24, 0xB1	; 177
 222:	82 bf       	out	0x32, r24	; 50
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/
int main(void)
{
	DDRD=0x0F;						//SET DATA DIRECTION REGISTER
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	81 bb       	out	0x11, r24	; 17
									//SET 0 FOR INPUT PORT
									//ONLY PORTB.0 IS OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRC=0x00;						//SET DATA DIRECTION REGISTER
 24a:	14 ba       	out	0x14, r1	; 20
									//SET 0 FOR INPUT PORT
									//ONLY PORTD.7 AND PORTD.6 ARE OUTPUT
									//CONFIGURE AS PER REQUIREMENT
									//DEFAULT ALL OTHERS ARE INPUT
									//CHANGE ACCORDING TO USE
	DDRB = 0xC7;
 24c:	87 ec       	ldi	r24, 0xC7	; 199
 24e:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = TMC8_CK8;       		// use CLK/1024 prescale value
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_0_CNT;        			// reset TCNT1
 254:	81 eb       	ldi	r24, 0xB1	; 177
 256:	82 bf       	out	0x32, r24	; 50
    
    TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts 
 25c:	78 94       	sei
 25e:	ff cf       	rjmp	.-2      	; 0x25e <main+0x18>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
