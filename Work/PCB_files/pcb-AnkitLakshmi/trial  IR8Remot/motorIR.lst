   1               		.file	"motorIR.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  71               	.global	__vector_4
  73               	__vector_4:
   1:motorIR.c     **** //			Two Motors and a Proximity IR sensor
   2:motorIR.c     **** 
   3:motorIR.c     **** /*-------------------------------------------------------------------          
   4:motorIR.c     ****  Operation-
   5:motorIR.c     ****  1. IR-Remote ecoder	
   6:motorIR.c     ****  2. Test IR-Remote using 4-LEDs
   7:motorIR.c     **** 
   8:motorIR.c     ****  Description:
   9:motorIR.c     ****  CPU => ATMEGA8-L @8MHz Internal
  10:motorIR.c     **** 
  11:motorIR.c     ****  
  12:motorIR.c     ****     
  13:motorIR.c     ****   PC0-INPUT- TSOC IR-Sensor Pin-3
  14:motorIR.c     ****   
  15:motorIR.c     ****   PD0-OUTPUT-LED-1 Red    	#2
  16:motorIR.c     ****   PD1-OUTPUT-LED-2 Green	#3
  17:motorIR.c     ****   PD2-OUTPUT-LED-3 Red		#4
  18:motorIR.c     ****   PD3-OUTPUT-LED-4 Green	#5
  19:motorIR.c     ****   
  20:motorIR.c     **** ---------------------------------------------------------------------*/
  21:motorIR.c     **** 
  22:motorIR.c     **** /*----------------------------------------------------------------
  23:motorIR.c     **** -----------------HEADER FILES-------------------------------------
  24:motorIR.c     **** -----------------------------------------------------------------*/
  25:motorIR.c     **** #include <avr/io.h>
  26:motorIR.c     **** #include <avr/interrupt.h>
  27:motorIR.c     **** #include <util/delay.h>
  28:motorIR.c     **** #include <compat/deprecated.h>		//HEADER FILE FOR FUNCTIONS LIKE SBI AND CBI
  29:motorIR.c     **** /*----------------------------------------------------------------
  30:motorIR.c     **** -----------------GLOBAL VARIABLES-------------------------------------
  31:motorIR.c     **** -----------------------------------------------------------------*/
  32:motorIR.c     **** //#define TMC8_CK8	(_BV(CS22))	// 8 BIT TIMER2 AT 256 PRESCALAR
  33:motorIR.c     **** #define TMC8_CK8	(_BV(CS21))	// 8 BIT TIMER2 AT 8 PRESCALAR
  34:motorIR.c     **** 												// GIVES 8*64 = 512 CYCLES
  35:motorIR.c     **** 												// AT 8MHZ FREQUENCY  = 0.125 microSECONDS/cycle
  36:motorIR.c     **** 												
  37:motorIR.c     **** #define TIMER_2_CNT   191// 64 micro sec, use AVRcalc to calculate these values
  38:motorIR.c     **** 								// MAX VALUE = 255 and up counting from 191
  39:motorIR.c     **** 								// TIMER OVERFLOW ON 255-191 = 64 COUNTSd
  40:motorIR.c     **** 
  41:motorIR.c     **** static volatile uint8_t led;     // use volatile when variable is accessed from interrupts
  42:motorIR.c     **** 
  43:motorIR.c     **** /*----------------------------------------------------------------
  44:motorIR.c     **** -----------------FUNCTION-----------------------------------------
  45:motorIR.c     **** -----------------------------------------------------------------*/
  46:motorIR.c     **** SIGNAL(SIG_OVERFLOW2)     // signal handler for tcnt2 overflow interrupt
  47:motorIR.c     **** {//every 70.721usec here
  74               	 r0,__SREG__
  75               		push r0
  76               		clr __zero_reg__
  77 0000 1F92      		push r24
  78 0002 0F92      	/* prologue: Signal */
  79 0004 0FB6      	/* frame size = 0 */
  81 0008 1124      	.LM1:
  82 000a 8F93      		sbi 50-32,1
  84               	.LM2:
  48:motorIR.c     ****      sbi(PORTD,1);
  85               	frame size = 0 */
  87 000c 919A      	.LM1:
  49:motorIR.c     ****     TCNT2 = TIMER_2_CNT; // reset counter to get this interrupt again
  88               	 __zero_reg__
  89               		push r24
  90 000e 8FEB      	/* prologue: Signal */
  91 0010 84BD      	/* frame size = 0 */
  50:motorIR.c     **** }
  93               	r0
  94               		clr __zero_reg__
  95 0012 8F91      		push r24
  96 0014 0F90      	/* prologue: Signal */
  97 0016 0FBE      	/* frame size = 0 */
  99 001a 1F90      	.LM1:
 100 001c 1895      		sbi 50-32,1
 102               	.LM2:
 103               		ldi r24,lo8(-65)
 104               		out 68-32,r24
 105               	/* epilogue start */
  51:motorIR.c     **** 
  52:motorIR.c     **** 
  53:motorIR.c     **** 
  54:motorIR.c     **** 
  55:motorIR.c     **** /*----------------------------------------------------------------
  56:motorIR.c     **** -----------------MAIN PROGRAM-------------------------------------
  57:motorIR.c     **** -----------------------------------------------------------------*/
  58:motorIR.c     **** 
  59:motorIR.c     **** int main(void)
  60:motorIR.c     **** {    
 107               	.LFBB1
 108               	.LM2:
 109               		ldi r24,lo8(-65)
 110               		out 68-32,r24
 111               	/* epilogue start */
  61:motorIR.c     **** 
  62:motorIR.c     **** 	DDRD=0X0F;				//SET DATA DIRECTION REGISTER
 112               	50-32,1
 114 001e 8FE0      	.LM2:
 115 0020 81BB      		ldi r24,lo8(-65)
  63:motorIR.c     **** 	
  64:motorIR.c     **** 	TCCR2 = TMC8_CK8;               	
 117               	.LM1:
 118 0022 82E0      		sbi 50-32,1
  65:motorIR.c     ****     TCNT2  = TIMER_2_CNT;  	// reset TCNT1
 120               	 */
 121               	/* frame size = 0 */
 123 0028 84BD      	.LM1:
  66:motorIR.c     ****      TIMSK  = _BV(TOIE2);         	// enable TCNT2 overflow 
 124               	 __zero_reg__
 125               		push r24
 126 002a 80E4      	/* prologue: Signal */
 127 002c 89BF      	/* frame size = 0 */
  67:motorIR.c     ****     
  68:motorIR.c     ****     sei();                       	// enable interrupts
 128               	ush r0
 129               		in r0,__SREG__
 130               		push r0
 131               		clr __zero_reg__
 132 002e 7894      		push r24
 133               	/* prologue: Signal */
 134               	/* frame size = 0 */
 136               	.LM1:
 137               		sbi 50-32,1
 139               	.LM2:
 140               		ldi r24,lo8(-65)
   1:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:e:/winavr-200812057/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 142               	.LM1:
 143 0030 24E2      		sbi 50-32,1
 145               	.LM2:
 146               		ldi r24,lo8(-65)
 147               		out 68-32,r24
 148               	/* epilogue start */
 150               	.LM3:
 151               		pop r24
  69:motorIR.c     **** 	   
  70:motorIR.c     **** 
  71:motorIR.c     ****     for (;;)			 	//
  72:motorIR.c     **** 	{	
  73:motorIR.c     **** 	
  74:motorIR.c     **** 		if(bit_is_clear(PIND,0))
 152               	 r24,lo8(-65)
 153               		out 68-32,r24
 154 0034 8099      	/* epilogue start */
  75:motorIR.c     **** 		{
  76:motorIR.c     **** 			sbi(PORTD,0);			//LED ON
 156               	.LFBB1
 157               	.LM2:
 158 0038 909A      		ldi r24,lo8(-65)
 159 003a 00C0      		out 68-32,r24
 160               	/* epilogue start */
  77:motorIR.c     **** 			_delay_ms(250);
  78:motorIR.c     **** 		}
  79:motorIR.c     **** 		else
  80:motorIR.c     **** 		{
  81:motorIR.c     **** 			cbi(PORTD,0);			//LED OFF
 161               	50-32,1
 163 003c 9098      	.LM2:
 164               		ldi r24,lo8(-65)
 165               		out 68-32,r24
 166               	/* epilogue start */
 168               	.LM3:
 169               		pop r24
 170               		pop r0
 171               		out __SREG__,r0
 172               		pop r0
 173 003e C901      		pop __zero_reg__
 174               		reti
 176 0040 0197      	.Lscope1:
 178               	.global	main
 180 0044 00C0      	main:
 182               	.LM4:
 183               	.LFBB2:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 187               	.LM5:
 188               		ldi r24,lo8(15)
DEFINED SYMBOLS
                            *ABS*:00000000 motorIR.c
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:73     .text:00000000 __vector_4
C:\DOCUME~1\HIMANS~1.RND\LOCALS~1\Temp/ccz8UGwy.s:106    .text:0000001e main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
