
motorIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  000002b8  0000032c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000073a  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 eb       	ldi	r30, 0xB8	; 184
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fb d0       	rcall	.+502    	; 0x250 <main>
  5a:	2c c1       	rjmp	.+600    	; 0x2b4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_4>:
/*----------------------------------------------------------------
-----------------FUNCTION-----------------------------------------
-----------------------------------------------------------------*/
//Timer2 OVERFLOW Interupt----------------------
SIGNAL(SIG_OVERFLOW2)     // signal handler for tcnt2 overflow interrupt
{//every 70.721usec here
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	8f 93       	push	r24
  6e:	9f 93       	push	r25
	char d;
//     sbi(PORTD,2);
	c3p5++;
  70:	80 91 62 00 	lds	r24, 0x0062
  74:	90 91 63 00 	lds	r25, 0x0063
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	90 93 63 00 	sts	0x0063, r25
  7e:	80 93 62 00 	sts	0x0062, r24
	pwmc++;
  82:	80 91 64 00 	lds	r24, 0x0064
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	80 93 64 00 	sts	0x0064, r24
    TCNT2 = TIMER_2_CNT; // reset counter to get this interrupt again
  8c:	8e eb       	ldi	r24, 0xBE	; 190
  8e:	84 bd       	out	0x24, r24	; 36
	
	if(pwmc==0)
  90:	80 91 64 00 	lds	r24, 0x0064
  94:	88 23       	and	r24, r24
  96:	71 f4       	brne	.+28     	; 0xb4 <__vector_4+0x56>
	{
     c131++;	
  98:	80 91 65 00 	lds	r24, 0x0065
  9c:	90 91 66 00 	lds	r25, 0x0066
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	90 93 66 00 	sts	0x0066, r25
  a6:	80 93 65 00 	sts	0x0065, r24
	 count++;
  aa:	80 91 67 00 	lds	r24, 0x0067
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 67 00 	sts	0x0067, r24
	}
	if(count==0)
  b4:	80 91 67 00 	lds	r24, 0x0067
	{
	  
	}
	if(count==128)
  b8:	80 91 67 00 	lds	r24, 0x0067
	{
	}
	
	//IR-Remote Decoder ----------------------------
	if(irMode==0)//Idle
  bc:	80 91 61 00 	lds	r24, 0x0061
  c0:	88 23       	and	r24, r24
  c2:	09 f4       	brne	.+2      	; 0xc6 <__vector_4+0x68>
  c4:	bc c0       	rjmp	.+376    	; 0x23e <__vector_4+0x1e0>
	{
		return;
	}
	//IR-Remote Decoder ----------------------------
	if(irMode==1)//Get start frame first mid-bit
  c6:	20 91 61 00 	lds	r18, 0x0061
  ca:	21 30       	cpi	r18, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <__vector_4+0x72>
  ce:	4e c0       	rjmp	.+156    	; 0x16c <__vector_4+0x10e>
	{
		if(irState==0)//detect sylence for 3.5mSec
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	88 23       	and	r24, r24
  d6:	61 f4       	brne	.+24     	; 0xf0 <__vector_4+0x92>
		{//
			c3p5=0;
  d8:	10 92 63 00 	sts	0x0063, r1
  dc:	10 92 62 00 	sts	0x0062, r1
			irState=1;
  e0:	20 93 60 00 	sts	0x0060, r18
			d_old=bit_is_clear(PINC,0);
  e4:	83 b3       	in	r24, 0x13	; 19
  e6:	80 95       	com	r24
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	80 93 6a 00 	sts	0x006A, r24
  ee:	a7 c0       	rjmp	.+334    	; 0x23e <__vector_4+0x1e0>
			return;
		}
		if(irState==1)
  f0:	80 91 60 00 	lds	r24, 0x0060
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	c9 f4       	brne	.+50     	; 0x12a <__vector_4+0xcc>
		{
			d=bit_is_clear(PINC,0);
  f8:	83 b3       	in	r24, 0x13	; 19
			if(d_old==d)
  fa:	90 91 6a 00 	lds	r25, 0x006A
  fe:	80 95       	com	r24
 100:	81 70       	andi	r24, 0x01	; 1
 102:	98 17       	cp	r25, r24
 104:	79 f4       	brne	.+30     	; 0x124 <__vector_4+0xc6>
			{
				if(c3p5>49)
 106:	80 91 62 00 	lds	r24, 0x0062
 10a:	90 91 63 00 	lds	r25, 0x0063
 10e:	c2 97       	sbiw	r24, 0x32	; 50
 110:	0c f4       	brge	.+2      	; 0x114 <__vector_4+0xb6>
 112:	95 c0       	rjmp	.+298    	; 0x23e <__vector_4+0x1e0>
				{//sylence for 3.5 mSec
					irState=2;//now detect first transition
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 60 00 	sts	0x0060, r24
					c131=0;
 11a:	10 92 66 00 	sts	0x0066, r1
 11e:	10 92 65 00 	sts	0x0065, r1
 122:	8d c0       	rjmp	.+282    	; 0x23e <__vector_4+0x1e0>
				}
			}
			else
			{
				irState=0;
 124:	10 92 60 00 	sts	0x0060, r1
 128:	8a c0       	rjmp	.+276    	; 0x23e <__vector_4+0x1e0>
			}
			
			return;
		}
		if(irState==2)
 12a:	30 91 60 00 	lds	r19, 0x0060
 12e:	32 30       	cpi	r19, 0x02	; 2
 130:	e9 f4       	brne	.+58     	; 0x16c <__vector_4+0x10e>
		{
			d=bit_is_clear(PINC,0);
 132:	83 b3       	in	r24, 0x13	; 19
			if(d_old!=d)
 134:	90 91 6a 00 	lds	r25, 0x006A
 138:	80 95       	com	r24
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	98 17       	cp	r25, r24
 13e:	69 f0       	breq	.+26     	; 0x15a <__vector_4+0xfc>
			{//first transition detected
				irState=1;
 140:	20 93 60 00 	sts	0x0060, r18
				c3p5=0;
 144:	10 92 63 00 	sts	0x0063, r1
 148:	10 92 62 00 	sts	0x0062, r1
				irDt=0;//reset frame data
 14c:	10 92 69 00 	sts	0x0069, r1
 150:	10 92 68 00 	sts	0x0068, r1
				irMode=2;//go to frame read
 154:	30 93 61 00 	sts	0x0061, r19
 158:	72 c0       	rjmp	.+228    	; 0x23e <__vector_4+0x1e0>
			}
			else
			{
				if(c131>8)//144 mSec
 15a:	80 91 65 00 	lds	r24, 0x0065
 15e:	90 91 66 00 	lds	r25, 0x0066
 162:	09 97       	sbiw	r24, 0x09	; 9
 164:	0c f4       	brge	.+2      	; 0x168 <__vector_4+0x10a>
 166:	6b c0       	rjmp	.+214    	; 0x23e <__vector_4+0x1e0>
				{//70.721*256*8=144
					//PORTD=0;
					cmd=64;
 168:	80 e4       	ldi	r24, 0x40	; 64
 16a:	41 c0       	rjmp	.+130    	; 0x1ee <__vector_4+0x190>
			}
			return;
		}
	}
	//IR-Remote Decoder ----------------------------
	if(irMode==2)
 16c:	80 91 61 00 	lds	r24, 0x0061
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	09 f0       	breq	.+2      	; 0x176 <__vector_4+0x118>
 174:	64 c0       	rjmp	.+200    	; 0x23e <__vector_4+0x1e0>
	{
		if(irState==0)
 176:	80 91 60 00 	lds	r24, 0x0060
 17a:	88 23       	and	r24, r24
 17c:	d9 f5       	brne	.+118    	; 0x1f4 <__vector_4+0x196>
		{//detect mid-bit transition
			d=bit_is_clear(PINC,0);
 17e:	93 b3       	in	r25, 0x13	; 19
 180:	90 95       	com	r25
 182:	91 70       	andi	r25, 0x01	; 1
			if(d_old!=d)
 184:	80 91 6a 00 	lds	r24, 0x006A
 188:	89 17       	cp	r24, r25
 18a:	51 f0       	breq	.+20     	; 0x1a0 <__vector_4+0x142>
			{//data changed
				d_old=d;
 18c:	90 93 6a 00 	sts	0x006A, r25
				irState=1; 
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 60 00 	sts	0x0060, r24
				c3p5=0;
 196:	10 92 63 00 	sts	0x0063, r1
 19a:	10 92 62 00 	sts	0x0062, r1
 19e:	4f c0       	rjmp	.+158    	; 0x23e <__vector_4+0x1e0>
				return;
			}
			if(c3p5>49)//3.5mSec
 1a0:	80 91 62 00 	lds	r24, 0x0062
 1a4:	90 91 63 00 	lds	r25, 0x0063
 1a8:	c2 97       	sbiw	r24, 0x32	; 50
 1aa:	0c f4       	brge	.+2      	; 0x1ae <__vector_4+0x150>
 1ac:	48 c0       	rjmp	.+144    	; 0x23e <__vector_4+0x1e0>
			{//no data in 2 bit period; end of frame
			 irState=1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 60 00 	sts	0x0060, r24
			 irMode=0;
 1b4:	10 92 61 00 	sts	0x0061, r1
			 irDt = irDt>>1;
 1b8:	80 91 68 00 	lds	r24, 0x0068
 1bc:	90 91 69 00 	lds	r25, 0x0069
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	90 93 69 00 	sts	0x0069, r25
 1c8:	80 93 68 00 	sts	0x0068, r24
			 irDt=255-irDt;
 1cc:	20 91 68 00 	lds	r18, 0x0068
 1d0:	30 91 69 00 	lds	r19, 0x0069
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	82 1b       	sub	r24, r18
 1da:	93 0b       	sbc	r25, r19
 1dc:	90 93 69 00 	sts	0x0069, r25
 1e0:	80 93 68 00 	sts	0x0068, r24
			 cmd=irDt & 0x3f;
 1e4:	80 91 68 00 	lds	r24, 0x0068
 1e8:	90 91 69 00 	lds	r25, 0x0069
 1ec:	8f 73       	andi	r24, 0x3F	; 63
 1ee:	80 93 6b 00 	sts	0x006B, r24
 1f2:	25 c0       	rjmp	.+74     	; 0x23e <__vector_4+0x1e0>
			
				
			}
			return;
		}		
		if(irState==1)
 1f4:	80 91 60 00 	lds	r24, 0x0060
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	09 f5       	brne	.+66     	; 0x23e <__vector_4+0x1e0>
		{
			if(c3p5>16)
 1fc:	80 91 62 00 	lds	r24, 0x0062
 200:	90 91 63 00 	lds	r25, 0x0063
 204:	41 97       	sbiw	r24, 0x11	; 17
 206:	dc f0       	brlt	.+54     	; 0x23e <__vector_4+0x1e0>
			{//skip bit boundary
				irState=0;
 208:	10 92 60 00 	sts	0x0060, r1
				d=bit_is_clear(PINC,0);
 20c:	83 b3       	in	r24, 0x13	; 19
 20e:	80 95       	com	r24
 210:	81 70       	andi	r24, 0x01	; 1
				d_old=d;
 212:	80 93 6a 00 	sts	0x006A, r24
				irDt=irDt<<1;
 216:	20 91 68 00 	lds	r18, 0x0068
 21a:	30 91 69 00 	lds	r19, 0x0069
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	30 93 69 00 	sts	0x0069, r19
 226:	20 93 68 00 	sts	0x0068, r18
				irDt=irDt+d;
 22a:	20 91 68 00 	lds	r18, 0x0068
 22e:	30 91 69 00 	lds	r19, 0x0069
 232:	28 0f       	add	r18, r24
 234:	31 1d       	adc	r19, r1
 236:	30 93 69 00 	sts	0x0069, r19
 23a:	20 93 68 00 	sts	0x0068, r18
			}
		}
		return;
	}
	//---------------------------------------------
}
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <main>:
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{    
	irState=0;
 250:	10 92 60 00 	sts	0x0060, r1
	irMode=1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 61 00 	sts	0x0061, r24
	DDRD=0X0F;				//SET DATA DIRECTION REGISTER
 25a:	8f e0       	ldi	r24, 0x0F	; 15
 25c:	81 bb       	out	0x11, r24	; 17
	TCCR2 = TMC8_CK8;               	
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 262:	8e eb       	ldi	r24, 0xBE	; 190
 264:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT2 overflow 
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 26a:	78 94       	sei
			else
			{
				if(c3p5>5000)
				{
					c3p5=0;
					irMode=1;
 26c:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26e:	24 ec       	ldi	r18, 0xC4	; 196
 270:	39 e0       	ldi	r19, 0x09	; 9
    sei();                       	// enable interrupts

    for (;;)			 	//
	{	
	
		if(irMode==0)
 272:	80 91 61 00 	lds	r24, 0x0061
 276:	88 23       	and	r24, r24
 278:	b1 f4       	brne	.+44     	; 0x2a6 <main+0x56>
		{
			if(irState==1)
 27a:	80 91 60 00 	lds	r24, 0x0060
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	19 f4       	brne	.+6      	; 0x288 <main+0x38>
			{
				irMode=1;
 282:	80 93 61 00 	sts	0x0061, r24
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <main+0x52>
				irState=0;
			}
			else
			{
				if(c3p5>5000)
 288:	80 91 62 00 	lds	r24, 0x0062
 28c:	90 91 63 00 	lds	r25, 0x0063
 290:	89 58       	subi	r24, 0x89	; 137
 292:	93 41       	sbci	r25, 0x13	; 19
 294:	44 f0       	brlt	.+16     	; 0x2a6 <main+0x56>
				{
					c3p5=0;
 296:	10 92 63 00 	sts	0x0063, r1
 29a:	10 92 62 00 	sts	0x0062, r1
					irMode=1;
 29e:	40 93 61 00 	sts	0x0061, r20
					irState=0;
 2a2:	10 92 60 00 	sts	0x0060, r1
				}
			}
		}
		PORTD=cmd;
 2a6:	80 91 6b 00 	lds	r24, 0x006B
 2aa:	82 bb       	out	0x12, r24	; 18
 2ac:	c9 01       	movw	r24, r18
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x5e>
 2b2:	df cf       	rjmp	.-66     	; 0x272 <main+0x22>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
