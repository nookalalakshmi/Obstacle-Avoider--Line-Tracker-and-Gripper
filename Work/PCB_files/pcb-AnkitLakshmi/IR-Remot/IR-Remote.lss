
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001c  00800060  000005f4  00000668  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004f  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c8  00000000  00000000  000006d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c7  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000608  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ca  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000099  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  8a:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MotorControlUpdate>:
	}
	//---------------------------------------------
}
//Motor Direction & Speed Set----------------------
void MotorControlUpdate(void)     // 
{
  92:	80 91 74 00 	lds	r24, 0x0074
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	09 f4       	brne	.+2      	; 0x9c <MotorControlUpdate+0xa>
  9a:	96 c0       	rjmp	.+300    	; 0x1c8 <MotorControlUpdate+0x136>
  9c:	87 30       	cpi	r24, 0x07	; 7
  9e:	98 f4       	brcc	.+38     	; 0xc6 <MotorControlUpdate+0x34>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	09 f4       	brne	.+2      	; 0xa6 <MotorControlUpdate+0x14>
  a4:	7f c0       	rjmp	.+254    	; 0x1a4 <MotorControlUpdate+0x112>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	38 f4       	brcc	.+14     	; 0xb8 <MotorControlUpdate+0x26>
  aa:	88 23       	and	r24, r24
  ac:	09 f4       	brne	.+2      	; 0xb0 <MotorControlUpdate+0x1e>
  ae:	5d c0       	rjmp	.+186    	; 0x16a <MotorControlUpdate+0xd8>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <MotorControlUpdate+0x24>
  b4:	9c c0       	rjmp	.+312    	; 0x1ee <MotorControlUpdate+0x15c>
  b6:	74 c0       	rjmp	.+232    	; 0x1a0 <MotorControlUpdate+0x10e>
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	09 f4       	brne	.+2      	; 0xbe <MotorControlUpdate+0x2c>
  bc:	77 c0       	rjmp	.+238    	; 0x1ac <MotorControlUpdate+0x11a>
  be:	85 30       	cpi	r24, 0x05	; 5
  c0:	08 f0       	brcs	.+2      	; 0xc4 <MotorControlUpdate+0x32>
  c2:	7d c0       	rjmp	.+250    	; 0x1be <MotorControlUpdate+0x12c>
  c4:	71 c0       	rjmp	.+226    	; 0x1a8 <MotorControlUpdate+0x116>
  c6:	81 32       	cpi	r24, 0x21	; 33
  c8:	a9 f1       	breq	.+106    	; 0x134 <MotorControlUpdate+0xa2>
  ca:	82 32       	cpi	r24, 0x22	; 34
  cc:	40 f4       	brcc	.+16     	; 0xde <MotorControlUpdate+0x4c>
  ce:	81 31       	cpi	r24, 0x11	; 17
  d0:	c9 f0       	breq	.+50     	; 0x104 <MotorControlUpdate+0x72>
  d2:	80 32       	cpi	r24, 0x20	; 32
  d4:	19 f1       	breq	.+70     	; 0x11c <MotorControlUpdate+0x8a>
  d6:	80 31       	cpi	r24, 0x10	; 16
  d8:	09 f0       	breq	.+2      	; 0xdc <MotorControlUpdate+0x4a>
  da:	89 c0       	rjmp	.+274    	; 0x1ee <MotorControlUpdate+0x15c>
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <MotorControlUpdate+0x5e>
  de:	8b 33       	cpi	r24, 0x3B	; 59
  e0:	b9 f1       	breq	.+110    	; 0x150 <MotorControlUpdate+0xbe>
  e2:	80 34       	cpi	r24, 0x40	; 64
  e4:	09 f4       	brne	.+2      	; 0xe8 <MotorControlUpdate+0x56>
  e6:	72 c0       	rjmp	.+228    	; 0x1cc <MotorControlUpdate+0x13a>
  e8:	89 32       	cpi	r24, 0x29	; 41
  ea:	09 f0       	breq	.+2      	; 0xee <MotorControlUpdate+0x5c>
  ec:	80 c0       	rjmp	.+256    	; 0x1ee <MotorControlUpdate+0x15c>
  ee:	30 c0       	rjmp	.+96     	; 0x150 <MotorControlUpdate+0xbe>
		switch(cmd)
		{
		case 16://Left
			s11=1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 63 00 	sts	0x0063, r24
			s12=0;
  f6:	10 92 64 00 	sts	0x0064, r1
			s21=0;
  fa:	10 92 65 00 	sts	0x0065, r1
			s22=1;
  fe:	80 93 66 00 	sts	0x0066, r24
 102:	09 c0       	rjmp	.+18     	; 0x116 <MotorControlUpdate+0x84>
			count=0;
		break;
		
		case 17://Right
			s11=0;
 104:	10 92 63 00 	sts	0x0063, r1
			s12=1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 64 00 	sts	0x0064, r24
			s21=1;
 10e:	80 93 65 00 	sts	0x0065, r24
			s22=0;
 112:	10 92 66 00 	sts	0x0066, r1
			count=0;
 116:	10 92 69 00 	sts	0x0069, r1
 11a:	08 95       	ret
			
		break;
		
		case 32://Front
			s11=1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 63 00 	sts	0x0063, r24
			s12=0;
 122:	10 92 64 00 	sts	0x0064, r1
			s21=1;
 126:	80 93 65 00 	sts	0x0065, r24
			s22=0;
 12a:	10 92 66 00 	sts	0x0066, r1
			s31=1;
 12e:	80 93 6a 00 	sts	0x006A, r24
 132:	18 c0       	rjmp	.+48     	; 0x164 <MotorControlUpdate+0xd2>
			s32=0;
			cmd_old=cmd;
		break;
		
		case 33://Back
			s11=0;
 134:	10 92 63 00 	sts	0x0063, r1
			s12=1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 64 00 	sts	0x0064, r24
			s21=0;
 13e:	10 92 65 00 	sts	0x0065, r1
			s22=1;
 142:	80 93 66 00 	sts	0x0066, r24
			s31=0;
 146:	10 92 6a 00 	sts	0x006A, r1
			s32=1;
 14a:	80 93 6b 00 	sts	0x006B, r24
 14e:	23 c0       	rjmp	.+70     	; 0x196 <MotorControlUpdate+0x104>
			cmd_old=cmd;
		break;
		
		case 41://stop home remot
		case 59://stop robokit remot
			s11=0;
 150:	10 92 63 00 	sts	0x0063, r1
			s12=0;
 154:	10 92 64 00 	sts	0x0064, r1
			s21=0;
 158:	10 92 65 00 	sts	0x0065, r1
			s22=0;
 15c:	10 92 66 00 	sts	0x0066, r1
			s31=0;
 160:	10 92 6a 00 	sts	0x006A, r1
			s32=0;
 164:	10 92 6b 00 	sts	0x006B, r1
 168:	16 c0       	rjmp	.+44     	; 0x196 <MotorControlUpdate+0x104>
			cmd_old=cmd;
		break;
		
		case 0://Stop walking motors
			s11=0;
 16a:	10 92 63 00 	sts	0x0063, r1
			s12=0;
 16e:	10 92 64 00 	sts	0x0064, r1
			s21=0;
 172:	10 92 65 00 	sts	0x0065, r1
			s22=0;
 176:	10 92 66 00 	sts	0x0066, r1
			s31=0;
 17a:	10 92 6a 00 	sts	0x006A, r1
			s32=0;
 17e:	10 92 6b 00 	sts	0x006B, r1
		 m1=255;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	80 93 6c 00 	sts	0x006C, r24
		 m2=255;
 188:	80 93 6d 00 	sts	0x006D, r24
		 m3=180;
 18c:	84 eb       	ldi	r24, 0xB4	; 180
 18e:	80 93 62 00 	sts	0x0062, r24
		 lrwc=0;
 192:	10 92 77 00 	sts	0x0077, r1
		cmd_old=cmd;
 196:	80 91 74 00 	lds	r24, 0x0074
 19a:	80 93 75 00 	sts	0x0075, r24
 19e:	08 95       	ret
		break;
		
		case 1://Highest Speed
		 m1=45;
 1a0:	8d e2       	ldi	r24, 0x2D	; 45
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <MotorControlUpdate+0x11c>
		 m2=45;
		 m3=255;
		break;
		
		case 2://High Speed
		 m1=120;
 1a4:	88 e7       	ldi	r24, 0x78	; 120
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <MotorControlUpdate+0x11c>
		 m2=120;
		 m3=255;
		break;
		
		case 3://Normal Speed
		 m1=180;
 1a8:	84 eb       	ldi	r24, 0xB4	; 180
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <MotorControlUpdate+0x11c>
		 m2=180;
		 m3=255;
		break;
		
		case 4://Low Speed
		 m1=210;
 1ac:	82 ed       	ldi	r24, 0xD2	; 210
 1ae:	80 93 6c 00 	sts	0x006C, r24
		 m2=210;
 1b2:	80 93 6d 00 	sts	0x006D, r24
		 m3=255;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	80 93 62 00 	sts	0x0062, r24
 1bc:	08 95       	ret
		break;
		
		case 5://
		sbi(PORTD, 6);
 1be:	96 9a       	sbi	0x12, 6	; 18
		cmd=64;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	80 93 74 00 	sts	0x0074, r24
 1c6:	08 95       	ret
		break;
		
		case 6://
		cbi(PORTD, 6);
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		break;
		
		case 64://no command
		//cbi(PORTD, 6);
			s11=0;
 1cc:	10 92 63 00 	sts	0x0063, r1
			s12=0;
 1d0:	10 92 64 00 	sts	0x0064, r1
			s21=0;
 1d4:	10 92 65 00 	sts	0x0065, r1
			s22=0;
 1d8:	10 92 66 00 	sts	0x0066, r1
			s31=0;
 1dc:	10 92 6a 00 	sts	0x006A, r1
			s32=0;
 1e0:	10 92 6b 00 	sts	0x006B, r1
			cmd=cmd_old;
 1e4:	80 91 75 00 	lds	r24, 0x0075
 1e8:	80 93 74 00 	sts	0x0074, r24
 1ec:	52 cf       	rjmp	.-348    	; 0x92 <MotorControlUpdate>
 1ee:	08 95       	ret

000001f0 <__vector_5>:
-----------------------------------------------------------------*/
void MotorControlUpdate(void);
void MotorMOve(char lc, char rc);
//Timer2 OVERFLOW Interupt----------------------
SIGNAL(SIG_OVERFLOW2)     // signal handler for tcnt2 overflow interrupt
{//every 70.721usec here
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	char d;
	char lw;
	char rw;
	char lrw;
	c3p5++;
 212:	80 91 67 00 	lds	r24, 0x0067
 216:	90 91 68 00 	lds	r25, 0x0068
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 68 00 	sts	0x0068, r25
 220:	80 93 67 00 	sts	0x0067, r24
	pwmc++;
 224:	80 91 6e 00 	lds	r24, 0x006E
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 6e 00 	sts	0x006E, r24
    TCNT2 = TIMER_2_CNT; // reset counter to get this interrupt again
 22e:	8f eb       	ldi	r24, 0xBF	; 191
 230:	84 bd       	out	0x24, r24	; 36
	//Motor PWM Output------------------------------
	if(pwmc==0)
 232:	80 91 6e 00 	lds	r24, 0x006E
 236:	88 23       	and	r24, r24
 238:	a9 f4       	brne	.+42     	; 0x264 <__vector_5+0x74>
	{//every 18.1 mSec
		c131++;
 23a:	80 91 6f 00 	lds	r24, 0x006F
 23e:	90 91 70 00 	lds	r25, 0x0070
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 70 00 	sts	0x0070, r25
 248:	80 93 6f 00 	sts	0x006F, r24
		count++;
 24c:	80 91 69 00 	lds	r24, 0x0069
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 69 00 	sts	0x0069, r24
		sbi(PORTC,7);
 256:	af 9a       	sbi	0x15, 7	; 21
		sbi(PORTC,6);
 258:	ae 9a       	sbi	0x15, 6	; 21
		sbi(PORTC,5);
 25a:	ad 9a       	sbi	0x15, 5	; 21
		sbi(PORTC,4);
 25c:	ac 9a       	sbi	0x15, 4	; 21
		sbi(PORTC,3);
 25e:	ab 9a       	sbi	0x15, 3	; 21
		sbi(PORTC,2);
 260:	aa 9a       	sbi	0x15, 2	; 21
		cbi(PORTB,7); //IR LED ON
 262:	c7 98       	cbi	0x18, 7	; 24
		//max wheel RPM is 100 ie 600mSec/revolution or 150mSec/segment
	}
	//Motor Wheel Reader----------------------------
	if(pwmc==3)
 264:	80 91 6e 00 	lds	r24, 0x006E
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	09 f0       	breq	.+2      	; 0x26e <__vector_5+0x7e>
 26c:	47 c0       	rjmp	.+142    	; 0x2fc <__vector_5+0x10c>
	{//every 18.1 mSec
	lw = bit_is_clear(PINB, 5);//Lssx 	xxxx
 26e:	86 b3       	in	r24, 0x16	; 22
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	65 e0       	ldi	r22, 0x05	; 5
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	6a 95       	dec	r22
 27a:	e1 f7       	brne	.-8      	; 0x274 <__vector_5+0x84>
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	82 27       	eor	r24, r18
 282:	93 27       	eor	r25, r19
 284:	48 2f       	mov	r20, r24
 286:	41 70       	andi	r20, 0x01	; 1
	rw = bit_is_clear(PINB, 6);
 288:	86 b3       	in	r24, 0x16	; 22
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	56 e0       	ldi	r21, 0x06	; 6
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	5a 95       	dec	r21
 294:	e1 f7       	brne	.-8      	; 0x28e <__vector_5+0x9e>
 296:	82 27       	eor	r24, r18
 298:	93 27       	eor	r25, r19
 29a:	98 2f       	mov	r25, r24
 29c:	91 70       	andi	r25, 0x01	; 1
	lrw = lw;
    lrw = lrw << 1;
 29e:	24 2f       	mov	r18, r20
 2a0:	22 0f       	add	r18, r18
    lrw = lrw + rw;
 2a2:	29 0f       	add	r18, r25
	
	sbi(PORTB, 7); //IR LED OFF
 2a4:	c7 9a       	sbi	0x18, 7	; 24
		if(lw!=lwo)
 2a6:	80 91 78 00 	lds	r24, 0x0078
 2aa:	48 17       	cp	r20, r24
 2ac:	39 f0       	breq	.+14     	; 0x2bc <__vector_5+0xcc>
		{
			lwc++;
 2ae:	80 91 79 00 	lds	r24, 0x0079
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 79 00 	sts	0x0079, r24
			lwo=lw;
 2b8:	40 93 78 00 	sts	0x0078, r20
		}
		if(rw!=rwo)
 2bc:	80 91 7a 00 	lds	r24, 0x007A
 2c0:	98 17       	cp	r25, r24
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <__vector_5+0xe2>
		{
		  rwc++;
 2c4:	80 91 7b 00 	lds	r24, 0x007B
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 93 7b 00 	sts	0x007B, r24
			rwo=rw;
 2ce:	90 93 7a 00 	sts	0x007A, r25
		}
		
		if(lrw==lrwo)
 2d2:	80 91 76 00 	lds	r24, 0x0076
 2d6:	28 17       	cp	r18, r24
 2d8:	69 f4       	brne	.+26     	; 0x2f4 <__vector_5+0x104>
		{
		  lrwc++;
 2da:	80 91 77 00 	lds	r24, 0x0077
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 77 00 	sts	0x0077, r24
			if(lrwc>200) //No rotation > 3.62 Sec
 2e4:	80 91 77 00 	lds	r24, 0x0077
 2e8:	89 3c       	cpi	r24, 0xC9	; 201
 2ea:	40 f0       	brcs	.+16     	; 0x2fc <__vector_5+0x10c>
			{
				lrwc=200;
 2ec:	88 ec       	ldi	r24, 0xC8	; 200
 2ee:	80 93 77 00 	sts	0x0077, r24
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <__vector_5+0x10c>
			}
		}
		else
		{//Yes Wheel rotating
			lrwc=0;
 2f4:	10 92 77 00 	sts	0x0077, r1
			lrwo=lrw;
 2f8:	20 93 76 00 	sts	0x0076, r18
		}
	}
	//Motor Motion Control-1--------------------------
	if(pwmc==4)
 2fc:	80 91 6e 00 	lds	r24, 0x006E
	{//every 18.1 mSec
	}
	//Motor Motion Control-2--------------------------
	if(pwmc==5)
 300:	80 91 6e 00 	lds	r24, 0x006E
 304:	85 30       	cpi	r24, 0x05	; 5
 306:	11 f4       	brne	.+4      	; 0x30c <__vector_5+0x11c>
	{//every 18.1 mSec
	  MotorControlUpdate();
 308:	0e 94 49 00 	call	0x92	; 0x92 <MotorControlUpdate>
	}
	//Motor PWM Output------------------------------
	if(pwmc==m1)
 30c:	90 91 6e 00 	lds	r25, 0x006E
 310:	80 91 6c 00 	lds	r24, 0x006C
 314:	98 17       	cp	r25, r24
 316:	51 f4       	brne	.+20     	; 0x32c <__vector_5+0x13c>
	{
	 if(s11==1) cbi(PORTC,7);
 318:	80 91 63 00 	lds	r24, 0x0063
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	09 f4       	brne	.+2      	; 0x322 <__vector_5+0x132>
 320:	af 98       	cbi	0x15, 7	; 21
	 if(s12==1) cbi(PORTC,6);
 322:	80 91 64 00 	lds	r24, 0x0064
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	09 f4       	brne	.+2      	; 0x32c <__vector_5+0x13c>
 32a:	ae 98       	cbi	0x15, 6	; 21
	}
	if(pwmc==m2)
 32c:	90 91 6e 00 	lds	r25, 0x006E
 330:	80 91 6d 00 	lds	r24, 0x006D
 334:	98 17       	cp	r25, r24
 336:	51 f4       	brne	.+20     	; 0x34c <__vector_5+0x15c>
	{
	 if(s21==1) cbi(PORTC,5);
 338:	80 91 65 00 	lds	r24, 0x0065
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	09 f4       	brne	.+2      	; 0x342 <__vector_5+0x152>
 340:	ad 98       	cbi	0x15, 5	; 21
	 if(s22==1) cbi(PORTC,4);
 342:	80 91 66 00 	lds	r24, 0x0066
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	09 f4       	brne	.+2      	; 0x34c <__vector_5+0x15c>
 34a:	ac 98       	cbi	0x15, 4	; 21
	}
	if(pwmc==m3)
 34c:	90 91 6e 00 	lds	r25, 0x006E
 350:	80 91 62 00 	lds	r24, 0x0062
 354:	98 17       	cp	r25, r24
 356:	19 f5       	brne	.+70     	; 0x39e <__vector_5+0x1ae>
	{
	 if(s31==1) cbi(PORTC,3);
 358:	80 91 6a 00 	lds	r24, 0x006A
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f4       	brne	.+2      	; 0x362 <__vector_5+0x172>
 360:	ab 98       	cbi	0x15, 3	; 21
	 if(s32==1) cbi(PORTC,2);
 362:	80 91 6b 00 	lds	r24, 0x006B
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	09 f4       	brne	.+2      	; 0x36c <__vector_5+0x17c>
 36a:	aa 98       	cbi	0x15, 2	; 21
		if(bit_is_clear(PINA,2))
 36c:	ca 99       	sbic	0x19, 2	; 25
 36e:	15 c0       	rjmp	.+42     	; 0x39a <__vector_5+0x1aa>
		{
		count++;
 370:	80 91 69 00 	lds	r24, 0x0069
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 69 00 	sts	0x0069, r24
		if(count<10)
 37a:	80 91 69 00 	lds	r24, 0x0069
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	40 f4       	brcc	.+16     	; 0x392 <__vector_5+0x1a2>
			{
			m3=255;
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	80 93 62 00 	sts	0x0062, r24
			s31=0;
 388:	10 92 6a 00 	sts	0x006A, r1
			s32=0;
 38c:	10 92 6b 00 	sts	0x006B, r1
 390:	06 c0       	rjmp	.+12     	; 0x39e <__vector_5+0x1ae>
			}
			else
			{
			count=10;
 392:	8a e0       	ldi	r24, 0x0A	; 10
 394:	80 93 69 00 	sts	0x0069, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <__vector_5+0x1ae>
			}
		}
		else
		{
		count=0;
 39a:	10 92 69 00 	sts	0x0069, r1
		}
	}
	//IR-Remote Decoder ----------------------------
	if(irMode==0)//Idle
 39e:	80 91 61 00 	lds	r24, 0x0061
 3a2:	88 23       	and	r24, r24
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_5+0x1b8>
 3a6:	bc c0       	rjmp	.+376    	; 0x520 <__vector_5+0x330>
	{
		return;
	}
	//IR-Remote Decoder ----------------------------
	if(irMode==1)//Get start frame first mid-bit
 3a8:	20 91 61 00 	lds	r18, 0x0061
 3ac:	21 30       	cpi	r18, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__vector_5+0x1c2>
 3b0:	4e c0       	rjmp	.+156    	; 0x44e <__vector_5+0x25e>
	{
		if(irState==0)//detect sylence for 3.5mSec
 3b2:	80 91 60 00 	lds	r24, 0x0060
 3b6:	88 23       	and	r24, r24
 3b8:	61 f4       	brne	.+24     	; 0x3d2 <__vector_5+0x1e2>
		{//
			c3p5=0;
 3ba:	10 92 68 00 	sts	0x0068, r1
 3be:	10 92 67 00 	sts	0x0067, r1
			irState=1;
 3c2:	20 93 60 00 	sts	0x0060, r18
			d_old=bit_is_clear(PINA,0);
 3c6:	89 b3       	in	r24, 0x19	; 25
 3c8:	80 95       	com	r24
 3ca:	81 70       	andi	r24, 0x01	; 1
 3cc:	80 93 73 00 	sts	0x0073, r24
 3d0:	a7 c0       	rjmp	.+334    	; 0x520 <__vector_5+0x330>
			return;
		}
		if(irState==1)
 3d2:	80 91 60 00 	lds	r24, 0x0060
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	c9 f4       	brne	.+50     	; 0x40c <__vector_5+0x21c>
		{
			d=bit_is_clear(PINA,0);
 3da:	89 b3       	in	r24, 0x19	; 25
			if(d_old==d)
 3dc:	90 91 73 00 	lds	r25, 0x0073
 3e0:	80 95       	com	r24
 3e2:	81 70       	andi	r24, 0x01	; 1
 3e4:	98 17       	cp	r25, r24
 3e6:	79 f4       	brne	.+30     	; 0x406 <__vector_5+0x216>
			{
				if(c3p5>49)
 3e8:	80 91 67 00 	lds	r24, 0x0067
 3ec:	90 91 68 00 	lds	r25, 0x0068
 3f0:	c2 97       	sbiw	r24, 0x32	; 50
 3f2:	0c f4       	brge	.+2      	; 0x3f6 <__vector_5+0x206>
 3f4:	95 c0       	rjmp	.+298    	; 0x520 <__vector_5+0x330>
				{//sylence for 3.5 mSec
					irState=2;//now detect first transition
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	80 93 60 00 	sts	0x0060, r24
					c131=0;
 3fc:	10 92 70 00 	sts	0x0070, r1
 400:	10 92 6f 00 	sts	0x006F, r1
 404:	8d c0       	rjmp	.+282    	; 0x520 <__vector_5+0x330>
				}
			}
			else
			{
				irState=0;
 406:	10 92 60 00 	sts	0x0060, r1
 40a:	8a c0       	rjmp	.+276    	; 0x520 <__vector_5+0x330>
			}
			
			return;
		}
		if(irState==2)
 40c:	30 91 60 00 	lds	r19, 0x0060
 410:	32 30       	cpi	r19, 0x02	; 2
 412:	e9 f4       	brne	.+58     	; 0x44e <__vector_5+0x25e>
		{
			d=bit_is_clear(PINA,0);
 414:	89 b3       	in	r24, 0x19	; 25
			if(d_old!=d)
 416:	90 91 73 00 	lds	r25, 0x0073
 41a:	80 95       	com	r24
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	98 17       	cp	r25, r24
 420:	69 f0       	breq	.+26     	; 0x43c <__vector_5+0x24c>
			{//first transition detected
				irState=1;
 422:	20 93 60 00 	sts	0x0060, r18
				c3p5=0;
 426:	10 92 68 00 	sts	0x0068, r1
 42a:	10 92 67 00 	sts	0x0067, r1
				irDt=0;//reset frame data
 42e:	10 92 72 00 	sts	0x0072, r1
 432:	10 92 71 00 	sts	0x0071, r1
				irMode=2;//go to frame read
 436:	30 93 61 00 	sts	0x0061, r19
 43a:	72 c0       	rjmp	.+228    	; 0x520 <__vector_5+0x330>
			}
			else
			{
				if(c131>8)//144 mSec
 43c:	80 91 6f 00 	lds	r24, 0x006F
 440:	90 91 70 00 	lds	r25, 0x0070
 444:	09 97       	sbiw	r24, 0x09	; 9
 446:	0c f4       	brge	.+2      	; 0x44a <__vector_5+0x25a>
 448:	6b c0       	rjmp	.+214    	; 0x520 <__vector_5+0x330>
				{//70.721*256*8=144
					cmd=64;
 44a:	80 e4       	ldi	r24, 0x40	; 64
 44c:	41 c0       	rjmp	.+130    	; 0x4d0 <__vector_5+0x2e0>
			}
			return;
		}
	}
	//IR-Remote Decoder ----------------------------
	if(irMode==2)
 44e:	80 91 61 00 	lds	r24, 0x0061
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	09 f0       	breq	.+2      	; 0x458 <__vector_5+0x268>
 456:	64 c0       	rjmp	.+200    	; 0x520 <__vector_5+0x330>
	{
		if(irState==0)
 458:	80 91 60 00 	lds	r24, 0x0060
 45c:	88 23       	and	r24, r24
 45e:	d9 f5       	brne	.+118    	; 0x4d6 <__vector_5+0x2e6>
		{//detect mid-bit transition
			d=bit_is_clear(PINA,0);
 460:	99 b3       	in	r25, 0x19	; 25
 462:	90 95       	com	r25
 464:	91 70       	andi	r25, 0x01	; 1
			if(d_old!=d)
 466:	80 91 73 00 	lds	r24, 0x0073
 46a:	89 17       	cp	r24, r25
 46c:	51 f0       	breq	.+20     	; 0x482 <__vector_5+0x292>
			{//data changed
				d_old=d;
 46e:	90 93 73 00 	sts	0x0073, r25
				irState=1; 
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 60 00 	sts	0x0060, r24
				c3p5=0;
 478:	10 92 68 00 	sts	0x0068, r1
 47c:	10 92 67 00 	sts	0x0067, r1
 480:	4f c0       	rjmp	.+158    	; 0x520 <__vector_5+0x330>
				return;
			}
			if(c3p5>49)//3.5mSec
 482:	80 91 67 00 	lds	r24, 0x0067
 486:	90 91 68 00 	lds	r25, 0x0068
 48a:	c2 97       	sbiw	r24, 0x32	; 50
 48c:	0c f4       	brge	.+2      	; 0x490 <__vector_5+0x2a0>
 48e:	48 c0       	rjmp	.+144    	; 0x520 <__vector_5+0x330>
			{//no data in 2 bit period; end of frame
			 irState=1;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 60 00 	sts	0x0060, r24
			 irMode=0;
 496:	10 92 61 00 	sts	0x0061, r1
			 irDt = irDt>>1;
 49a:	80 91 71 00 	lds	r24, 0x0071
 49e:	90 91 72 00 	lds	r25, 0x0072
 4a2:	95 95       	asr	r25
 4a4:	87 95       	ror	r24
 4a6:	90 93 72 00 	sts	0x0072, r25
 4aa:	80 93 71 00 	sts	0x0071, r24
			 irDt=255-irDt;
 4ae:	20 91 71 00 	lds	r18, 0x0071
 4b2:	30 91 72 00 	lds	r19, 0x0072
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	82 1b       	sub	r24, r18
 4bc:	93 0b       	sbc	r25, r19
 4be:	90 93 72 00 	sts	0x0072, r25
 4c2:	80 93 71 00 	sts	0x0071, r24
			 cmd=irDt & 0x3f;
 4c6:	80 91 71 00 	lds	r24, 0x0071
 4ca:	90 91 72 00 	lds	r25, 0x0072
 4ce:	8f 73       	andi	r24, 0x3F	; 63
 4d0:	80 93 74 00 	sts	0x0074, r24
 4d4:	25 c0       	rjmp	.+74     	; 0x520 <__vector_5+0x330>
			 		//sbi(PORTD, 6);

			}
			return;
		}		
		if(irState==1)
 4d6:	80 91 60 00 	lds	r24, 0x0060
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	09 f5       	brne	.+66     	; 0x520 <__vector_5+0x330>
		{
			if(c3p5>16)
 4de:	80 91 67 00 	lds	r24, 0x0067
 4e2:	90 91 68 00 	lds	r25, 0x0068
 4e6:	41 97       	sbiw	r24, 0x11	; 17
 4e8:	dc f0       	brlt	.+54     	; 0x520 <__vector_5+0x330>
			{//skip bit boundary
				irState=0;
 4ea:	10 92 60 00 	sts	0x0060, r1
				d=bit_is_clear(PINA,0);
 4ee:	89 b3       	in	r24, 0x19	; 25
 4f0:	80 95       	com	r24
 4f2:	81 70       	andi	r24, 0x01	; 1
				d_old=d;
 4f4:	80 93 73 00 	sts	0x0073, r24
				irDt=irDt<<1;
 4f8:	20 91 71 00 	lds	r18, 0x0071
 4fc:	30 91 72 00 	lds	r19, 0x0072
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	30 93 72 00 	sts	0x0072, r19
 508:	20 93 71 00 	sts	0x0071, r18
				irDt=irDt+d;
 50c:	20 91 71 00 	lds	r18, 0x0071
 510:	30 91 72 00 	lds	r19, 0x0072
 514:	28 0f       	add	r18, r24
 516:	31 1d       	adc	r19, r1
 518:	30 93 72 00 	sts	0x0072, r19
 51c:	20 93 71 00 	sts	0x0071, r18
			}
		}
		return;
	}
	//---------------------------------------------
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <MotorMOve>:
		break;
		}
}
//Move Robot-----------------------------------
void MotorMOve(char lc, char rc)
{
 542:	08 95       	ret

00000544 <main>:

}
//-----------------MAIN-------------------------------------
int main(void)
{
 544:	1a ba       	out	0x1a, r1	; 26
	DDRA=0x00;				//set port A as input port all bits.
	DDRB=0x80;				//set port B as input 0-6 output 7.
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;				//Set Port C as output port all bits.
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	84 bb       	out	0x14, r24	; 20
	DDRD=0xF0;				//(Not Used) Set Port D as PD7-4 as output bits.
 54e:	80 ef       	ldi	r24, 0xF0	; 240
 550:	81 bb       	out	0x11, r24	; 17
	
	TCCR2 = TMC8_CK8;               	
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 556:	8f eb       	ldi	r24, 0xBF	; 191
 558:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 55e:	78 94       	sei
	irState=0;
 560:	10 92 60 00 	sts	0x0060, r1
	irMode=1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 61 00 	sts	0x0061, r24
	PORTC = 0xff;
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	85 bb       	out	0x15, r24	; 21
			if((s11 != s12) | (s21 != s22))
			{//Both Wheels Stuck
			switch(cmd_old)
			{
			case 32:
			 cmd_old=33;
 56e:	61 e2       	ldi	r22, 0x21	; 33
			 break;
			case 33:
			 cmd_old=32;
 570:	50 e2       	ldi	r21, 0x20	; 32
			else
			{
				if(c3p5>5000)
				{
					c3p5=0;
					irMode=1;
 572:	41 e0       	ldi	r20, 0x01	; 1
	PORTC = 0xff;
//==================================	
	for(;;)
	{
	//Robot Wheels Not Moving-----------------------
		if(lrwc==200)
 574:	80 91 77 00 	lds	r24, 0x0077
 578:	88 3c       	cpi	r24, 0xC8	; 200
 57a:	f9 f4       	brne	.+62     	; 0x5ba <main+0x76>
		{//Robot stuck for 3.62 Sec
		if(m3==255)
 57c:	80 91 62 00 	lds	r24, 0x0062
 580:	8f 3f       	cpi	r24, 0xFF	; 255
 582:	c9 f4       	brne	.+50     	; 0x5b6 <main+0x72>
			if((s11 != s12) | (s21 != s22))
 584:	90 91 63 00 	lds	r25, 0x0063
 588:	80 91 64 00 	lds	r24, 0x0064
 58c:	30 91 65 00 	lds	r19, 0x0065
 590:	20 91 66 00 	lds	r18, 0x0066
 594:	98 17       	cp	r25, r24
 596:	11 f4       	brne	.+4      	; 0x59c <main+0x58>
 598:	32 17       	cp	r19, r18
 59a:	69 f0       	breq	.+26     	; 0x5b6 <main+0x72>
			{//Both Wheels Stuck
			switch(cmd_old)
 59c:	80 91 75 00 	lds	r24, 0x0075
 5a0:	80 32       	cpi	r24, 0x20	; 32
 5a2:	19 f0       	breq	.+6      	; 0x5aa <main+0x66>
 5a4:	81 32       	cpi	r24, 0x21	; 33
 5a6:	31 f4       	brne	.+12     	; 0x5b4 <main+0x70>
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <main+0x6c>
			{
			case 32:
			 cmd_old=33;
 5aa:	60 93 75 00 	sts	0x0075, r22
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <main+0x70>
			 break;
			case 33:
			 cmd_old=32;
 5b0:	50 93 75 00 	sts	0x0075, r21
			 break;
			 }
		sbi(PORTD, 6);
 5b4:	96 9a       	sbi	0x12, 6	; 18
			 s12=tmp;
			 tmp = s21;
			 s21=s22;
			 s22=tmp;
*/			 
			 lrwc=0;
 5b6:	10 92 77 00 	sts	0x0077, r1
//			 MotorControlUpdate();
		}
	//IR-Remote--------------------------------------
		if(irMode==0)
 5ba:	80 91 61 00 	lds	r24, 0x0061
 5be:	88 23       	and	r24, r24
 5c0:	c9 f6       	brne	.-78     	; 0x574 <main+0x30>
		{
			if(irState==1)
 5c2:	80 91 60 00 	lds	r24, 0x0060
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <main+0x8c>
			{
				irMode=1;
 5ca:	80 93 61 00 	sts	0x0061, r24
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <main+0xa6>
				irState=0;
			}
			else
			{
				if(c3p5>5000)
 5d0:	80 91 67 00 	lds	r24, 0x0067
 5d4:	90 91 68 00 	lds	r25, 0x0068
 5d8:	89 58       	subi	r24, 0x89	; 137
 5da:	93 41       	sbci	r25, 0x13	; 19
 5dc:	5c f2       	brlt	.-106    	; 0x574 <main+0x30>
				{
					c3p5=0;
 5de:	10 92 68 00 	sts	0x0068, r1
 5e2:	10 92 67 00 	sts	0x0067, r1
					irMode=1;
 5e6:	40 93 61 00 	sts	0x0061, r20
					irState=0;
 5ea:	10 92 60 00 	sts	0x0060, r1
 5ee:	c2 cf       	rjmp	.-124    	; 0x574 <main+0x30>

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
