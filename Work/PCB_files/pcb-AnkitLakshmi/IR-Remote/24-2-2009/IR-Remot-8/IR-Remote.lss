
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000eb  00000000  00000000  000001b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000079  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f0  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007d  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
								// TIMER OVERFLOW ON 255-191 = 64 COUNTSd
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/
SIGNAL(SIG_OVERFLOW0)     // signal handler for tcnt2 overflow interrupt
{//every 70.721usec here
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
sbi(PORTB,2);
  9e:	c2 9a       	sbi	0x18, 2	; 24
	TCNT0 = TIMER_2_CNT;
  a0:	83 e1       	ldi	r24, 0x13	; 19
  a2:	82 bf       	out	0x32, r24	; 50
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:
int main(void)
{
	//DDRA=0x00;			//set port A as input port all bits.
	//DDRC=0xFF;			//Set Port C as output port all bits.
	
	DDRC=0x00;			//Set Port C as input port all bits.
  b0:	14 ba       	out	0x14, r1	; 20
	DDRB=0XC7;			//SET DATA DIRECTION REGISTER
  b2:	87 ec       	ldi	r24, 0xC7	; 199
  b4:	87 bb       	out	0x17, r24	; 23
	DDRD=0XF1;			//SET DATA DIRECTION REGISTER
  b6:	81 ef       	ldi	r24, 0xF1	; 241
  b8:	81 bb       	out	0x11, r24	; 17
	
	
	TIMSK  = _BV(TOIE0);         	// enable TCNT1 overflow 
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	89 bf       	out	0x39, r24	; 57
	TCCR0 = TMC8_CK8;               	
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	83 bf       	out	0x33, r24	; 51
    TCNT0  = TIMER_2_CNT;        	// reset TCNT1
  c2:	83 e1       	ldi	r24, 0x13	; 19
  c4:	82 bf       	out	0x32, r24	; 50
    
   sei();                       	// enable interrupts
  c6:	78 94       	sei
  c8:	1b c0       	rjmp	.+54     	; 0x100 <main+0x50>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
	for(;;)
	{
		for(int m=0;m<100;m++)
		for(int n=0;n<10000;n++)
		{
		sbi(PORTB,1);
  ce:	c1 9a       	sbi	0x18, 1	; 24
		cbi(PORTD,0);
  d0:	90 98       	cbi	0x12, 0	; 18
    
   sei();                       	// enable interrupts
	for(;;)
	{
		for(int m=0;m<100;m++)
		for(int n=0;n<10000;n++)
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	47 e2       	ldi	r20, 0x27	; 39
  d6:	80 31       	cpi	r24, 0x10	; 16
  d8:	94 07       	cpc	r25, r20
  da:	c9 f7       	brne	.-14     	; 0xce <main+0x1e>
    TCNT0  = TIMER_2_CNT;        	// reset TCNT1
    
   sei();                       	// enable interrupts
	for(;;)
	{
		for(int m=0;m<100;m++)
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	24 36       	cpi	r18, 0x64	; 100
  e2:	31 05       	cpc	r19, r1
  e4:	94 f3       	brlt	.-28     	; 0xca <main+0x1a>
  e6:	0f c0       	rjmp	.+30     	; 0x106 <main+0x56>
		cbi(PORTD,0);
		}
		for(int m=0;m<100;m++)
		for(int n=0;n<10000;n++)
		{
		cbi(PORTB,1);
  e8:	c1 98       	cbi	0x18, 1	; 24
		sbi(PORTD,0);
  ea:	90 9a       	sbi	0x12, 0	; 18
		{
		sbi(PORTB,1);
		cbi(PORTD,0);
		}
		for(int m=0;m<100;m++)
		for(int n=0;n<10000;n++)
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	47 e2       	ldi	r20, 0x27	; 39
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	94 07       	cpc	r25, r20
  f4:	c9 f7       	brne	.-14     	; 0xe8 <main+0x38>
		for(int n=0;n<10000;n++)
		{
		sbi(PORTB,1);
		cbi(PORTD,0);
		}
		for(int m=0;m<100;m++)
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	24 36       	cpi	r18, 0x64	; 100
  fc:	31 05       	cpc	r19, r1
  fe:	29 f4       	brne	.+10     	; 0x10a <main+0x5a>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	ed cf       	rjmp	.-38     	; 0xe0 <main+0x30>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ec cf       	rjmp	.-40     	; 0xe8 <main+0x38>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
