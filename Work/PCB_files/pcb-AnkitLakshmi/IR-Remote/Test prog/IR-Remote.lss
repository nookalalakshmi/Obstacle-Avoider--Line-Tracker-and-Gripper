
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800060  00800060  00000322  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002a  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000026c  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000126  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000322  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d9  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b4  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  8a:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
								// TIMER OVERFLOW ON 255-191 = 64 COUNTSd
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/
SIGNAL(SIG_OVERFLOW2)     // signal handler for tcnt2 overflow interrupt
{//every 70.721usec here
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	char d;
	c3p5++;
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	90 91 61 00 	lds	r25, 0x0061
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25
  b2:	80 93 60 00 	sts	0x0060, r24
	pwmc++;
  b6:	80 91 62 00 	lds	r24, 0x0062
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 62 00 	sts	0x0062, r24
    TCNT2 = TIMER_2_CNT; // reset counter to get this interrupt again
  c0:	8f eb       	ldi	r24, 0xBF	; 191
  c2:	84 bd       	out	0x24, r24	; 36
	//---------------------------------------------
	if(pwmc==0)
  c4:	80 91 62 00 	lds	r24, 0x0062
  c8:	88 23       	and	r24, r24
  ca:	21 f4       	brne	.+8      	; 0xd4 <__vector_5+0x42>
	{
		sbi(PORTC,7);
  cc:	af 9a       	sbi	0x15, 7	; 21
		sbi(PORTC,6);
  ce:	ae 9a       	sbi	0x15, 6	; 21
		sbi(PORTC,5);
  d0:	ad 9a       	sbi	0x15, 5	; 21
		sbi(PORTC,4);
  d2:	ac 9a       	sbi	0x15, 4	; 21
	}
	if(pwmc==m1)
  d4:	90 91 62 00 	lds	r25, 0x0062
  d8:	80 91 63 00 	lds	r24, 0x0063
  dc:	98 17       	cp	r25, r24
  de:	51 f4       	brne	.+20     	; 0xf4 <__vector_5+0x62>
	{
	 if(s11==1) cbi(PORTC,7);
  e0:	80 91 64 00 	lds	r24, 0x0064
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	09 f4       	brne	.+2      	; 0xea <__vector_5+0x58>
  e8:	af 98       	cbi	0x15, 7	; 21
	 if(s12==1) cbi(PORTC,6);
  ea:	80 91 65 00 	lds	r24, 0x0065
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	09 f4       	brne	.+2      	; 0xf4 <__vector_5+0x62>
  f2:	ae 98       	cbi	0x15, 6	; 21
	}
	if(pwmc==m2)
  f4:	90 91 62 00 	lds	r25, 0x0062
  f8:	80 91 66 00 	lds	r24, 0x0066
  fc:	98 17       	cp	r25, r24
  fe:	51 f4       	brne	.+20     	; 0x114 <__vector_5+0x82>
	{
	 if(s21==1) cbi(PORTC,5);
 100:	80 91 67 00 	lds	r24, 0x0067
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	09 f4       	brne	.+2      	; 0x10a <__vector_5+0x78>
 108:	ad 98       	cbi	0x15, 5	; 21
	 if(s22==1) cbi(PORTC,4);
 10a:	80 91 68 00 	lds	r24, 0x0068
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f4       	brne	.+2      	; 0x114 <__vector_5+0x82>
 112:	ac 98       	cbi	0x15, 4	; 21
	}
	if(mode==0)//Idle
 114:	80 91 69 00 	lds	r24, 0x0069
 118:	88 23       	and	r24, r24
 11a:	09 f4       	brne	.+2      	; 0x11e <__vector_5+0x8c>
 11c:	a4 c0       	rjmp	.+328    	; 0x266 <__vector_5+0x1d4>
	{
		return;
	}
	
	if(mode==1)//Get start frame first mid-bit
 11e:	20 91 69 00 	lds	r18, 0x0069
 122:	21 30       	cpi	r18, 0x01	; 1
 124:	09 f0       	breq	.+2      	; 0x128 <__vector_5+0x96>
 126:	42 c0       	rjmp	.+132    	; 0x1ac <__vector_5+0x11a>
	{
		if(state==0)//detect sylence for 3.5mSec
 128:	80 91 6a 00 	lds	r24, 0x006A
 12c:	88 23       	and	r24, r24
 12e:	61 f4       	brne	.+24     	; 0x148 <__vector_5+0xb6>
		{//
			c3p5=0;
 130:	10 92 61 00 	sts	0x0061, r1
 134:	10 92 60 00 	sts	0x0060, r1
			state=1;
 138:	20 93 6a 00 	sts	0x006A, r18
			d_old=bit_is_clear(PINA,0);
 13c:	89 b3       	in	r24, 0x19	; 25
 13e:	80 95       	com	r24
 140:	81 70       	andi	r24, 0x01	; 1
 142:	80 93 6d 00 	sts	0x006D, r24
 146:	8f c0       	rjmp	.+286    	; 0x266 <__vector_5+0x1d4>
			return;
		}
		if(state==1)
 148:	80 91 6a 00 	lds	r24, 0x006A
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	a9 f4       	brne	.+42     	; 0x17a <__vector_5+0xe8>
		{
			d=bit_is_clear(PINA,0);
 150:	89 b3       	in	r24, 0x19	; 25
			if(d_old==d)
 152:	90 91 6d 00 	lds	r25, 0x006D
 156:	80 95       	com	r24
 158:	81 70       	andi	r24, 0x01	; 1
 15a:	98 17       	cp	r25, r24
 15c:	59 f4       	brne	.+22     	; 0x174 <__vector_5+0xe2>
			{
				if(c3p5>49)
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	90 91 61 00 	lds	r25, 0x0061
 166:	c2 97       	sbiw	r24, 0x32	; 50
 168:	0c f4       	brge	.+2      	; 0x16c <__vector_5+0xda>
 16a:	7d c0       	rjmp	.+250    	; 0x266 <__vector_5+0x1d4>
				{//sylence for 3.5 mSec
					state=2;//now detect first transition
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 6a 00 	sts	0x006A, r24
 172:	79 c0       	rjmp	.+242    	; 0x266 <__vector_5+0x1d4>
				}
			}
			else
			{
				state=0;
 174:	10 92 6a 00 	sts	0x006A, r1
 178:	76 c0       	rjmp	.+236    	; 0x266 <__vector_5+0x1d4>
			}
			
			return;
		}
		if(state==2)
 17a:	30 91 6a 00 	lds	r19, 0x006A
 17e:	32 30       	cpi	r19, 0x02	; 2
 180:	a9 f4       	brne	.+42     	; 0x1ac <__vector_5+0x11a>
		{
			d=bit_is_clear(PINA,0);
 182:	89 b3       	in	r24, 0x19	; 25
			if(d_old!=d)
 184:	90 91 6d 00 	lds	r25, 0x006D
 188:	80 95       	com	r24
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	98 17       	cp	r25, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <__vector_5+0x100>
 190:	6a c0       	rjmp	.+212    	; 0x266 <__vector_5+0x1d4>
			{//first transition detected
				state=1;
 192:	20 93 6a 00 	sts	0x006A, r18
				c3p5=0;
 196:	10 92 61 00 	sts	0x0061, r1
 19a:	10 92 60 00 	sts	0x0060, r1
				dt=0;//reset frame data
 19e:	10 92 6c 00 	sts	0x006C, r1
 1a2:	10 92 6b 00 	sts	0x006B, r1
				mode=2;//go to frame read
 1a6:	30 93 69 00 	sts	0x0069, r19
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <__vector_5+0x1d4>
			}
			return;
		}
	}
	//---------------------------------------------
	if(mode==2)
 1ac:	80 91 69 00 	lds	r24, 0x0069
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <__vector_5+0x124>
 1b4:	58 c0       	rjmp	.+176    	; 0x266 <__vector_5+0x1d4>
	{
		if(state==0)
 1b6:	80 91 6a 00 	lds	r24, 0x006A
 1ba:	88 23       	and	r24, r24
 1bc:	79 f5       	brne	.+94     	; 0x21c <__vector_5+0x18a>
		{//detect mid-bit transition
			d=bit_is_clear(PINA,0);
 1be:	99 b3       	in	r25, 0x19	; 25
 1c0:	90 95       	com	r25
 1c2:	91 70       	andi	r25, 0x01	; 1
			if(d_old!=d)
 1c4:	80 91 6d 00 	lds	r24, 0x006D
 1c8:	89 17       	cp	r24, r25
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <__vector_5+0x14e>
			{//data changed
				d_old=d;
 1cc:	90 93 6d 00 	sts	0x006D, r25
				state=1; 
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 6a 00 	sts	0x006A, r24
				c3p5=0;
 1d6:	10 92 61 00 	sts	0x0061, r1
 1da:	10 92 60 00 	sts	0x0060, r1
 1de:	43 c0       	rjmp	.+134    	; 0x266 <__vector_5+0x1d4>
				return;
			}
			if(c3p5>49)//3.5mSec
 1e0:	80 91 60 00 	lds	r24, 0x0060
 1e4:	90 91 61 00 	lds	r25, 0x0061
 1e8:	c2 97       	sbiw	r24, 0x32	; 50
 1ea:	ec f1       	brlt	.+122    	; 0x266 <__vector_5+0x1d4>
			{//no data in 2 bit period; end of frame
			 state=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 6a 00 	sts	0x006A, r24
			 mode=0;
 1f2:	10 92 69 00 	sts	0x0069, r1
			 cmd = dt>>1;
 1f6:	80 91 6b 00 	lds	r24, 0x006B
 1fa:	90 91 6c 00 	lds	r25, 0x006C
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	80 93 6e 00 	sts	0x006E, r24
			 cmd=255-cmd;
 206:	80 91 6e 00 	lds	r24, 0x006E
 20a:	80 95       	com	r24
 20c:	80 93 6e 00 	sts	0x006E, r24
			 cmd=cmd & 0x3f;
 210:	80 91 6e 00 	lds	r24, 0x006E
 214:	8f 73       	andi	r24, 0x3F	; 63
 216:	80 93 6e 00 	sts	0x006E, r24
 21a:	25 c0       	rjmp	.+74     	; 0x266 <__vector_5+0x1d4>
			 
				//PORTC = 0x02;
			}
			return;
		}		
		if(state==1)
 21c:	80 91 6a 00 	lds	r24, 0x006A
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	09 f5       	brne	.+66     	; 0x266 <__vector_5+0x1d4>
		{
			if(c3p5>16)
 224:	80 91 60 00 	lds	r24, 0x0060
 228:	90 91 61 00 	lds	r25, 0x0061
 22c:	41 97       	sbiw	r24, 0x11	; 17
 22e:	dc f0       	brlt	.+54     	; 0x266 <__vector_5+0x1d4>
			{//skip bit boundary
				state=0;
 230:	10 92 6a 00 	sts	0x006A, r1
				d=bit_is_clear(PINA,0);
 234:	89 b3       	in	r24, 0x19	; 25
 236:	80 95       	com	r24
 238:	81 70       	andi	r24, 0x01	; 1
				d_old=d;
 23a:	80 93 6d 00 	sts	0x006D, r24
				dt=dt<<1;
 23e:	20 91 6b 00 	lds	r18, 0x006B
 242:	30 91 6c 00 	lds	r19, 0x006C
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	30 93 6c 00 	sts	0x006C, r19
 24e:	20 93 6b 00 	sts	0x006B, r18
				dt=dt+d;
 252:	20 91 6b 00 	lds	r18, 0x006B
 256:	30 91 6c 00 	lds	r19, 0x006C
 25a:	28 0f       	add	r18, r24
 25c:	31 1d       	adc	r19, r1
 25e:	30 93 6c 00 	sts	0x006C, r19
 262:	20 93 6b 00 	sts	0x006B, r18
			}
		}
		return;
	}
	//---------------------------------------------
}
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main (void)
{
	DDRB=0x01;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	87 bb       	out	0x17, r24	; 23
	DDRD=0x04;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 280:	29 e1       	ldi	r18, 0x19	; 25
 282:	30 e0       	ldi	r19, 0x00	; 0
	
	for(;;)
	{
		sbi(PORTB,0);
 284:	c0 9a       	sbi	0x18, 0	; 24
		cbi(PORTD,2);
 286:	92 98       	cbi	0x12, 2	; 18
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	f9 01       	movw	r30, r18
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	d9 f7       	brne	.-10     	; 0x28c <main+0x14>
		_delay_ms(8000);
		cbi(PORTB,0);
 296:	c0 98       	cbi	0x18, 0	; 24
		sbi(PORTD,2);
 298:	92 9a       	sbi	0x12, 2	; 18
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	9f ef       	ldi	r25, 0xFF	; 255
 29e:	f9 01       	movw	r30, r18
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a6:	d9 f7       	brne	.-10     	; 0x29e <main+0x26>
 2a8:	ed cf       	rjmp	.-38     	; 0x284 <main+0xc>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
