
IR-Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00000250  000002c4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a0  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d1  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000240  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b2  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008f  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  8a:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
								// TIMER OVERFLOW ON 255-191 = 64 COUNTS
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/
SIGNAL(SIG_OVERFLOW2)            	// signal handler for tcnt2 overflow interrupt
{//every 70.721usec here
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	c3p5++;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
	c131++;
  b2:	80 91 62 00 	lds	r24, 0x0062
  b6:	90 91 63 00 	lds	r25, 0x0063
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 63 00 	sts	0x0063, r25
  c0:	80 93 62 00 	sts	0x0062, r24
			if(bit_is_clear(PINC,1))
  c4:	99 99       	sbic	0x13, 1	; 19
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__vector_5+0x3a>
			{
				sbi(PORTC,1);
  c8:	a9 9a       	sbi	0x15, 1	; 21
  ca:	01 c0       	rjmp	.+2      	; 0xce <__vector_5+0x3c>
			}
			else
			{
				cbi(PORTC,1);
  cc:	a9 98       	cbi	0x15, 1	; 21
			}
	
    TCNT2 = TIMER_2_CNT;         	// reset counter to get this interrupt again
  ce:	8f eb       	ldi	r24, 0xBF	; 191
  d0:	84 bd       	out	0x24, r24	; 36
	
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <GetFrameStart>:
//---------------------------------------------
char GetFrameStart(void)
{
  e0:	10 92 61 00 	sts	0x0061, r1
  e4:	10 92 60 00 	sts	0x0060, r1
	c3p5=0;
	c131=0;
  e8:	10 92 63 00 	sts	0x0063, r1
  ec:	10 92 62 00 	sts	0x0062, r1
	char b=0;
	for(;;)
	{
		if(bit_is_clear(PINA,0))
  f0:	c8 99       	sbic	0x19, 0	; 25
  f2:	04 c0       	rjmp	.+8      	; 0xfc <GetFrameStart+0x1c>
		{
			c3p5=0;
  f4:	10 92 61 00 	sts	0x0061, r1
  f8:	10 92 60 00 	sts	0x0060, r1
		}
		if(c3p5>49)//3.465mSec
  fc:	80 91 60 00 	lds	r24, 0x0060
 100:	90 91 61 00 	lds	r25, 0x0061
 104:	c2 97       	sbiw	r24, 0x32	; 50
 106:	4c f4       	brge	.+18     	; 0x11a <GetFrameStart+0x3a>
		{
			b=1;
			break;
		}
		if(c131>1852)//131.00mSec
 108:	80 91 62 00 	lds	r24, 0x0062
 10c:	90 91 63 00 	lds	r25, 0x0063
 110:	8d 53       	subi	r24, 0x3D	; 61
 112:	97 40       	sbci	r25, 0x07	; 7
 114:	6c f3       	brlt	.-38     	; 0xf0 <GetFrameStart+0x10>
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	08 95       	ret
		}
	}
	if(b==2)
		return b;
	b=0;	
	c131=0;
 11a:	10 92 63 00 	sts	0x0063, r1
 11e:	10 92 62 00 	sts	0x0062, r1
	for(;;)
	{
		if(bit_is_clear(PINA,0))
 122:	c8 99       	sbic	0x19, 0	; 25
 124:	02 c0       	rjmp	.+4      	; 0x12a <GetFrameStart+0x4a>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
		{
			b=0;
			break;
		}
		if(c131>1852)//131.0mSec
 12a:	80 91 62 00 	lds	r24, 0x0062
 12e:	90 91 63 00 	lds	r25, 0x0063
 132:	8d 53       	subi	r24, 0x3D	; 61
 134:	97 40       	sbci	r25, 0x07	; 7
 136:	ac f3       	brlt	.-22     	; 0x122 <GetFrameStart+0x42>
 138:	82 e0       	ldi	r24, 0x02	; 2
			b=2;
			break;
		}
	}
	return b;
}
 13a:	08 95       	ret

0000013c <GetFrameData>:
//---------------------------------------------
int GetFrameData(void)
{
 13c:	10 92 61 00 	sts	0x0061, r1
 140:	10 92 60 00 	sts	0x0060, r1
static int data;
int i =0;
c3p5=0;
c131=0;
 144:	10 92 63 00 	sts	0x0063, r1
 148:	10 92 62 00 	sts	0x0062, r1
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
{
	for(;;)
	{
		if(c3p5>=18)//was 18 after 1.304 mSec
		{
		c = bit_is_clear(PINA,0);
 154:	e1 e0       	ldi	r30, 0x01	; 1
 156:	f0 e0       	ldi	r31, 0x00	; 0
data=0;
for(;;)
{
	for(;;)
	{
		if(c3p5>=18)//was 18 after 1.304 mSec
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	90 91 61 00 	lds	r25, 0x0061
 160:	42 97       	sbiw	r24, 0x12	; 18
 162:	d4 f3       	brlt	.-12     	; 0x158 <GetFrameData+0x1c>
		{
		c = bit_is_clear(PINA,0);
 164:	89 b3       	in	r24, 0x19	; 25
 166:	8e 27       	eor	r24, r30
 168:	81 70       	andi	r24, 0x01	; 1
		data=data << 1;
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
		char d = c;
		d = d & 1;
		data = data + d; 
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	28 0f       	add	r18, r24
 172:	39 1f       	adc	r19, r25
		i++;
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
		c3p5=0;
 178:	10 92 61 00 	sts	0x0061, r1
 17c:	10 92 60 00 	sts	0x0060, r1
		break;
		}
	}
	for(;;)
	{
		if(c!=bit_is_clear(PINA,0))
 180:	bc 01       	movw	r22, r24
 182:	89 b3       	in	r24, 0x19	; 25
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	8e 27       	eor	r24, r30
 188:	9f 27       	eor	r25, r31
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	90 70       	andi	r25, 0x00	; 0
 18e:	68 17       	cp	r22, r24
 190:	79 07       	cpc	r23, r25
 192:	b9 f3       	breq	.-18     	; 0x182 <GetFrameData+0x46>
			break;
			c3p5=0;
		}
		
	}
	if(i==13)
 194:	4d 30       	cpi	r20, 0x0D	; 13
 196:	51 05       	cpc	r21, r1
 198:	f9 f6       	brne	.-66     	; 0x158 <GetFrameData+0x1c>
 19a:	30 93 65 00 	sts	0x0065, r19
 19e:	20 93 64 00 	sts	0x0064, r18
	{
		break;
	}
}
	return data;	
}
 1a2:	c9 01       	movw	r24, r18
 1a4:	08 95       	ret

000001a6 <Test2>:
//---------------------------------------------
void Test2(void)
{
 1a6:	10 92 61 00 	sts	0x0061, r1
 1aa:	10 92 60 00 	sts	0x0060, r1
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
		c3p5=0;
	for(;;)
	{
		if(c!=c3p5)
		{
		d=bit_is_clear(PINA,0);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	70 e0       	ldi	r23, 0x00	; 0
		c=0;
		a=0;
		c3p5=0;
	for(;;)
	{
		if(c!=c3p5)
 1ba:	80 91 60 00 	lds	r24, 0x0060
 1be:	90 91 61 00 	lds	r25, 0x0061
 1c2:	48 17       	cp	r20, r24
 1c4:	59 07       	cpc	r21, r25
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <Test2+0x30>
		{
		d=bit_is_clear(PINA,0);
 1c8:	29 b3       	in	r18, 0x19	; 25
 1ca:	26 27       	eor	r18, r22
 1cc:	21 70       	andi	r18, 0x01	; 1
		c=c3p5;
 1ce:	40 91 60 00 	lds	r20, 0x0060
 1d2:	50 91 61 00 	lds	r21, 0x0061
		}
		
		if(c3p5>16)
 1d6:	80 91 60 00 	lds	r24, 0x0060
 1da:	90 91 61 00 	lds	r25, 0x0061
 1de:	41 97       	sbiw	r24, 0x11	; 17
 1e0:	84 f0       	brlt	.+32     	; 0x202 <Test2+0x5c>
		{
			if(c3p5>49)
 1e2:	80 91 60 00 	lds	r24, 0x0060
 1e6:	90 91 61 00 	lds	r25, 0x0061
 1ea:	c2 97       	sbiw	r24, 0x32	; 50
 1ec:	b4 f4       	brge	.+44     	; 0x21a <Test2+0x74>
			{
			break;
			}
			if(a!=d)
 1ee:	32 17       	cp	r19, r18
 1f0:	71 f0       	breq	.+28     	; 0x20e <Test2+0x68>
			{
			c3p5=0;
 1f2:	10 92 61 00 	sts	0x0061, r1
 1f6:	10 92 60 00 	sts	0x0060, r1
 1fa:	32 2f       	mov	r19, r18
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	06 c0       	rjmp	.+12     	; 0x20e <Test2+0x68>
			
			}
		}
		else
		{
			if(a!=d)
 202:	32 17       	cp	r19, r18
 204:	21 f0       	breq	.+8      	; 0x20e <Test2+0x68>
			{
			c3p5=0;
 206:	10 92 61 00 	sts	0x0061, r1
 20a:	10 92 60 00 	sts	0x0060, r1
			}
		}
		
		if(a==0)
 20e:	33 23       	and	r19, r19
 210:	11 f4       	brne	.+4      	; 0x216 <Test2+0x70>
			sbi(PORTC,0);
 212:	a8 9a       	sbi	0x15, 0	; 21
 214:	d2 cf       	rjmp	.-92     	; 0x1ba <Test2+0x14>
		else
			cbi(PORTC,0);
 216:	a8 98       	cbi	0x15, 0	; 21
 218:	d0 cf       	rjmp	.-96     	; 0x1ba <Test2+0x14>
 21a:	08 95       	ret

0000021c <main>:
/*----------------------------------------------------------------
-----------------MAIN-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 21c:	1a ba       	out	0x1a, r1	; 26
    //int data;
	DDRA=0x00;				//set port A as input port all bits.
	DDRC=0xFF;				//Set Port C as output port all bits.
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	84 bb       	out	0x14, r24	; 20
	TCCR2 = TMC8_CK8;               	
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	85 bd       	out	0x25, r24	; 37
    TCNT2  = TIMER_2_CNT;        	// reset TCNT1
 226:	8f eb       	ldi	r24, 0xBF	; 191
 228:	84 bd       	out	0x24, r24	; 36
     TIMSK  = _BV(TOIE2);         	// enable TCNT1 overflow 
 22a:	80 e4       	ldi	r24, 0x40	; 64
 22c:	89 bf       	out	0x39, r24	; 57
    
    sei();                       	// enable interrupts
 22e:	78 94       	sei
	
	for(;;)
	{
		sbi(PORTC,3);
 230:	ab 9a       	sbi	0x15, 3	; 21
		char r = GetFrameStart();
 232:	0e 94 70 00 	call	0xe0	; 0xe0 <GetFrameStart>
		if(r==0)
 236:	88 23       	and	r24, r24
 238:	d9 f7       	brne	.-10     	; 0x230 <main+0x14>
		{
		cbi(PORTC,3);
 23a:	ab 98       	cbi	0x15, 3	; 21
		  Test2();
 23c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Test2>
		 //data = GetFrameData();
		 //data = data & 0x3f;
		 
			if(bit_is_clear(PINC,2))
 240:	9a 99       	sbic	0x13, 2	; 19
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x2c>
			{
				sbi(PORTC,2);
 244:	aa 9a       	sbi	0x15, 2	; 21
 246:	f4 cf       	rjmp	.-24     	; 0x230 <main+0x14>
			}
			else
			{
				cbi(PORTC,2);
 248:	aa 98       	cbi	0x15, 2	; 21
 24a:	f2 cf       	rjmp	.-28     	; 0x230 <main+0x14>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
